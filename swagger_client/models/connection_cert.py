# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ConnectionCert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cert_view': 'CertView',
        'x509_file': 'X509File',
        'active_verification_cert': 'bool',
        'primary_verification_cert': 'bool',
        'secondary_verification_cert': 'bool',
        'encryption_cert': 'bool'
    }

    attribute_map = {
        'cert_view': 'certView',
        'x509_file': 'x509File',
        'active_verification_cert': 'activeVerificationCert',
        'primary_verification_cert': 'primaryVerificationCert',
        'secondary_verification_cert': 'secondaryVerificationCert',
        'encryption_cert': 'encryptionCert'
    }

    def __init__(self, cert_view=None, x509_file=None, active_verification_cert=None, primary_verification_cert=None, secondary_verification_cert=None, encryption_cert=None, _configuration=None):  # noqa: E501
        """ConnectionCert - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cert_view = None
        self._x509_file = None
        self._active_verification_cert = None
        self._primary_verification_cert = None
        self._secondary_verification_cert = None
        self._encryption_cert = None
        self.discriminator = None

        if cert_view is not None:
            self.cert_view = cert_view
        self.x509_file = x509_file
        if active_verification_cert is not None:
            self.active_verification_cert = active_verification_cert
        if primary_verification_cert is not None:
            self.primary_verification_cert = primary_verification_cert
        if secondary_verification_cert is not None:
            self.secondary_verification_cert = secondary_verification_cert
        if encryption_cert is not None:
            self.encryption_cert = encryption_cert

    @property
    def cert_view(self):
        """Gets the cert_view of this ConnectionCert.  # noqa: E501

        Certificate details. This property is read-only and is always ignored on a POST or PUT.  # noqa: E501

        :return: The cert_view of this ConnectionCert.  # noqa: E501
        :rtype: CertView
        """
        return self._cert_view

    @cert_view.setter
    def cert_view(self, cert_view):
        """Sets the cert_view of this ConnectionCert.

        Certificate details. This property is read-only and is always ignored on a POST or PUT.  # noqa: E501

        :param cert_view: The cert_view of this ConnectionCert.  # noqa: E501
        :type: CertView
        """

        self._cert_view = cert_view

    @property
    def x509_file(self):
        """Gets the x509_file of this ConnectionCert.  # noqa: E501

        The certificate data. This property must always be supplied on a POST or PUT.  # noqa: E501

        :return: The x509_file of this ConnectionCert.  # noqa: E501
        :rtype: X509File
        """
        return self._x509_file

    @x509_file.setter
    def x509_file(self, x509_file):
        """Sets the x509_file of this ConnectionCert.

        The certificate data. This property must always be supplied on a POST or PUT.  # noqa: E501

        :param x509_file: The x509_file of this ConnectionCert.  # noqa: E501
        :type: X509File
        """
        if self._configuration.client_side_validation and x509_file is None:
            raise ValueError("Invalid value for `x509_file`, must not be `None`")  # noqa: E501

        self._x509_file = x509_file

    @property
    def active_verification_cert(self):
        """Gets the active_verification_cert of this ConnectionCert.  # noqa: E501

        Indicates whether this is an active signature verification certificate.  # noqa: E501

        :return: The active_verification_cert of this ConnectionCert.  # noqa: E501
        :rtype: bool
        """
        return self._active_verification_cert

    @active_verification_cert.setter
    def active_verification_cert(self, active_verification_cert):
        """Sets the active_verification_cert of this ConnectionCert.

        Indicates whether this is an active signature verification certificate.  # noqa: E501

        :param active_verification_cert: The active_verification_cert of this ConnectionCert.  # noqa: E501
        :type: bool
        """

        self._active_verification_cert = active_verification_cert

    @property
    def primary_verification_cert(self):
        """Gets the primary_verification_cert of this ConnectionCert.  # noqa: E501

        Indicates whether this is the primary signature verification certificate. Only one certificate in the collection can have this flag set.  # noqa: E501

        :return: The primary_verification_cert of this ConnectionCert.  # noqa: E501
        :rtype: bool
        """
        return self._primary_verification_cert

    @primary_verification_cert.setter
    def primary_verification_cert(self, primary_verification_cert):
        """Sets the primary_verification_cert of this ConnectionCert.

        Indicates whether this is the primary signature verification certificate. Only one certificate in the collection can have this flag set.  # noqa: E501

        :param primary_verification_cert: The primary_verification_cert of this ConnectionCert.  # noqa: E501
        :type: bool
        """

        self._primary_verification_cert = primary_verification_cert

    @property
    def secondary_verification_cert(self):
        """Gets the secondary_verification_cert of this ConnectionCert.  # noqa: E501

        Indicates whether this is the secondary signature verification certificate. Only one certificate in the collection can have this flag set.  # noqa: E501

        :return: The secondary_verification_cert of this ConnectionCert.  # noqa: E501
        :rtype: bool
        """
        return self._secondary_verification_cert

    @secondary_verification_cert.setter
    def secondary_verification_cert(self, secondary_verification_cert):
        """Sets the secondary_verification_cert of this ConnectionCert.

        Indicates whether this is the secondary signature verification certificate. Only one certificate in the collection can have this flag set.  # noqa: E501

        :param secondary_verification_cert: The secondary_verification_cert of this ConnectionCert.  # noqa: E501
        :type: bool
        """

        self._secondary_verification_cert = secondary_verification_cert

    @property
    def encryption_cert(self):
        """Gets the encryption_cert of this ConnectionCert.  # noqa: E501

        Indicates whether to use this cert to encrypt outgoing assertions. Only one certificate in the collection can have this flag set.  # noqa: E501

        :return: The encryption_cert of this ConnectionCert.  # noqa: E501
        :rtype: bool
        """
        return self._encryption_cert

    @encryption_cert.setter
    def encryption_cert(self, encryption_cert):
        """Sets the encryption_cert of this ConnectionCert.

        Indicates whether to use this cert to encrypt outgoing assertions. Only one certificate in the collection can have this flag set.  # noqa: E501

        :param encryption_cert: The encryption_cert of this ConnectionCert.  # noqa: E501
        :type: bool
        """

        self._encryption_cert = encryption_cert

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectionCert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectionCert):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConnectionCert):
            return True

        return self.to_dict() != other.to_dict()
