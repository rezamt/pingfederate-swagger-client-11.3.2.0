# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AuthnApiSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_enabled': 'bool',
        'default_application_ref': 'ResourceLink',
        'enable_api_descriptions': 'bool',
        'restrict_access_to_redirectless_mode': 'bool',
        'include_request_context': 'bool'
    }

    attribute_map = {
        'api_enabled': 'apiEnabled',
        'default_application_ref': 'defaultApplicationRef',
        'enable_api_descriptions': 'enableApiDescriptions',
        'restrict_access_to_redirectless_mode': 'restrictAccessToRedirectlessMode',
        'include_request_context': 'includeRequestContext'
    }

    def __init__(self, api_enabled=None, default_application_ref=None, enable_api_descriptions=None, restrict_access_to_redirectless_mode=None, include_request_context=None, _configuration=None):  # noqa: E501
        """AuthnApiSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._api_enabled = None
        self._default_application_ref = None
        self._enable_api_descriptions = None
        self._restrict_access_to_redirectless_mode = None
        self._include_request_context = None
        self.discriminator = None

        if api_enabled is not None:
            self.api_enabled = api_enabled
        if default_application_ref is not None:
            self.default_application_ref = default_application_ref
        if enable_api_descriptions is not None:
            self.enable_api_descriptions = enable_api_descriptions
        if restrict_access_to_redirectless_mode is not None:
            self.restrict_access_to_redirectless_mode = restrict_access_to_redirectless_mode
        if include_request_context is not None:
            self.include_request_context = include_request_context

    @property
    def api_enabled(self):
        """Gets the api_enabled of this AuthnApiSettings.  # noqa: E501

        Specifies whether the authentication API is enabled. The default value is false.  # noqa: E501

        :return: The api_enabled of this AuthnApiSettings.  # noqa: E501
        :rtype: bool
        """
        return self._api_enabled

    @api_enabled.setter
    def api_enabled(self, api_enabled):
        """Sets the api_enabled of this AuthnApiSettings.

        Specifies whether the authentication API is enabled. The default value is false.  # noqa: E501

        :param api_enabled: The api_enabled of this AuthnApiSettings.  # noqa: E501
        :type: bool
        """

        self._api_enabled = api_enabled

    @property
    def default_application_ref(self):
        """Gets the default_application_ref of this AuthnApiSettings.  # noqa: E501

        Application for non authentication policy use cases.  # noqa: E501

        :return: The default_application_ref of this AuthnApiSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._default_application_ref

    @default_application_ref.setter
    def default_application_ref(self, default_application_ref):
        """Sets the default_application_ref of this AuthnApiSettings.

        Application for non authentication policy use cases.  # noqa: E501

        :param default_application_ref: The default_application_ref of this AuthnApiSettings.  # noqa: E501
        :type: ResourceLink
        """

        self._default_application_ref = default_application_ref

    @property
    def enable_api_descriptions(self):
        """Gets the enable_api_descriptions of this AuthnApiSettings.  # noqa: E501

        Enable the API Descriptions endpoint.  # noqa: E501

        :return: The enable_api_descriptions of this AuthnApiSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_api_descriptions

    @enable_api_descriptions.setter
    def enable_api_descriptions(self, enable_api_descriptions):
        """Sets the enable_api_descriptions of this AuthnApiSettings.

        Enable the API Descriptions endpoint.  # noqa: E501

        :param enable_api_descriptions: The enable_api_descriptions of this AuthnApiSettings.  # noqa: E501
        :type: bool
        """

        self._enable_api_descriptions = enable_api_descriptions

    @property
    def restrict_access_to_redirectless_mode(self):
        """Gets the restrict_access_to_redirectless_mode of this AuthnApiSettings.  # noqa: E501

        Determines whether access to the authentication API redirectless mode is restricted to specified applications.  # noqa: E501

        :return: The restrict_access_to_redirectless_mode of this AuthnApiSettings.  # noqa: E501
        :rtype: bool
        """
        return self._restrict_access_to_redirectless_mode

    @restrict_access_to_redirectless_mode.setter
    def restrict_access_to_redirectless_mode(self, restrict_access_to_redirectless_mode):
        """Sets the restrict_access_to_redirectless_mode of this AuthnApiSettings.

        Determines whether access to the authentication API redirectless mode is restricted to specified applications.  # noqa: E501

        :param restrict_access_to_redirectless_mode: The restrict_access_to_redirectless_mode of this AuthnApiSettings.  # noqa: E501
        :type: bool
        """

        self._restrict_access_to_redirectless_mode = restrict_access_to_redirectless_mode

    @property
    def include_request_context(self):
        """Gets the include_request_context of this AuthnApiSettings.  # noqa: E501

        Determines whether the request context parameters are included in response for authentication API. The default value is false.  # noqa: E501

        :return: The include_request_context of this AuthnApiSettings.  # noqa: E501
        :rtype: bool
        """
        return self._include_request_context

    @include_request_context.setter
    def include_request_context(self, include_request_context):
        """Sets the include_request_context of this AuthnApiSettings.

        Determines whether the request context parameters are included in response for authentication API. The default value is false.  # noqa: E501

        :param include_request_context: The include_request_context of this AuthnApiSettings.  # noqa: E501
        :type: bool
        """

        self._include_request_context = include_request_context

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthnApiSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthnApiSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthnApiSettings):
            return True

        return self.to_dict() != other.to_dict()
