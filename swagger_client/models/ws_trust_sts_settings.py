# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class WsTrustStsSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'basic_authn_enabled': 'bool',
        'client_cert_authn_enabled': 'bool',
        'restrict_by_subject_dn': 'bool',
        'restrict_by_issuer_cert': 'bool',
        'subject_dns': 'list[str]',
        'users': 'list[UsernamePasswordCredentials]',
        'issuer_certs': 'list[ResourceLink]'
    }

    attribute_map = {
        'basic_authn_enabled': 'basicAuthnEnabled',
        'client_cert_authn_enabled': 'clientCertAuthnEnabled',
        'restrict_by_subject_dn': 'restrictBySubjectDn',
        'restrict_by_issuer_cert': 'restrictByIssuerCert',
        'subject_dns': 'subjectDns',
        'users': 'users',
        'issuer_certs': 'issuerCerts'
    }

    def __init__(self, basic_authn_enabled=None, client_cert_authn_enabled=None, restrict_by_subject_dn=None, restrict_by_issuer_cert=None, subject_dns=None, users=None, issuer_certs=None, _configuration=None):  # noqa: E501
        """WsTrustStsSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._basic_authn_enabled = None
        self._client_cert_authn_enabled = None
        self._restrict_by_subject_dn = None
        self._restrict_by_issuer_cert = None
        self._subject_dns = None
        self._users = None
        self._issuer_certs = None
        self.discriminator = None

        if basic_authn_enabled is not None:
            self.basic_authn_enabled = basic_authn_enabled
        if client_cert_authn_enabled is not None:
            self.client_cert_authn_enabled = client_cert_authn_enabled
        if restrict_by_subject_dn is not None:
            self.restrict_by_subject_dn = restrict_by_subject_dn
        if restrict_by_issuer_cert is not None:
            self.restrict_by_issuer_cert = restrict_by_issuer_cert
        if subject_dns is not None:
            self.subject_dns = subject_dns
        if users is not None:
            self.users = users
        if issuer_certs is not None:
            self.issuer_certs = issuer_certs

    @property
    def basic_authn_enabled(self):
        """Gets the basic_authn_enabled of this WsTrustStsSettings.  # noqa: E501

        Require the use of HTTP Basic Authentication to access WS-Trust STS endpoints. Requires users be populated.  # noqa: E501

        :return: The basic_authn_enabled of this WsTrustStsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._basic_authn_enabled

    @basic_authn_enabled.setter
    def basic_authn_enabled(self, basic_authn_enabled):
        """Sets the basic_authn_enabled of this WsTrustStsSettings.

        Require the use of HTTP Basic Authentication to access WS-Trust STS endpoints. Requires users be populated.  # noqa: E501

        :param basic_authn_enabled: The basic_authn_enabled of this WsTrustStsSettings.  # noqa: E501
        :type: bool
        """

        self._basic_authn_enabled = basic_authn_enabled

    @property
    def client_cert_authn_enabled(self):
        """Gets the client_cert_authn_enabled of this WsTrustStsSettings.  # noqa: E501

        Require the use of Client Cert Authentication to access WS-Trust STS endpoints. Requires either restrictBySubjectDn and/or restrictByIssuerCert be enabled.  # noqa: E501

        :return: The client_cert_authn_enabled of this WsTrustStsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._client_cert_authn_enabled

    @client_cert_authn_enabled.setter
    def client_cert_authn_enabled(self, client_cert_authn_enabled):
        """Sets the client_cert_authn_enabled of this WsTrustStsSettings.

        Require the use of Client Cert Authentication to access WS-Trust STS endpoints. Requires either restrictBySubjectDn and/or restrictByIssuerCert be enabled.  # noqa: E501

        :param client_cert_authn_enabled: The client_cert_authn_enabled of this WsTrustStsSettings.  # noqa: E501
        :type: bool
        """

        self._client_cert_authn_enabled = client_cert_authn_enabled

    @property
    def restrict_by_subject_dn(self):
        """Gets the restrict_by_subject_dn of this WsTrustStsSettings.  # noqa: E501

        Restrict Access by Subject DN. Ignored if clientCertAuthnEnabled is disabled.  # noqa: E501

        :return: The restrict_by_subject_dn of this WsTrustStsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._restrict_by_subject_dn

    @restrict_by_subject_dn.setter
    def restrict_by_subject_dn(self, restrict_by_subject_dn):
        """Sets the restrict_by_subject_dn of this WsTrustStsSettings.

        Restrict Access by Subject DN. Ignored if clientCertAuthnEnabled is disabled.  # noqa: E501

        :param restrict_by_subject_dn: The restrict_by_subject_dn of this WsTrustStsSettings.  # noqa: E501
        :type: bool
        """

        self._restrict_by_subject_dn = restrict_by_subject_dn

    @property
    def restrict_by_issuer_cert(self):
        """Gets the restrict_by_issuer_cert of this WsTrustStsSettings.  # noqa: E501

        Restrict Access by Issuer Certificate. Ignored if clientCertAuthnEnabled is disabled.  # noqa: E501

        :return: The restrict_by_issuer_cert of this WsTrustStsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._restrict_by_issuer_cert

    @restrict_by_issuer_cert.setter
    def restrict_by_issuer_cert(self, restrict_by_issuer_cert):
        """Sets the restrict_by_issuer_cert of this WsTrustStsSettings.

        Restrict Access by Issuer Certificate. Ignored if clientCertAuthnEnabled is disabled.  # noqa: E501

        :param restrict_by_issuer_cert: The restrict_by_issuer_cert of this WsTrustStsSettings.  # noqa: E501
        :type: bool
        """

        self._restrict_by_issuer_cert = restrict_by_issuer_cert

    @property
    def subject_dns(self):
        """Gets the subject_dns of this WsTrustStsSettings.  # noqa: E501

        List of Subject DNs for certificates that are allowed to authenticate to WS-Trust STS endpoints. Required if restrictBySubjectDn is enabled.  # noqa: E501

        :return: The subject_dns of this WsTrustStsSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_dns

    @subject_dns.setter
    def subject_dns(self, subject_dns):
        """Sets the subject_dns of this WsTrustStsSettings.

        List of Subject DNs for certificates that are allowed to authenticate to WS-Trust STS endpoints. Required if restrictBySubjectDn is enabled.  # noqa: E501

        :param subject_dns: The subject_dns of this WsTrustStsSettings.  # noqa: E501
        :type: list[str]
        """

        self._subject_dns = subject_dns

    @property
    def users(self):
        """Gets the users of this WsTrustStsSettings.  # noqa: E501

        List of users authorized to access WS-Trust STS endpoints when basicAuthnEnabled is enabled. At least one users entry is required if basicAuthnEnabled is enabled.  # noqa: E501

        :return: The users of this WsTrustStsSettings.  # noqa: E501
        :rtype: list[UsernamePasswordCredentials]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this WsTrustStsSettings.

        List of users authorized to access WS-Trust STS endpoints when basicAuthnEnabled is enabled. At least one users entry is required if basicAuthnEnabled is enabled.  # noqa: E501

        :param users: The users of this WsTrustStsSettings.  # noqa: E501
        :type: list[UsernamePasswordCredentials]
        """

        self._users = users

    @property
    def issuer_certs(self):
        """Gets the issuer_certs of this WsTrustStsSettings.  # noqa: E501

        List of certificate Issuers that are used to validate certificates for access to the WS-Trust STS endpoints. Required if restrictByIssuerCert is enabled.  # noqa: E501

        :return: The issuer_certs of this WsTrustStsSettings.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._issuer_certs

    @issuer_certs.setter
    def issuer_certs(self, issuer_certs):
        """Sets the issuer_certs of this WsTrustStsSettings.

        List of certificate Issuers that are used to validate certificates for access to the WS-Trust STS endpoints. Required if restrictByIssuerCert is enabled.  # noqa: E501

        :param issuer_certs: The issuer_certs of this WsTrustStsSettings.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._issuer_certs = issuer_certs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WsTrustStsSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WsTrustStsSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WsTrustStsSettings):
            return True

        return self.to_dict() != other.to_dict()
