# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ConnectionCredentials(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'verification_subject_dn': 'str',
        'verification_issuer_dn': 'str',
        'certs': 'list[ConnectionCert]',
        'block_encryption_algorithm': 'str',
        'key_transport_algorithm': 'str',
        'signing_settings': 'SigningSettings',
        'decryption_key_pair_ref': 'ResourceLink',
        'secondary_decryption_key_pair_ref': 'ResourceLink',
        'outbound_back_channel_auth': 'OutboundBackChannelAuth',
        'inbound_back_channel_auth': 'InboundBackChannelAuth'
    }

    attribute_map = {
        'verification_subject_dn': 'verificationSubjectDN',
        'verification_issuer_dn': 'verificationIssuerDN',
        'certs': 'certs',
        'block_encryption_algorithm': 'blockEncryptionAlgorithm',
        'key_transport_algorithm': 'keyTransportAlgorithm',
        'signing_settings': 'signingSettings',
        'decryption_key_pair_ref': 'decryptionKeyPairRef',
        'secondary_decryption_key_pair_ref': 'secondaryDecryptionKeyPairRef',
        'outbound_back_channel_auth': 'outboundBackChannelAuth',
        'inbound_back_channel_auth': 'inboundBackChannelAuth'
    }

    def __init__(self, verification_subject_dn=None, verification_issuer_dn=None, certs=None, block_encryption_algorithm=None, key_transport_algorithm=None, signing_settings=None, decryption_key_pair_ref=None, secondary_decryption_key_pair_ref=None, outbound_back_channel_auth=None, inbound_back_channel_auth=None, _configuration=None):  # noqa: E501
        """ConnectionCredentials - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._verification_subject_dn = None
        self._verification_issuer_dn = None
        self._certs = None
        self._block_encryption_algorithm = None
        self._key_transport_algorithm = None
        self._signing_settings = None
        self._decryption_key_pair_ref = None
        self._secondary_decryption_key_pair_ref = None
        self._outbound_back_channel_auth = None
        self._inbound_back_channel_auth = None
        self.discriminator = None

        if verification_subject_dn is not None:
            self.verification_subject_dn = verification_subject_dn
        if verification_issuer_dn is not None:
            self.verification_issuer_dn = verification_issuer_dn
        if certs is not None:
            self.certs = certs
        if block_encryption_algorithm is not None:
            self.block_encryption_algorithm = block_encryption_algorithm
        if key_transport_algorithm is not None:
            self.key_transport_algorithm = key_transport_algorithm
        if signing_settings is not None:
            self.signing_settings = signing_settings
        if decryption_key_pair_ref is not None:
            self.decryption_key_pair_ref = decryption_key_pair_ref
        if secondary_decryption_key_pair_ref is not None:
            self.secondary_decryption_key_pair_ref = secondary_decryption_key_pair_ref
        if outbound_back_channel_auth is not None:
            self.outbound_back_channel_auth = outbound_back_channel_auth
        if inbound_back_channel_auth is not None:
            self.inbound_back_channel_auth = inbound_back_channel_auth

    @property
    def verification_subject_dn(self):
        """Gets the verification_subject_dn of this ConnectionCredentials.  # noqa: E501

        If this property is set, the verification trust model is Anchored. The verification certificate must be signed by a trusted CA and included in the incoming message, and the subject DN of the expected certificate is specified in this property. If this property is not set, then a primary verification certificate must be specified in the certs array.  # noqa: E501

        :return: The verification_subject_dn of this ConnectionCredentials.  # noqa: E501
        :rtype: str
        """
        return self._verification_subject_dn

    @verification_subject_dn.setter
    def verification_subject_dn(self, verification_subject_dn):
        """Sets the verification_subject_dn of this ConnectionCredentials.

        If this property is set, the verification trust model is Anchored. The verification certificate must be signed by a trusted CA and included in the incoming message, and the subject DN of the expected certificate is specified in this property. If this property is not set, then a primary verification certificate must be specified in the certs array.  # noqa: E501

        :param verification_subject_dn: The verification_subject_dn of this ConnectionCredentials.  # noqa: E501
        :type: str
        """

        self._verification_subject_dn = verification_subject_dn

    @property
    def verification_issuer_dn(self):
        """Gets the verification_issuer_dn of this ConnectionCredentials.  # noqa: E501

        If a verification Subject DN is provided, you can optionally restrict the issuer to a specific trusted CA by specifying its DN in this field.  # noqa: E501

        :return: The verification_issuer_dn of this ConnectionCredentials.  # noqa: E501
        :rtype: str
        """
        return self._verification_issuer_dn

    @verification_issuer_dn.setter
    def verification_issuer_dn(self, verification_issuer_dn):
        """Sets the verification_issuer_dn of this ConnectionCredentials.

        If a verification Subject DN is provided, you can optionally restrict the issuer to a specific trusted CA by specifying its DN in this field.  # noqa: E501

        :param verification_issuer_dn: The verification_issuer_dn of this ConnectionCredentials.  # noqa: E501
        :type: str
        """

        self._verification_issuer_dn = verification_issuer_dn

    @property
    def certs(self):
        """Gets the certs of this ConnectionCredentials.  # noqa: E501

        The certificates used for signature verification and XML encryption.  # noqa: E501

        :return: The certs of this ConnectionCredentials.  # noqa: E501
        :rtype: list[ConnectionCert]
        """
        return self._certs

    @certs.setter
    def certs(self, certs):
        """Sets the certs of this ConnectionCredentials.

        The certificates used for signature verification and XML encryption.  # noqa: E501

        :param certs: The certs of this ConnectionCredentials.  # noqa: E501
        :type: list[ConnectionCert]
        """

        self._certs = certs

    @property
    def block_encryption_algorithm(self):
        """Gets the block_encryption_algorithm of this ConnectionCredentials.  # noqa: E501

        The algorithm used to encrypt assertions sent to this partner. AES_128, AES_256, AES_128_GCM, AES_192_GCM, AES_256_GCM and Triple_DES are supported.  # noqa: E501

        :return: The block_encryption_algorithm of this ConnectionCredentials.  # noqa: E501
        :rtype: str
        """
        return self._block_encryption_algorithm

    @block_encryption_algorithm.setter
    def block_encryption_algorithm(self, block_encryption_algorithm):
        """Sets the block_encryption_algorithm of this ConnectionCredentials.

        The algorithm used to encrypt assertions sent to this partner. AES_128, AES_256, AES_128_GCM, AES_192_GCM, AES_256_GCM and Triple_DES are supported.  # noqa: E501

        :param block_encryption_algorithm: The block_encryption_algorithm of this ConnectionCredentials.  # noqa: E501
        :type: str
        """

        self._block_encryption_algorithm = block_encryption_algorithm

    @property
    def key_transport_algorithm(self):
        """Gets the key_transport_algorithm of this ConnectionCredentials.  # noqa: E501

        The algorithm used to transport keys to this partner. RSA_OAEP, RSA_OAEP_256 and RSA_v15 are supported.  # noqa: E501

        :return: The key_transport_algorithm of this ConnectionCredentials.  # noqa: E501
        :rtype: str
        """
        return self._key_transport_algorithm

    @key_transport_algorithm.setter
    def key_transport_algorithm(self, key_transport_algorithm):
        """Sets the key_transport_algorithm of this ConnectionCredentials.

        The algorithm used to transport keys to this partner. RSA_OAEP, RSA_OAEP_256 and RSA_v15 are supported.  # noqa: E501

        :param key_transport_algorithm: The key_transport_algorithm of this ConnectionCredentials.  # noqa: E501
        :type: str
        """

        self._key_transport_algorithm = key_transport_algorithm

    @property
    def signing_settings(self):
        """Gets the signing_settings of this ConnectionCredentials.  # noqa: E501

        Settings related to the manner in which messages sent to the partner are digitally signed. Required for SP Connections.  # noqa: E501

        :return: The signing_settings of this ConnectionCredentials.  # noqa: E501
        :rtype: SigningSettings
        """
        return self._signing_settings

    @signing_settings.setter
    def signing_settings(self, signing_settings):
        """Sets the signing_settings of this ConnectionCredentials.

        Settings related to the manner in which messages sent to the partner are digitally signed. Required for SP Connections.  # noqa: E501

        :param signing_settings: The signing_settings of this ConnectionCredentials.  # noqa: E501
        :type: SigningSettings
        """

        self._signing_settings = signing_settings

    @property
    def decryption_key_pair_ref(self):
        """Gets the decryption_key_pair_ref of this ConnectionCredentials.  # noqa: E501

        The ID of the primary key pair used to decrypt message content received from this partner. The ID of the key pair is also known as the alias and can be found by viewing the corresponding certificate under 'Signing & Decryption Keys & Certificates' in the PingFederate Administrative Console.  # noqa: E501

        :return: The decryption_key_pair_ref of this ConnectionCredentials.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._decryption_key_pair_ref

    @decryption_key_pair_ref.setter
    def decryption_key_pair_ref(self, decryption_key_pair_ref):
        """Sets the decryption_key_pair_ref of this ConnectionCredentials.

        The ID of the primary key pair used to decrypt message content received from this partner. The ID of the key pair is also known as the alias and can be found by viewing the corresponding certificate under 'Signing & Decryption Keys & Certificates' in the PingFederate Administrative Console.  # noqa: E501

        :param decryption_key_pair_ref: The decryption_key_pair_ref of this ConnectionCredentials.  # noqa: E501
        :type: ResourceLink
        """

        self._decryption_key_pair_ref = decryption_key_pair_ref

    @property
    def secondary_decryption_key_pair_ref(self):
        """Gets the secondary_decryption_key_pair_ref of this ConnectionCredentials.  # noqa: E501

        The ID of the secondary key pair used to decrypt message content received from this partner.   # noqa: E501

        :return: The secondary_decryption_key_pair_ref of this ConnectionCredentials.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._secondary_decryption_key_pair_ref

    @secondary_decryption_key_pair_ref.setter
    def secondary_decryption_key_pair_ref(self, secondary_decryption_key_pair_ref):
        """Sets the secondary_decryption_key_pair_ref of this ConnectionCredentials.

        The ID of the secondary key pair used to decrypt message content received from this partner.   # noqa: E501

        :param secondary_decryption_key_pair_ref: The secondary_decryption_key_pair_ref of this ConnectionCredentials.  # noqa: E501
        :type: ResourceLink
        """

        self._secondary_decryption_key_pair_ref = secondary_decryption_key_pair_ref

    @property
    def outbound_back_channel_auth(self):
        """Gets the outbound_back_channel_auth of this ConnectionCredentials.  # noqa: E501

        The SOAP authentication method(s) to use when you send a message using SOAP back channel.  # noqa: E501

        :return: The outbound_back_channel_auth of this ConnectionCredentials.  # noqa: E501
        :rtype: OutboundBackChannelAuth
        """
        return self._outbound_back_channel_auth

    @outbound_back_channel_auth.setter
    def outbound_back_channel_auth(self, outbound_back_channel_auth):
        """Sets the outbound_back_channel_auth of this ConnectionCredentials.

        The SOAP authentication method(s) to use when you send a message using SOAP back channel.  # noqa: E501

        :param outbound_back_channel_auth: The outbound_back_channel_auth of this ConnectionCredentials.  # noqa: E501
        :type: OutboundBackChannelAuth
        """

        self._outbound_back_channel_auth = outbound_back_channel_auth

    @property
    def inbound_back_channel_auth(self):
        """Gets the inbound_back_channel_auth of this ConnectionCredentials.  # noqa: E501

        The SOAP authentication method(s) to use when you receive a message using SOAP back channel.  # noqa: E501

        :return: The inbound_back_channel_auth of this ConnectionCredentials.  # noqa: E501
        :rtype: InboundBackChannelAuth
        """
        return self._inbound_back_channel_auth

    @inbound_back_channel_auth.setter
    def inbound_back_channel_auth(self, inbound_back_channel_auth):
        """Sets the inbound_back_channel_auth of this ConnectionCredentials.

        The SOAP authentication method(s) to use when you receive a message using SOAP back channel.  # noqa: E501

        :param inbound_back_channel_auth: The inbound_back_channel_auth of this ConnectionCredentials.  # noqa: E501
        :type: InboundBackChannelAuth
        """

        self._inbound_back_channel_auth = inbound_back_channel_auth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectionCredentials, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectionCredentials):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConnectionCredentials):
            return True

        return self.to_dict() != other.to_dict()
