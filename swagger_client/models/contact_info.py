# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ContactInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company': 'str',
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'phone': 'str'
    }

    attribute_map = {
        'company': 'company',
        'email': 'email',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'phone': 'phone'
    }

    def __init__(self, company=None, email=None, first_name=None, last_name=None, phone=None, _configuration=None):  # noqa: E501
        """ContactInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._company = None
        self._email = None
        self._first_name = None
        self._last_name = None
        self._phone = None
        self.discriminator = None

        if company is not None:
            self.company = company
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if phone is not None:
            self.phone = phone

    @property
    def company(self):
        """Gets the company of this ContactInfo.  # noqa: E501

        Company name.  # noqa: E501

        :return: The company of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this ContactInfo.

        Company name.  # noqa: E501

        :param company: The company of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def email(self):
        """Gets the email of this ContactInfo.  # noqa: E501

        Contact email address.  # noqa: E501

        :return: The email of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ContactInfo.

        Contact email address.  # noqa: E501

        :param email: The email of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this ContactInfo.  # noqa: E501

        Contact first name.  # noqa: E501

        :return: The first_name of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ContactInfo.

        Contact first name.  # noqa: E501

        :param first_name: The first_name of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this ContactInfo.  # noqa: E501

        Contact last name.  # noqa: E501

        :return: The last_name of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ContactInfo.

        Contact last name.  # noqa: E501

        :param last_name: The last_name of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def phone(self):
        """Gets the phone of this ContactInfo.  # noqa: E501

        Contact phone number.  # noqa: E501

        :return: The phone of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ContactInfo.

        Contact phone number.  # noqa: E501

        :param phone: The phone of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._phone = phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContactInfo):
            return True

        return self.to_dict() != other.to_dict()
