# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class StsRequestParametersContract(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'parameters': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'parameters': 'parameters'
    }

    def __init__(self, id=None, name=None, parameters=None, _configuration=None):  # noqa: E501
        """StsRequestParametersContract - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._parameters = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.parameters = parameters

    @property
    def id(self):
        """Gets the id of this StsRequestParametersContract.  # noqa: E501

        The ID of the Security Token Service request parameter contract.<br>Note: Ignored for PUT requests.  # noqa: E501

        :return: The id of this StsRequestParametersContract.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StsRequestParametersContract.

        The ID of the Security Token Service request parameter contract.<br>Note: Ignored for PUT requests.  # noqa: E501

        :param id: The id of this StsRequestParametersContract.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this StsRequestParametersContract.  # noqa: E501

        The name of the Security Token Service request parameter contract.<br>Note: Ignored for PUT requests.  # noqa: E501

        :return: The name of this StsRequestParametersContract.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StsRequestParametersContract.

        The name of the Security Token Service request parameter contract.<br>Note: Ignored for PUT requests.  # noqa: E501

        :param name: The name of this StsRequestParametersContract.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this StsRequestParametersContract.  # noqa: E501

        The list of parameters within the Security  Token Service request parameter contract.  # noqa: E501

        :return: The parameters of this StsRequestParametersContract.  # noqa: E501
        :rtype: list[str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this StsRequestParametersContract.

        The list of parameters within the Security  Token Service request parameter contract.  # noqa: E501

        :param parameters: The parameters of this StsRequestParametersContract.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StsRequestParametersContract, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StsRequestParametersContract):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StsRequestParametersContract):
            return True

        return self.to_dict() != other.to_dict()
