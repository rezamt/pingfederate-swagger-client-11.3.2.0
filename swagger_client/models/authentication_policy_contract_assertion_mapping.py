# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AuthenticationPolicyContractAssertionMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authentication_policy_contract_ref': 'ResourceLink',
        'restrict_virtual_entity_ids': 'bool',
        'restricted_virtual_entity_ids': 'list[str]',
        'abort_sso_transaction_as_fail_safe': 'bool',
        'attribute_sources': 'list[AttributeSource]',
        'attribute_contract_fulfillment': 'dict(str, AttributeFulfillmentValue)',
        'issuance_criteria': 'IssuanceCriteria'
    }

    attribute_map = {
        'authentication_policy_contract_ref': 'authenticationPolicyContractRef',
        'restrict_virtual_entity_ids': 'restrictVirtualEntityIds',
        'restricted_virtual_entity_ids': 'restrictedVirtualEntityIds',
        'abort_sso_transaction_as_fail_safe': 'abortSsoTransactionAsFailSafe',
        'attribute_sources': 'attributeSources',
        'attribute_contract_fulfillment': 'attributeContractFulfillment',
        'issuance_criteria': 'issuanceCriteria'
    }

    def __init__(self, authentication_policy_contract_ref=None, restrict_virtual_entity_ids=None, restricted_virtual_entity_ids=None, abort_sso_transaction_as_fail_safe=None, attribute_sources=None, attribute_contract_fulfillment=None, issuance_criteria=None, _configuration=None):  # noqa: E501
        """AuthenticationPolicyContractAssertionMapping - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._authentication_policy_contract_ref = None
        self._restrict_virtual_entity_ids = None
        self._restricted_virtual_entity_ids = None
        self._abort_sso_transaction_as_fail_safe = None
        self._attribute_sources = None
        self._attribute_contract_fulfillment = None
        self._issuance_criteria = None
        self.discriminator = None

        self.authentication_policy_contract_ref = authentication_policy_contract_ref
        if restrict_virtual_entity_ids is not None:
            self.restrict_virtual_entity_ids = restrict_virtual_entity_ids
        if restricted_virtual_entity_ids is not None:
            self.restricted_virtual_entity_ids = restricted_virtual_entity_ids
        if abort_sso_transaction_as_fail_safe is not None:
            self.abort_sso_transaction_as_fail_safe = abort_sso_transaction_as_fail_safe
        if attribute_sources is not None:
            self.attribute_sources = attribute_sources
        self.attribute_contract_fulfillment = attribute_contract_fulfillment
        if issuance_criteria is not None:
            self.issuance_criteria = issuance_criteria

    @property
    def authentication_policy_contract_ref(self):
        """Gets the authentication_policy_contract_ref of this AuthenticationPolicyContractAssertionMapping.  # noqa: E501

        Reference to the associated Authentication Policy Contract.  # noqa: E501

        :return: The authentication_policy_contract_ref of this AuthenticationPolicyContractAssertionMapping.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._authentication_policy_contract_ref

    @authentication_policy_contract_ref.setter
    def authentication_policy_contract_ref(self, authentication_policy_contract_ref):
        """Sets the authentication_policy_contract_ref of this AuthenticationPolicyContractAssertionMapping.

        Reference to the associated Authentication Policy Contract.  # noqa: E501

        :param authentication_policy_contract_ref: The authentication_policy_contract_ref of this AuthenticationPolicyContractAssertionMapping.  # noqa: E501
        :type: ResourceLink
        """
        if self._configuration.client_side_validation and authentication_policy_contract_ref is None:
            raise ValueError("Invalid value for `authentication_policy_contract_ref`, must not be `None`")  # noqa: E501

        self._authentication_policy_contract_ref = authentication_policy_contract_ref

    @property
    def restrict_virtual_entity_ids(self):
        """Gets the restrict_virtual_entity_ids of this AuthenticationPolicyContractAssertionMapping.  # noqa: E501

        Restricts this mapping to specific virtual entity IDs.  # noqa: E501

        :return: The restrict_virtual_entity_ids of this AuthenticationPolicyContractAssertionMapping.  # noqa: E501
        :rtype: bool
        """
        return self._restrict_virtual_entity_ids

    @restrict_virtual_entity_ids.setter
    def restrict_virtual_entity_ids(self, restrict_virtual_entity_ids):
        """Sets the restrict_virtual_entity_ids of this AuthenticationPolicyContractAssertionMapping.

        Restricts this mapping to specific virtual entity IDs.  # noqa: E501

        :param restrict_virtual_entity_ids: The restrict_virtual_entity_ids of this AuthenticationPolicyContractAssertionMapping.  # noqa: E501
        :type: bool
        """

        self._restrict_virtual_entity_ids = restrict_virtual_entity_ids

    @property
    def restricted_virtual_entity_ids(self):
        """Gets the restricted_virtual_entity_ids of this AuthenticationPolicyContractAssertionMapping.  # noqa: E501

        The list of virtual server IDs that this mapping is restricted to.  # noqa: E501

        :return: The restricted_virtual_entity_ids of this AuthenticationPolicyContractAssertionMapping.  # noqa: E501
        :rtype: list[str]
        """
        return self._restricted_virtual_entity_ids

    @restricted_virtual_entity_ids.setter
    def restricted_virtual_entity_ids(self, restricted_virtual_entity_ids):
        """Sets the restricted_virtual_entity_ids of this AuthenticationPolicyContractAssertionMapping.

        The list of virtual server IDs that this mapping is restricted to.  # noqa: E501

        :param restricted_virtual_entity_ids: The restricted_virtual_entity_ids of this AuthenticationPolicyContractAssertionMapping.  # noqa: E501
        :type: list[str]
        """

        self._restricted_virtual_entity_ids = restricted_virtual_entity_ids

    @property
    def abort_sso_transaction_as_fail_safe(self):
        """Gets the abort_sso_transaction_as_fail_safe of this AuthenticationPolicyContractAssertionMapping.  # noqa: E501

        If set to true, SSO transaction will be aborted as a fail-safe when the data-store's attribute mappings fail to complete the attribute contract. Otherwise, the attribute contract with default values is used. By default, this value is false.  # noqa: E501

        :return: The abort_sso_transaction_as_fail_safe of this AuthenticationPolicyContractAssertionMapping.  # noqa: E501
        :rtype: bool
        """
        return self._abort_sso_transaction_as_fail_safe

    @abort_sso_transaction_as_fail_safe.setter
    def abort_sso_transaction_as_fail_safe(self, abort_sso_transaction_as_fail_safe):
        """Sets the abort_sso_transaction_as_fail_safe of this AuthenticationPolicyContractAssertionMapping.

        If set to true, SSO transaction will be aborted as a fail-safe when the data-store's attribute mappings fail to complete the attribute contract. Otherwise, the attribute contract with default values is used. By default, this value is false.  # noqa: E501

        :param abort_sso_transaction_as_fail_safe: The abort_sso_transaction_as_fail_safe of this AuthenticationPolicyContractAssertionMapping.  # noqa: E501
        :type: bool
        """

        self._abort_sso_transaction_as_fail_safe = abort_sso_transaction_as_fail_safe

    @property
    def attribute_sources(self):
        """Gets the attribute_sources of this AuthenticationPolicyContractAssertionMapping.  # noqa: E501

        A list of configured data stores to look up attributes from.  # noqa: E501

        :return: The attribute_sources of this AuthenticationPolicyContractAssertionMapping.  # noqa: E501
        :rtype: list[AttributeSource]
        """
        return self._attribute_sources

    @attribute_sources.setter
    def attribute_sources(self, attribute_sources):
        """Sets the attribute_sources of this AuthenticationPolicyContractAssertionMapping.

        A list of configured data stores to look up attributes from.  # noqa: E501

        :param attribute_sources: The attribute_sources of this AuthenticationPolicyContractAssertionMapping.  # noqa: E501
        :type: list[AttributeSource]
        """

        self._attribute_sources = attribute_sources

    @property
    def attribute_contract_fulfillment(self):
        """Gets the attribute_contract_fulfillment of this AuthenticationPolicyContractAssertionMapping.  # noqa: E501

        A list of mappings from attribute names to their fulfillment values.  # noqa: E501

        :return: The attribute_contract_fulfillment of this AuthenticationPolicyContractAssertionMapping.  # noqa: E501
        :rtype: dict(str, AttributeFulfillmentValue)
        """
        return self._attribute_contract_fulfillment

    @attribute_contract_fulfillment.setter
    def attribute_contract_fulfillment(self, attribute_contract_fulfillment):
        """Sets the attribute_contract_fulfillment of this AuthenticationPolicyContractAssertionMapping.

        A list of mappings from attribute names to their fulfillment values.  # noqa: E501

        :param attribute_contract_fulfillment: The attribute_contract_fulfillment of this AuthenticationPolicyContractAssertionMapping.  # noqa: E501
        :type: dict(str, AttributeFulfillmentValue)
        """
        if self._configuration.client_side_validation and attribute_contract_fulfillment is None:
            raise ValueError("Invalid value for `attribute_contract_fulfillment`, must not be `None`")  # noqa: E501

        self._attribute_contract_fulfillment = attribute_contract_fulfillment

    @property
    def issuance_criteria(self):
        """Gets the issuance_criteria of this AuthenticationPolicyContractAssertionMapping.  # noqa: E501

        The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.  # noqa: E501

        :return: The issuance_criteria of this AuthenticationPolicyContractAssertionMapping.  # noqa: E501
        :rtype: IssuanceCriteria
        """
        return self._issuance_criteria

    @issuance_criteria.setter
    def issuance_criteria(self, issuance_criteria):
        """Sets the issuance_criteria of this AuthenticationPolicyContractAssertionMapping.

        The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.  # noqa: E501

        :param issuance_criteria: The issuance_criteria of this AuthenticationPolicyContractAssertionMapping.  # noqa: E501
        :type: IssuanceCriteria
        """

        self._issuance_criteria = issuance_criteria

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthenticationPolicyContractAssertionMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthenticationPolicyContractAssertionMapping):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthenticationPolicyContractAssertionMapping):
            return True

        return self.to_dict() != other.to_dict()
