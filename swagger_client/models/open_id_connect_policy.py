# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OpenIdConnectPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'access_token_manager_ref': 'ResourceLink',
        'id_token_lifetime': 'int',
        'include_sri_in_id_token': 'bool',
        'include_user_info_in_id_token': 'bool',
        'include_s_hash_in_id_token': 'bool',
        'include_x5t_in_id_token': 'bool',
        'id_token_typ_header_value': 'str',
        'return_id_token_on_refresh_grant': 'bool',
        'reissue_id_token_in_hybrid_flow': 'bool',
        'attribute_contract': 'OpenIdConnectAttributeContract',
        'attribute_mapping': 'AttributeMapping',
        'scope_attribute_mappings': 'dict(str, ParameterValues)'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'access_token_manager_ref': 'accessTokenManagerRef',
        'id_token_lifetime': 'idTokenLifetime',
        'include_sri_in_id_token': 'includeSriInIdToken',
        'include_user_info_in_id_token': 'includeUserInfoInIdToken',
        'include_s_hash_in_id_token': 'includeSHashInIdToken',
        'include_x5t_in_id_token': 'includeX5tInIdToken',
        'id_token_typ_header_value': 'idTokenTypHeaderValue',
        'return_id_token_on_refresh_grant': 'returnIdTokenOnRefreshGrant',
        'reissue_id_token_in_hybrid_flow': 'reissueIdTokenInHybridFlow',
        'attribute_contract': 'attributeContract',
        'attribute_mapping': 'attributeMapping',
        'scope_attribute_mappings': 'scopeAttributeMappings'
    }

    def __init__(self, id=None, name=None, access_token_manager_ref=None, id_token_lifetime=None, include_sri_in_id_token=None, include_user_info_in_id_token=None, include_s_hash_in_id_token=None, include_x5t_in_id_token=None, id_token_typ_header_value=None, return_id_token_on_refresh_grant=None, reissue_id_token_in_hybrid_flow=None, attribute_contract=None, attribute_mapping=None, scope_attribute_mappings=None, _configuration=None):  # noqa: E501
        """OpenIdConnectPolicy - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._access_token_manager_ref = None
        self._id_token_lifetime = None
        self._include_sri_in_id_token = None
        self._include_user_info_in_id_token = None
        self._include_s_hash_in_id_token = None
        self._include_x5t_in_id_token = None
        self._id_token_typ_header_value = None
        self._return_id_token_on_refresh_grant = None
        self._reissue_id_token_in_hybrid_flow = None
        self._attribute_contract = None
        self._attribute_mapping = None
        self._scope_attribute_mappings = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.access_token_manager_ref = access_token_manager_ref
        if id_token_lifetime is not None:
            self.id_token_lifetime = id_token_lifetime
        if include_sri_in_id_token is not None:
            self.include_sri_in_id_token = include_sri_in_id_token
        if include_user_info_in_id_token is not None:
            self.include_user_info_in_id_token = include_user_info_in_id_token
        if include_s_hash_in_id_token is not None:
            self.include_s_hash_in_id_token = include_s_hash_in_id_token
        if include_x5t_in_id_token is not None:
            self.include_x5t_in_id_token = include_x5t_in_id_token
        if id_token_typ_header_value is not None:
            self.id_token_typ_header_value = id_token_typ_header_value
        if return_id_token_on_refresh_grant is not None:
            self.return_id_token_on_refresh_grant = return_id_token_on_refresh_grant
        if reissue_id_token_in_hybrid_flow is not None:
            self.reissue_id_token_in_hybrid_flow = reissue_id_token_in_hybrid_flow
        self.attribute_contract = attribute_contract
        self.attribute_mapping = attribute_mapping
        if scope_attribute_mappings is not None:
            self.scope_attribute_mappings = scope_attribute_mappings

    @property
    def id(self):
        """Gets the id of this OpenIdConnectPolicy.  # noqa: E501

        The policy ID used internally.  # noqa: E501

        :return: The id of this OpenIdConnectPolicy.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OpenIdConnectPolicy.

        The policy ID used internally.  # noqa: E501

        :param id: The id of this OpenIdConnectPolicy.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this OpenIdConnectPolicy.  # noqa: E501

        The name used for display in UI screens.  # noqa: E501

        :return: The name of this OpenIdConnectPolicy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OpenIdConnectPolicy.

        The name used for display in UI screens.  # noqa: E501

        :param name: The name of this OpenIdConnectPolicy.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def access_token_manager_ref(self):
        """Gets the access_token_manager_ref of this OpenIdConnectPolicy.  # noqa: E501

        The access token manager associated with this Open ID Connect policy.  # noqa: E501

        :return: The access_token_manager_ref of this OpenIdConnectPolicy.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._access_token_manager_ref

    @access_token_manager_ref.setter
    def access_token_manager_ref(self, access_token_manager_ref):
        """Sets the access_token_manager_ref of this OpenIdConnectPolicy.

        The access token manager associated with this Open ID Connect policy.  # noqa: E501

        :param access_token_manager_ref: The access_token_manager_ref of this OpenIdConnectPolicy.  # noqa: E501
        :type: ResourceLink
        """
        if self._configuration.client_side_validation and access_token_manager_ref is None:
            raise ValueError("Invalid value for `access_token_manager_ref`, must not be `None`")  # noqa: E501

        self._access_token_manager_ref = access_token_manager_ref

    @property
    def id_token_lifetime(self):
        """Gets the id_token_lifetime of this OpenIdConnectPolicy.  # noqa: E501

        The ID Token Lifetime, in minutes. The default value is 5.  # noqa: E501

        :return: The id_token_lifetime of this OpenIdConnectPolicy.  # noqa: E501
        :rtype: int
        """
        return self._id_token_lifetime

    @id_token_lifetime.setter
    def id_token_lifetime(self, id_token_lifetime):
        """Sets the id_token_lifetime of this OpenIdConnectPolicy.

        The ID Token Lifetime, in minutes. The default value is 5.  # noqa: E501

        :param id_token_lifetime: The id_token_lifetime of this OpenIdConnectPolicy.  # noqa: E501
        :type: int
        """

        self._id_token_lifetime = id_token_lifetime

    @property
    def include_sri_in_id_token(self):
        """Gets the include_sri_in_id_token of this OpenIdConnectPolicy.  # noqa: E501

        Determines whether a Session Reference Identifier is included in the ID token.  # noqa: E501

        :return: The include_sri_in_id_token of this OpenIdConnectPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._include_sri_in_id_token

    @include_sri_in_id_token.setter
    def include_sri_in_id_token(self, include_sri_in_id_token):
        """Sets the include_sri_in_id_token of this OpenIdConnectPolicy.

        Determines whether a Session Reference Identifier is included in the ID token.  # noqa: E501

        :param include_sri_in_id_token: The include_sri_in_id_token of this OpenIdConnectPolicy.  # noqa: E501
        :type: bool
        """

        self._include_sri_in_id_token = include_sri_in_id_token

    @property
    def include_user_info_in_id_token(self):
        """Gets the include_user_info_in_id_token of this OpenIdConnectPolicy.  # noqa: E501

        Determines whether the User Info is always included in the ID token.  # noqa: E501

        :return: The include_user_info_in_id_token of this OpenIdConnectPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._include_user_info_in_id_token

    @include_user_info_in_id_token.setter
    def include_user_info_in_id_token(self, include_user_info_in_id_token):
        """Sets the include_user_info_in_id_token of this OpenIdConnectPolicy.

        Determines whether the User Info is always included in the ID token.  # noqa: E501

        :param include_user_info_in_id_token: The include_user_info_in_id_token of this OpenIdConnectPolicy.  # noqa: E501
        :type: bool
        """

        self._include_user_info_in_id_token = include_user_info_in_id_token

    @property
    def include_s_hash_in_id_token(self):
        """Gets the include_s_hash_in_id_token of this OpenIdConnectPolicy.  # noqa: E501

        Determines whether the State Hash should be included in the ID token.  # noqa: E501

        :return: The include_s_hash_in_id_token of this OpenIdConnectPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._include_s_hash_in_id_token

    @include_s_hash_in_id_token.setter
    def include_s_hash_in_id_token(self, include_s_hash_in_id_token):
        """Sets the include_s_hash_in_id_token of this OpenIdConnectPolicy.

        Determines whether the State Hash should be included in the ID token.  # noqa: E501

        :param include_s_hash_in_id_token: The include_s_hash_in_id_token of this OpenIdConnectPolicy.  # noqa: E501
        :type: bool
        """

        self._include_s_hash_in_id_token = include_s_hash_in_id_token

    @property
    def include_x5t_in_id_token(self):
        """Gets the include_x5t_in_id_token of this OpenIdConnectPolicy.  # noqa: E501

        Determines whether the X.509 thumbprint header should be included in the ID Token.  # noqa: E501

        :return: The include_x5t_in_id_token of this OpenIdConnectPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._include_x5t_in_id_token

    @include_x5t_in_id_token.setter
    def include_x5t_in_id_token(self, include_x5t_in_id_token):
        """Sets the include_x5t_in_id_token of this OpenIdConnectPolicy.

        Determines whether the X.509 thumbprint header should be included in the ID Token.  # noqa: E501

        :param include_x5t_in_id_token: The include_x5t_in_id_token of this OpenIdConnectPolicy.  # noqa: E501
        :type: bool
        """

        self._include_x5t_in_id_token = include_x5t_in_id_token

    @property
    def id_token_typ_header_value(self):
        """Gets the id_token_typ_header_value of this OpenIdConnectPolicy.  # noqa: E501

        ID Token Type (typ) Header Value.  # noqa: E501

        :return: The id_token_typ_header_value of this OpenIdConnectPolicy.  # noqa: E501
        :rtype: str
        """
        return self._id_token_typ_header_value

    @id_token_typ_header_value.setter
    def id_token_typ_header_value(self, id_token_typ_header_value):
        """Sets the id_token_typ_header_value of this OpenIdConnectPolicy.

        ID Token Type (typ) Header Value.  # noqa: E501

        :param id_token_typ_header_value: The id_token_typ_header_value of this OpenIdConnectPolicy.  # noqa: E501
        :type: str
        """

        self._id_token_typ_header_value = id_token_typ_header_value

    @property
    def return_id_token_on_refresh_grant(self):
        """Gets the return_id_token_on_refresh_grant of this OpenIdConnectPolicy.  # noqa: E501

        Determines whether an ID Token should be returned when refresh grant is requested or not.  # noqa: E501

        :return: The return_id_token_on_refresh_grant of this OpenIdConnectPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._return_id_token_on_refresh_grant

    @return_id_token_on_refresh_grant.setter
    def return_id_token_on_refresh_grant(self, return_id_token_on_refresh_grant):
        """Sets the return_id_token_on_refresh_grant of this OpenIdConnectPolicy.

        Determines whether an ID Token should be returned when refresh grant is requested or not.  # noqa: E501

        :param return_id_token_on_refresh_grant: The return_id_token_on_refresh_grant of this OpenIdConnectPolicy.  # noqa: E501
        :type: bool
        """

        self._return_id_token_on_refresh_grant = return_id_token_on_refresh_grant

    @property
    def reissue_id_token_in_hybrid_flow(self):
        """Gets the reissue_id_token_in_hybrid_flow of this OpenIdConnectPolicy.  # noqa: E501

        Determines whether a new ID Token should be returned during token request of the hybrid flow.  # noqa: E501

        :return: The reissue_id_token_in_hybrid_flow of this OpenIdConnectPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._reissue_id_token_in_hybrid_flow

    @reissue_id_token_in_hybrid_flow.setter
    def reissue_id_token_in_hybrid_flow(self, reissue_id_token_in_hybrid_flow):
        """Sets the reissue_id_token_in_hybrid_flow of this OpenIdConnectPolicy.

        Determines whether a new ID Token should be returned during token request of the hybrid flow.  # noqa: E501

        :param reissue_id_token_in_hybrid_flow: The reissue_id_token_in_hybrid_flow of this OpenIdConnectPolicy.  # noqa: E501
        :type: bool
        """

        self._reissue_id_token_in_hybrid_flow = reissue_id_token_in_hybrid_flow

    @property
    def attribute_contract(self):
        """Gets the attribute_contract of this OpenIdConnectPolicy.  # noqa: E501

        The list of attributes that will be returned to OAuth clients in response to requests received at the PingFederate UserInfo endpoint.  # noqa: E501

        :return: The attribute_contract of this OpenIdConnectPolicy.  # noqa: E501
        :rtype: OpenIdConnectAttributeContract
        """
        return self._attribute_contract

    @attribute_contract.setter
    def attribute_contract(self, attribute_contract):
        """Sets the attribute_contract of this OpenIdConnectPolicy.

        The list of attributes that will be returned to OAuth clients in response to requests received at the PingFederate UserInfo endpoint.  # noqa: E501

        :param attribute_contract: The attribute_contract of this OpenIdConnectPolicy.  # noqa: E501
        :type: OpenIdConnectAttributeContract
        """
        if self._configuration.client_side_validation and attribute_contract is None:
            raise ValueError("Invalid value for `attribute_contract`, must not be `None`")  # noqa: E501

        self._attribute_contract = attribute_contract

    @property
    def attribute_mapping(self):
        """Gets the attribute_mapping of this OpenIdConnectPolicy.  # noqa: E501

        The attributes mapping from attribute sources to attribute targets.  # noqa: E501

        :return: The attribute_mapping of this OpenIdConnectPolicy.  # noqa: E501
        :rtype: AttributeMapping
        """
        return self._attribute_mapping

    @attribute_mapping.setter
    def attribute_mapping(self, attribute_mapping):
        """Sets the attribute_mapping of this OpenIdConnectPolicy.

        The attributes mapping from attribute sources to attribute targets.  # noqa: E501

        :param attribute_mapping: The attribute_mapping of this OpenIdConnectPolicy.  # noqa: E501
        :type: AttributeMapping
        """
        if self._configuration.client_side_validation and attribute_mapping is None:
            raise ValueError("Invalid value for `attribute_mapping`, must not be `None`")  # noqa: E501

        self._attribute_mapping = attribute_mapping

    @property
    def scope_attribute_mappings(self):
        """Gets the scope_attribute_mappings of this OpenIdConnectPolicy.  # noqa: E501

        The attribute scope mappings from scopes to attribute names.  # noqa: E501

        :return: The scope_attribute_mappings of this OpenIdConnectPolicy.  # noqa: E501
        :rtype: dict(str, ParameterValues)
        """
        return self._scope_attribute_mappings

    @scope_attribute_mappings.setter
    def scope_attribute_mappings(self, scope_attribute_mappings):
        """Sets the scope_attribute_mappings of this OpenIdConnectPolicy.

        The attribute scope mappings from scopes to attribute names.  # noqa: E501

        :param scope_attribute_mappings: The scope_attribute_mappings of this OpenIdConnectPolicy.  # noqa: E501
        :type: dict(str, ParameterValues)
        """

        self._scope_attribute_mappings = scope_attribute_mappings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenIdConnectPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenIdConnectPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OpenIdConnectPolicy):
            return True

        return self.to_dict() != other.to_dict()
