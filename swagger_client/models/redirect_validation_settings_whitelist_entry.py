# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RedirectValidationSettingsWhitelistEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_resource_sso': 'bool',
        'target_resource_slo': 'bool',
        'in_error_resource': 'bool',
        'idp_discovery': 'bool',
        'valid_domain': 'str',
        'valid_path': 'str',
        'allow_query_and_fragment': 'bool',
        'require_https': 'bool'
    }

    attribute_map = {
        'target_resource_sso': 'targetResourceSSO',
        'target_resource_slo': 'targetResourceSLO',
        'in_error_resource': 'inErrorResource',
        'idp_discovery': 'idpDiscovery',
        'valid_domain': 'validDomain',
        'valid_path': 'validPath',
        'allow_query_and_fragment': 'allowQueryAndFragment',
        'require_https': 'requireHttps'
    }

    def __init__(self, target_resource_sso=None, target_resource_slo=None, in_error_resource=None, idp_discovery=None, valid_domain=None, valid_path=None, allow_query_and_fragment=None, require_https=None, _configuration=None):  # noqa: E501
        """RedirectValidationSettingsWhitelistEntry - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._target_resource_sso = None
        self._target_resource_slo = None
        self._in_error_resource = None
        self._idp_discovery = None
        self._valid_domain = None
        self._valid_path = None
        self._allow_query_and_fragment = None
        self._require_https = None
        self.discriminator = None

        if target_resource_sso is not None:
            self.target_resource_sso = target_resource_sso
        if target_resource_slo is not None:
            self.target_resource_slo = target_resource_slo
        if in_error_resource is not None:
            self.in_error_resource = in_error_resource
        if idp_discovery is not None:
            self.idp_discovery = idp_discovery
        self.valid_domain = valid_domain
        if valid_path is not None:
            self.valid_path = valid_path
        if allow_query_and_fragment is not None:
            self.allow_query_and_fragment = allow_query_and_fragment
        if require_https is not None:
            self.require_https = require_https

    @property
    def target_resource_sso(self):
        """Gets the target_resource_sso of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501

        Enable this target resource for SSO redirect validation.  # noqa: E501

        :return: The target_resource_sso of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501
        :rtype: bool
        """
        return self._target_resource_sso

    @target_resource_sso.setter
    def target_resource_sso(self, target_resource_sso):
        """Sets the target_resource_sso of this RedirectValidationSettingsWhitelistEntry.

        Enable this target resource for SSO redirect validation.  # noqa: E501

        :param target_resource_sso: The target_resource_sso of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501
        :type: bool
        """

        self._target_resource_sso = target_resource_sso

    @property
    def target_resource_slo(self):
        """Gets the target_resource_slo of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501

        Enable this target resource for SLO redirect validation.  # noqa: E501

        :return: The target_resource_slo of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501
        :rtype: bool
        """
        return self._target_resource_slo

    @target_resource_slo.setter
    def target_resource_slo(self, target_resource_slo):
        """Sets the target_resource_slo of this RedirectValidationSettingsWhitelistEntry.

        Enable this target resource for SLO redirect validation.  # noqa: E501

        :param target_resource_slo: The target_resource_slo of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501
        :type: bool
        """

        self._target_resource_slo = target_resource_slo

    @property
    def in_error_resource(self):
        """Gets the in_error_resource of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501

        Enable this target resource for in error resource validation.  # noqa: E501

        :return: The in_error_resource of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501
        :rtype: bool
        """
        return self._in_error_resource

    @in_error_resource.setter
    def in_error_resource(self, in_error_resource):
        """Sets the in_error_resource of this RedirectValidationSettingsWhitelistEntry.

        Enable this target resource for in error resource validation.  # noqa: E501

        :param in_error_resource: The in_error_resource of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501
        :type: bool
        """

        self._in_error_resource = in_error_resource

    @property
    def idp_discovery(self):
        """Gets the idp_discovery of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501

        Enable this target resource for IdP discovery validation.  # noqa: E501

        :return: The idp_discovery of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501
        :rtype: bool
        """
        return self._idp_discovery

    @idp_discovery.setter
    def idp_discovery(self, idp_discovery):
        """Sets the idp_discovery of this RedirectValidationSettingsWhitelistEntry.

        Enable this target resource for IdP discovery validation.  # noqa: E501

        :param idp_discovery: The idp_discovery of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501
        :type: bool
        """

        self._idp_discovery = idp_discovery

    @property
    def valid_domain(self):
        """Gets the valid_domain of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501

        Domain of a valid resource.  # noqa: E501

        :return: The valid_domain of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501
        :rtype: str
        """
        return self._valid_domain

    @valid_domain.setter
    def valid_domain(self, valid_domain):
        """Sets the valid_domain of this RedirectValidationSettingsWhitelistEntry.

        Domain of a valid resource.  # noqa: E501

        :param valid_domain: The valid_domain of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and valid_domain is None:
            raise ValueError("Invalid value for `valid_domain`, must not be `None`")  # noqa: E501

        self._valid_domain = valid_domain

    @property
    def valid_path(self):
        """Gets the valid_path of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501

        Path of a valid resource.  # noqa: E501

        :return: The valid_path of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501
        :rtype: str
        """
        return self._valid_path

    @valid_path.setter
    def valid_path(self, valid_path):
        """Sets the valid_path of this RedirectValidationSettingsWhitelistEntry.

        Path of a valid resource.  # noqa: E501

        :param valid_path: The valid_path of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501
        :type: str
        """

        self._valid_path = valid_path

    @property
    def allow_query_and_fragment(self):
        """Gets the allow_query_and_fragment of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501

        Allow any query parameters and fragment in the resource.  # noqa: E501

        :return: The allow_query_and_fragment of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501
        :rtype: bool
        """
        return self._allow_query_and_fragment

    @allow_query_and_fragment.setter
    def allow_query_and_fragment(self, allow_query_and_fragment):
        """Sets the allow_query_and_fragment of this RedirectValidationSettingsWhitelistEntry.

        Allow any query parameters and fragment in the resource.  # noqa: E501

        :param allow_query_and_fragment: The allow_query_and_fragment of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501
        :type: bool
        """

        self._allow_query_and_fragment = allow_query_and_fragment

    @property
    def require_https(self):
        """Gets the require_https of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501

        Require HTTPS for accessing this resource.  # noqa: E501

        :return: The require_https of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501
        :rtype: bool
        """
        return self._require_https

    @require_https.setter
    def require_https(self, require_https):
        """Sets the require_https of this RedirectValidationSettingsWhitelistEntry.

        Require HTTPS for accessing this resource.  # noqa: E501

        :param require_https: The require_https of this RedirectValidationSettingsWhitelistEntry.  # noqa: E501
        :type: bool
        """

        self._require_https = require_https

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RedirectValidationSettingsWhitelistEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RedirectValidationSettingsWhitelistEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RedirectValidationSettingsWhitelistEntry):
            return True

        return self.to_dict() != other.to_dict()
