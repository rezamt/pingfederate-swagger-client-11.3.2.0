# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IdpDefaultUrl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'confirm_idp_slo': 'bool',
        'idp_slo_success_url': 'str',
        'idp_error_msg': 'str'
    }

    attribute_map = {
        'confirm_idp_slo': 'confirmIdpSlo',
        'idp_slo_success_url': 'idpSloSuccessUrl',
        'idp_error_msg': 'idpErrorMsg'
    }

    def __init__(self, confirm_idp_slo=None, idp_slo_success_url=None, idp_error_msg=None, _configuration=None):  # noqa: E501
        """IdpDefaultUrl - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._confirm_idp_slo = None
        self._idp_slo_success_url = None
        self._idp_error_msg = None
        self.discriminator = None

        if confirm_idp_slo is not None:
            self.confirm_idp_slo = confirm_idp_slo
        if idp_slo_success_url is not None:
            self.idp_slo_success_url = idp_slo_success_url
        self.idp_error_msg = idp_error_msg

    @property
    def confirm_idp_slo(self):
        """Gets the confirm_idp_slo of this IdpDefaultUrl.  # noqa: E501

        Prompt user to confirm Single Logout (SLO).  # noqa: E501

        :return: The confirm_idp_slo of this IdpDefaultUrl.  # noqa: E501
        :rtype: bool
        """
        return self._confirm_idp_slo

    @confirm_idp_slo.setter
    def confirm_idp_slo(self, confirm_idp_slo):
        """Sets the confirm_idp_slo of this IdpDefaultUrl.

        Prompt user to confirm Single Logout (SLO).  # noqa: E501

        :param confirm_idp_slo: The confirm_idp_slo of this IdpDefaultUrl.  # noqa: E501
        :type: bool
        """

        self._confirm_idp_slo = confirm_idp_slo

    @property
    def idp_slo_success_url(self):
        """Gets the idp_slo_success_url of this IdpDefaultUrl.  # noqa: E501

        Provide the default URL you would like to send the user to when Single Logout has succeeded.  # noqa: E501

        :return: The idp_slo_success_url of this IdpDefaultUrl.  # noqa: E501
        :rtype: str
        """
        return self._idp_slo_success_url

    @idp_slo_success_url.setter
    def idp_slo_success_url(self, idp_slo_success_url):
        """Sets the idp_slo_success_url of this IdpDefaultUrl.

        Provide the default URL you would like to send the user to when Single Logout has succeeded.  # noqa: E501

        :param idp_slo_success_url: The idp_slo_success_url of this IdpDefaultUrl.  # noqa: E501
        :type: str
        """

        self._idp_slo_success_url = idp_slo_success_url

    @property
    def idp_error_msg(self):
        """Gets the idp_error_msg of this IdpDefaultUrl.  # noqa: E501

        Provide the error text displayed in a user's browser when an SSO operation fails.  # noqa: E501

        :return: The idp_error_msg of this IdpDefaultUrl.  # noqa: E501
        :rtype: str
        """
        return self._idp_error_msg

    @idp_error_msg.setter
    def idp_error_msg(self, idp_error_msg):
        """Sets the idp_error_msg of this IdpDefaultUrl.

        Provide the error text displayed in a user's browser when an SSO operation fails.  # noqa: E501

        :param idp_error_msg: The idp_error_msg of this IdpDefaultUrl.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and idp_error_msg is None:
            raise ValueError("Invalid value for `idp_error_msg`, must not be `None`")  # noqa: E501

        self._idp_error_msg = idp_error_msg

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdpDefaultUrl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdpDefaultUrl):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IdpDefaultUrl):
            return True

        return self.to_dict() != other.to_dict()
