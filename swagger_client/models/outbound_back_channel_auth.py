# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OutboundBackChannelAuth(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ssl_auth_key_pair_ref': 'ResourceLink',
        'validate_partner_cert': 'bool'
    }

    attribute_map = {
        'ssl_auth_key_pair_ref': 'sslAuthKeyPairRef',
        'validate_partner_cert': 'validatePartnerCert'
    }

    def __init__(self, ssl_auth_key_pair_ref=None, validate_partner_cert=None, _configuration=None):  # noqa: E501
        """OutboundBackChannelAuth - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ssl_auth_key_pair_ref = None
        self._validate_partner_cert = None
        self.discriminator = None

        if ssl_auth_key_pair_ref is not None:
            self.ssl_auth_key_pair_ref = ssl_auth_key_pair_ref
        if validate_partner_cert is not None:
            self.validate_partner_cert = validate_partner_cert

    @property
    def ssl_auth_key_pair_ref(self):
        """Gets the ssl_auth_key_pair_ref of this OutboundBackChannelAuth.  # noqa: E501

        The ID of the key pair used to authenticate with your partner's SOAP endpoint. The ID of the key pair is also known as the alias and can be found by viewing the corresponding certificate under 'SSL Server Certificates' in the PingFederate Administrative Console.  # noqa: E501

        :return: The ssl_auth_key_pair_ref of this OutboundBackChannelAuth.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._ssl_auth_key_pair_ref

    @ssl_auth_key_pair_ref.setter
    def ssl_auth_key_pair_ref(self, ssl_auth_key_pair_ref):
        """Sets the ssl_auth_key_pair_ref of this OutboundBackChannelAuth.

        The ID of the key pair used to authenticate with your partner's SOAP endpoint. The ID of the key pair is also known as the alias and can be found by viewing the corresponding certificate under 'SSL Server Certificates' in the PingFederate Administrative Console.  # noqa: E501

        :param ssl_auth_key_pair_ref: The ssl_auth_key_pair_ref of this OutboundBackChannelAuth.  # noqa: E501
        :type: ResourceLink
        """

        self._ssl_auth_key_pair_ref = ssl_auth_key_pair_ref

    @property
    def validate_partner_cert(self):
        """Gets the validate_partner_cert of this OutboundBackChannelAuth.  # noqa: E501

        Validate the partner server certificate. Default is true.  # noqa: E501

        :return: The validate_partner_cert of this OutboundBackChannelAuth.  # noqa: E501
        :rtype: bool
        """
        return self._validate_partner_cert

    @validate_partner_cert.setter
    def validate_partner_cert(self, validate_partner_cert):
        """Sets the validate_partner_cert of this OutboundBackChannelAuth.

        Validate the partner server certificate. Default is true.  # noqa: E501

        :param validate_partner_cert: The validate_partner_cert of this OutboundBackChannelAuth.  # noqa: E501
        :type: bool
        """

        self._validate_partner_cert = validate_partner_cert

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OutboundBackChannelAuth, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OutboundBackChannelAuth):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OutboundBackChannelAuth):
            return True

        return self.to_dict() != other.to_dict()
