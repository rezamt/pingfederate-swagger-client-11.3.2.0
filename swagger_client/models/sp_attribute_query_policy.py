# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SpAttributeQueryPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sign_response': 'bool',
        'sign_assertion': 'bool',
        'encrypt_assertion': 'bool',
        'require_signed_attribute_query': 'bool',
        'require_encrypted_name_id': 'bool'
    }

    attribute_map = {
        'sign_response': 'signResponse',
        'sign_assertion': 'signAssertion',
        'encrypt_assertion': 'encryptAssertion',
        'require_signed_attribute_query': 'requireSignedAttributeQuery',
        'require_encrypted_name_id': 'requireEncryptedNameId'
    }

    def __init__(self, sign_response=None, sign_assertion=None, encrypt_assertion=None, require_signed_attribute_query=None, require_encrypted_name_id=None, _configuration=None):  # noqa: E501
        """SpAttributeQueryPolicy - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sign_response = None
        self._sign_assertion = None
        self._encrypt_assertion = None
        self._require_signed_attribute_query = None
        self._require_encrypted_name_id = None
        self.discriminator = None

        if sign_response is not None:
            self.sign_response = sign_response
        if sign_assertion is not None:
            self.sign_assertion = sign_assertion
        if encrypt_assertion is not None:
            self.encrypt_assertion = encrypt_assertion
        if require_signed_attribute_query is not None:
            self.require_signed_attribute_query = require_signed_attribute_query
        if require_encrypted_name_id is not None:
            self.require_encrypted_name_id = require_encrypted_name_id

    @property
    def sign_response(self):
        """Gets the sign_response of this SpAttributeQueryPolicy.  # noqa: E501

        Sign the response.  # noqa: E501

        :return: The sign_response of this SpAttributeQueryPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._sign_response

    @sign_response.setter
    def sign_response(self, sign_response):
        """Sets the sign_response of this SpAttributeQueryPolicy.

        Sign the response.  # noqa: E501

        :param sign_response: The sign_response of this SpAttributeQueryPolicy.  # noqa: E501
        :type: bool
        """

        self._sign_response = sign_response

    @property
    def sign_assertion(self):
        """Gets the sign_assertion of this SpAttributeQueryPolicy.  # noqa: E501

        Sign the assertion.  # noqa: E501

        :return: The sign_assertion of this SpAttributeQueryPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._sign_assertion

    @sign_assertion.setter
    def sign_assertion(self, sign_assertion):
        """Sets the sign_assertion of this SpAttributeQueryPolicy.

        Sign the assertion.  # noqa: E501

        :param sign_assertion: The sign_assertion of this SpAttributeQueryPolicy.  # noqa: E501
        :type: bool
        """

        self._sign_assertion = sign_assertion

    @property
    def encrypt_assertion(self):
        """Gets the encrypt_assertion of this SpAttributeQueryPolicy.  # noqa: E501

        Encrypt the assertion.  # noqa: E501

        :return: The encrypt_assertion of this SpAttributeQueryPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._encrypt_assertion

    @encrypt_assertion.setter
    def encrypt_assertion(self, encrypt_assertion):
        """Sets the encrypt_assertion of this SpAttributeQueryPolicy.

        Encrypt the assertion.  # noqa: E501

        :param encrypt_assertion: The encrypt_assertion of this SpAttributeQueryPolicy.  # noqa: E501
        :type: bool
        """

        self._encrypt_assertion = encrypt_assertion

    @property
    def require_signed_attribute_query(self):
        """Gets the require_signed_attribute_query of this SpAttributeQueryPolicy.  # noqa: E501

        Require signed attribute query.  # noqa: E501

        :return: The require_signed_attribute_query of this SpAttributeQueryPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._require_signed_attribute_query

    @require_signed_attribute_query.setter
    def require_signed_attribute_query(self, require_signed_attribute_query):
        """Sets the require_signed_attribute_query of this SpAttributeQueryPolicy.

        Require signed attribute query.  # noqa: E501

        :param require_signed_attribute_query: The require_signed_attribute_query of this SpAttributeQueryPolicy.  # noqa: E501
        :type: bool
        """

        self._require_signed_attribute_query = require_signed_attribute_query

    @property
    def require_encrypted_name_id(self):
        """Gets the require_encrypted_name_id of this SpAttributeQueryPolicy.  # noqa: E501

        Require an encrypted name identifier.  # noqa: E501

        :return: The require_encrypted_name_id of this SpAttributeQueryPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._require_encrypted_name_id

    @require_encrypted_name_id.setter
    def require_encrypted_name_id(self, require_encrypted_name_id):
        """Sets the require_encrypted_name_id of this SpAttributeQueryPolicy.

        Require an encrypted name identifier.  # noqa: E501

        :param require_encrypted_name_id: The require_encrypted_name_id of this SpAttributeQueryPolicy.  # noqa: E501
        :type: bool
        """

        self._require_encrypted_name_id = require_encrypted_name_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpAttributeQueryPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpAttributeQueryPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpAttributeQueryPolicy):
            return True

        return self.to_dict() != other.to_dict()
