# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ConditionalIssuanceCriteriaEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source': 'SourceTypeIdKey',
        'attribute_name': 'str',
        'condition': 'str',
        'value': 'str',
        'error_result': 'str'
    }

    attribute_map = {
        'source': 'source',
        'attribute_name': 'attributeName',
        'condition': 'condition',
        'value': 'value',
        'error_result': 'errorResult'
    }

    def __init__(self, source=None, attribute_name=None, condition=None, value=None, error_result=None, _configuration=None):  # noqa: E501
        """ConditionalIssuanceCriteriaEntry - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._source = None
        self._attribute_name = None
        self._condition = None
        self._value = None
        self._error_result = None
        self.discriminator = None

        self.source = source
        self.attribute_name = attribute_name
        self.condition = condition
        self.value = value
        if error_result is not None:
            self.error_result = error_result

    @property
    def source(self):
        """Gets the source of this ConditionalIssuanceCriteriaEntry.  # noqa: E501

        The source of the attribute.  # noqa: E501

        :return: The source of this ConditionalIssuanceCriteriaEntry.  # noqa: E501
        :rtype: SourceTypeIdKey
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ConditionalIssuanceCriteriaEntry.

        The source of the attribute.  # noqa: E501

        :param source: The source of this ConditionalIssuanceCriteriaEntry.  # noqa: E501
        :type: SourceTypeIdKey
        """
        if self._configuration.client_side_validation and source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def attribute_name(self):
        """Gets the attribute_name of this ConditionalIssuanceCriteriaEntry.  # noqa: E501

        The name of the attribute to use in this issuance criterion.  # noqa: E501

        :return: The attribute_name of this ConditionalIssuanceCriteriaEntry.  # noqa: E501
        :rtype: str
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name):
        """Sets the attribute_name of this ConditionalIssuanceCriteriaEntry.

        The name of the attribute to use in this issuance criterion.  # noqa: E501

        :param attribute_name: The attribute_name of this ConditionalIssuanceCriteriaEntry.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and attribute_name is None:
            raise ValueError("Invalid value for `attribute_name`, must not be `None`")  # noqa: E501

        self._attribute_name = attribute_name

    @property
    def condition(self):
        """Gets the condition of this ConditionalIssuanceCriteriaEntry.  # noqa: E501

        The condition that will be applied to the source attribute's value and the expected value.  # noqa: E501

        :return: The condition of this ConditionalIssuanceCriteriaEntry.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ConditionalIssuanceCriteriaEntry.

        The condition that will be applied to the source attribute's value and the expected value.  # noqa: E501

        :param condition: The condition of this ConditionalIssuanceCriteriaEntry.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and condition is None:
            raise ValueError("Invalid value for `condition`, must not be `None`")  # noqa: E501
        allowed_values = ["EQUALS", "EQUALS_CASE_INSENSITIVE", "EQUALS_DN", "NOT_EQUAL", "NOT_EQUAL_CASE_INSENSITIVE", "NOT_EQUAL_DN", "MULTIVALUE_CONTAINS", "MULTIVALUE_CONTAINS_CASE_INSENSITIVE", "MULTIVALUE_CONTAINS_DN", "MULTIVALUE_DOES_NOT_CONTAIN", "MULTIVALUE_DOES_NOT_CONTAIN_CASE_INSENSITIVE", "MULTIVALUE_DOES_NOT_CONTAIN_DN"]  # noqa: E501
        if (self._configuration.client_side_validation and
                condition not in allowed_values):
            raise ValueError(
                "Invalid value for `condition` ({0}), must be one of {1}"  # noqa: E501
                .format(condition, allowed_values)
            )

        self._condition = condition

    @property
    def value(self):
        """Gets the value of this ConditionalIssuanceCriteriaEntry.  # noqa: E501

        The expected value of this issuance criterion.  # noqa: E501

        :return: The value of this ConditionalIssuanceCriteriaEntry.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ConditionalIssuanceCriteriaEntry.

        The expected value of this issuance criterion.  # noqa: E501

        :param value: The value of this ConditionalIssuanceCriteriaEntry.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def error_result(self):
        """Gets the error_result of this ConditionalIssuanceCriteriaEntry.  # noqa: E501

        The error result to return if this issuance criterion fails. This error result will show up in the PingFederate server logs.  # noqa: E501

        :return: The error_result of this ConditionalIssuanceCriteriaEntry.  # noqa: E501
        :rtype: str
        """
        return self._error_result

    @error_result.setter
    def error_result(self, error_result):
        """Sets the error_result of this ConditionalIssuanceCriteriaEntry.

        The error result to return if this issuance criterion fails. This error result will show up in the PingFederate server logs.  # noqa: E501

        :param error_result: The error_result of this ConditionalIssuanceCriteriaEntry.  # noqa: E501
        :type: str
        """

        self._error_result = error_result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConditionalIssuanceCriteriaEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConditionalIssuanceCriteriaEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConditionalIssuanceCriteriaEntry):
            return True

        return self.to_dict() != other.to_dict()
