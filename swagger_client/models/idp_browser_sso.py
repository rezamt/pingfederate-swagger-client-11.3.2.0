# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IdpBrowserSso(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'protocol': 'str',
        'oidc_provider_settings': 'OIDCProviderSettings',
        'enabled_profiles': 'list[str]',
        'incoming_bindings': 'list[str]',
        'message_customizations': 'list[ProtocolMessageCustomization]',
        'url_whitelist_entries': 'list[UrlWhitelistEntry]',
        'artifact': 'ArtifactSettings',
        'slo_service_endpoints': 'list[SloServiceEndpoint]',
        'always_sign_artifact_response': 'bool',
        'sso_application_endpoint': 'str',
        'sso_service_endpoints': 'list[IdpSsoServiceEndpoint]',
        'default_target_url': 'str',
        'authn_context_mappings': 'list[AuthnContextMapping]',
        'assertions_signed': 'bool',
        'sign_authn_requests': 'bool',
        'decryption_policy': 'DecryptionPolicy',
        'idp_identity_mapping': 'str',
        'attribute_contract': 'IdpBrowserSsoAttributeContract',
        'adapter_mappings': 'list[SpAdapterMapping]',
        'authentication_policy_contract_mappings': 'list[AuthenticationPolicyContractMapping]',
        'sso_o_auth_mapping': 'SsoOAuthMapping',
        'oauth_authentication_policy_contract_ref': 'ResourceLink',
        'jit_provisioning': 'JitProvisioning'
    }

    attribute_map = {
        'protocol': 'protocol',
        'oidc_provider_settings': 'oidcProviderSettings',
        'enabled_profiles': 'enabledProfiles',
        'incoming_bindings': 'incomingBindings',
        'message_customizations': 'messageCustomizations',
        'url_whitelist_entries': 'urlWhitelistEntries',
        'artifact': 'artifact',
        'slo_service_endpoints': 'sloServiceEndpoints',
        'always_sign_artifact_response': 'alwaysSignArtifactResponse',
        'sso_application_endpoint': 'ssoApplicationEndpoint',
        'sso_service_endpoints': 'ssoServiceEndpoints',
        'default_target_url': 'defaultTargetUrl',
        'authn_context_mappings': 'authnContextMappings',
        'assertions_signed': 'assertionsSigned',
        'sign_authn_requests': 'signAuthnRequests',
        'decryption_policy': 'decryptionPolicy',
        'idp_identity_mapping': 'idpIdentityMapping',
        'attribute_contract': 'attributeContract',
        'adapter_mappings': 'adapterMappings',
        'authentication_policy_contract_mappings': 'authenticationPolicyContractMappings',
        'sso_o_auth_mapping': 'ssoOAuthMapping',
        'oauth_authentication_policy_contract_ref': 'oauthAuthenticationPolicyContractRef',
        'jit_provisioning': 'jitProvisioning'
    }

    def __init__(self, protocol=None, oidc_provider_settings=None, enabled_profiles=None, incoming_bindings=None, message_customizations=None, url_whitelist_entries=None, artifact=None, slo_service_endpoints=None, always_sign_artifact_response=None, sso_application_endpoint=None, sso_service_endpoints=None, default_target_url=None, authn_context_mappings=None, assertions_signed=None, sign_authn_requests=None, decryption_policy=None, idp_identity_mapping=None, attribute_contract=None, adapter_mappings=None, authentication_policy_contract_mappings=None, sso_o_auth_mapping=None, oauth_authentication_policy_contract_ref=None, jit_provisioning=None, _configuration=None):  # noqa: E501
        """IdpBrowserSso - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._protocol = None
        self._oidc_provider_settings = None
        self._enabled_profiles = None
        self._incoming_bindings = None
        self._message_customizations = None
        self._url_whitelist_entries = None
        self._artifact = None
        self._slo_service_endpoints = None
        self._always_sign_artifact_response = None
        self._sso_application_endpoint = None
        self._sso_service_endpoints = None
        self._default_target_url = None
        self._authn_context_mappings = None
        self._assertions_signed = None
        self._sign_authn_requests = None
        self._decryption_policy = None
        self._idp_identity_mapping = None
        self._attribute_contract = None
        self._adapter_mappings = None
        self._authentication_policy_contract_mappings = None
        self._sso_o_auth_mapping = None
        self._oauth_authentication_policy_contract_ref = None
        self._jit_provisioning = None
        self.discriminator = None

        self.protocol = protocol
        if oidc_provider_settings is not None:
            self.oidc_provider_settings = oidc_provider_settings
        if enabled_profiles is not None:
            self.enabled_profiles = enabled_profiles
        if incoming_bindings is not None:
            self.incoming_bindings = incoming_bindings
        if message_customizations is not None:
            self.message_customizations = message_customizations
        if url_whitelist_entries is not None:
            self.url_whitelist_entries = url_whitelist_entries
        if artifact is not None:
            self.artifact = artifact
        if slo_service_endpoints is not None:
            self.slo_service_endpoints = slo_service_endpoints
        if always_sign_artifact_response is not None:
            self.always_sign_artifact_response = always_sign_artifact_response
        if sso_application_endpoint is not None:
            self.sso_application_endpoint = sso_application_endpoint
        if sso_service_endpoints is not None:
            self.sso_service_endpoints = sso_service_endpoints
        if default_target_url is not None:
            self.default_target_url = default_target_url
        if authn_context_mappings is not None:
            self.authn_context_mappings = authn_context_mappings
        if assertions_signed is not None:
            self.assertions_signed = assertions_signed
        if sign_authn_requests is not None:
            self.sign_authn_requests = sign_authn_requests
        if decryption_policy is not None:
            self.decryption_policy = decryption_policy
        self.idp_identity_mapping = idp_identity_mapping
        if attribute_contract is not None:
            self.attribute_contract = attribute_contract
        if adapter_mappings is not None:
            self.adapter_mappings = adapter_mappings
        if authentication_policy_contract_mappings is not None:
            self.authentication_policy_contract_mappings = authentication_policy_contract_mappings
        if sso_o_auth_mapping is not None:
            self.sso_o_auth_mapping = sso_o_auth_mapping
        if oauth_authentication_policy_contract_ref is not None:
            self.oauth_authentication_policy_contract_ref = oauth_authentication_policy_contract_ref
        if jit_provisioning is not None:
            self.jit_provisioning = jit_provisioning

    @property
    def protocol(self):
        """Gets the protocol of this IdpBrowserSso.  # noqa: E501

        The browser-based SSO protocol to use.  # noqa: E501

        :return: The protocol of this IdpBrowserSso.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this IdpBrowserSso.

        The browser-based SSO protocol to use.  # noqa: E501

        :param protocol: The protocol of this IdpBrowserSso.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501
        allowed_values = ["SAML20", "WSFED", "SAML11", "SAML10", "OIDC"]  # noqa: E501
        if (self._configuration.client_side_validation and
                protocol not in allowed_values):
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def oidc_provider_settings(self):
        """Gets the oidc_provider_settings of this IdpBrowserSso.  # noqa: E501

        The OpenID Provider configuration settings. Required for an OIDC connection.  # noqa: E501

        :return: The oidc_provider_settings of this IdpBrowserSso.  # noqa: E501
        :rtype: OIDCProviderSettings
        """
        return self._oidc_provider_settings

    @oidc_provider_settings.setter
    def oidc_provider_settings(self, oidc_provider_settings):
        """Sets the oidc_provider_settings of this IdpBrowserSso.

        The OpenID Provider configuration settings. Required for an OIDC connection.  # noqa: E501

        :param oidc_provider_settings: The oidc_provider_settings of this IdpBrowserSso.  # noqa: E501
        :type: OIDCProviderSettings
        """

        self._oidc_provider_settings = oidc_provider_settings

    @property
    def enabled_profiles(self):
        """Gets the enabled_profiles of this IdpBrowserSso.  # noqa: E501

        The profiles that are enabled for browser-based SSO. SAML 2.0 supports all profiles whereas SAML 1.x IdP connections support both IdP and SP (non-standard) initiated SSO. This is required for SAMLx.x Connections.   # noqa: E501

        :return: The enabled_profiles of this IdpBrowserSso.  # noqa: E501
        :rtype: list[str]
        """
        return self._enabled_profiles

    @enabled_profiles.setter
    def enabled_profiles(self, enabled_profiles):
        """Sets the enabled_profiles of this IdpBrowserSso.

        The profiles that are enabled for browser-based SSO. SAML 2.0 supports all profiles whereas SAML 1.x IdP connections support both IdP and SP (non-standard) initiated SSO. This is required for SAMLx.x Connections.   # noqa: E501

        :param enabled_profiles: The enabled_profiles of this IdpBrowserSso.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["IDP_INITIATED_SSO", "SP_INITIATED_SSO", "IDP_INITIATED_SLO", "SP_INITIATED_SLO"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(enabled_profiles).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `enabled_profiles` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(enabled_profiles) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._enabled_profiles = enabled_profiles

    @property
    def incoming_bindings(self):
        """Gets the incoming_bindings of this IdpBrowserSso.  # noqa: E501

        The SAML bindings that are enabled for browser-based SSO. This is required for SAML 2.0 connections when the enabled profiles contain the SP-initiated SSO profile or either SLO profile. For SAML 1.x based connections, it is not used for SP Connections and it is optional for IdP Connections.  # noqa: E501

        :return: The incoming_bindings of this IdpBrowserSso.  # noqa: E501
        :rtype: list[str]
        """
        return self._incoming_bindings

    @incoming_bindings.setter
    def incoming_bindings(self, incoming_bindings):
        """Sets the incoming_bindings of this IdpBrowserSso.

        The SAML bindings that are enabled for browser-based SSO. This is required for SAML 2.0 connections when the enabled profiles contain the SP-initiated SSO profile or either SLO profile. For SAML 1.x based connections, it is not used for SP Connections and it is optional for IdP Connections.  # noqa: E501

        :param incoming_bindings: The incoming_bindings of this IdpBrowserSso.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ARTIFACT", "POST", "REDIRECT", "SOAP"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(incoming_bindings).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `incoming_bindings` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(incoming_bindings) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._incoming_bindings = incoming_bindings

    @property
    def message_customizations(self):
        """Gets the message_customizations of this IdpBrowserSso.  # noqa: E501

        The message customizations for browser-based SSO. Depending on server settings, connection type, and protocol this may or may not be supported.  # noqa: E501

        :return: The message_customizations of this IdpBrowserSso.  # noqa: E501
        :rtype: list[ProtocolMessageCustomization]
        """
        return self._message_customizations

    @message_customizations.setter
    def message_customizations(self, message_customizations):
        """Sets the message_customizations of this IdpBrowserSso.

        The message customizations for browser-based SSO. Depending on server settings, connection type, and protocol this may or may not be supported.  # noqa: E501

        :param message_customizations: The message_customizations of this IdpBrowserSso.  # noqa: E501
        :type: list[ProtocolMessageCustomization]
        """

        self._message_customizations = message_customizations

    @property
    def url_whitelist_entries(self):
        """Gets the url_whitelist_entries of this IdpBrowserSso.  # noqa: E501

        For WS-Federation connections, a whitelist of additional allowed domains and paths used to validate wreply for SLO, if enabled.  # noqa: E501

        :return: The url_whitelist_entries of this IdpBrowserSso.  # noqa: E501
        :rtype: list[UrlWhitelistEntry]
        """
        return self._url_whitelist_entries

    @url_whitelist_entries.setter
    def url_whitelist_entries(self, url_whitelist_entries):
        """Sets the url_whitelist_entries of this IdpBrowserSso.

        For WS-Federation connections, a whitelist of additional allowed domains and paths used to validate wreply for SLO, if enabled.  # noqa: E501

        :param url_whitelist_entries: The url_whitelist_entries of this IdpBrowserSso.  # noqa: E501
        :type: list[UrlWhitelistEntry]
        """

        self._url_whitelist_entries = url_whitelist_entries

    @property
    def artifact(self):
        """Gets the artifact of this IdpBrowserSso.  # noqa: E501

        The settings for an artifact binding.  # noqa: E501

        :return: The artifact of this IdpBrowserSso.  # noqa: E501
        :rtype: ArtifactSettings
        """
        return self._artifact

    @artifact.setter
    def artifact(self, artifact):
        """Sets the artifact of this IdpBrowserSso.

        The settings for an artifact binding.  # noqa: E501

        :param artifact: The artifact of this IdpBrowserSso.  # noqa: E501
        :type: ArtifactSettings
        """

        self._artifact = artifact

    @property
    def slo_service_endpoints(self):
        """Gets the slo_service_endpoints of this IdpBrowserSso.  # noqa: E501

        A list of possible endpoints to send SLO requests and responses.  # noqa: E501

        :return: The slo_service_endpoints of this IdpBrowserSso.  # noqa: E501
        :rtype: list[SloServiceEndpoint]
        """
        return self._slo_service_endpoints

    @slo_service_endpoints.setter
    def slo_service_endpoints(self, slo_service_endpoints):
        """Sets the slo_service_endpoints of this IdpBrowserSso.

        A list of possible endpoints to send SLO requests and responses.  # noqa: E501

        :param slo_service_endpoints: The slo_service_endpoints of this IdpBrowserSso.  # noqa: E501
        :type: list[SloServiceEndpoint]
        """

        self._slo_service_endpoints = slo_service_endpoints

    @property
    def always_sign_artifact_response(self):
        """Gets the always_sign_artifact_response of this IdpBrowserSso.  # noqa: E501

        Specify to always sign the SAML ArtifactResponse.  # noqa: E501

        :return: The always_sign_artifact_response of this IdpBrowserSso.  # noqa: E501
        :rtype: bool
        """
        return self._always_sign_artifact_response

    @always_sign_artifact_response.setter
    def always_sign_artifact_response(self, always_sign_artifact_response):
        """Sets the always_sign_artifact_response of this IdpBrowserSso.

        Specify to always sign the SAML ArtifactResponse.  # noqa: E501

        :param always_sign_artifact_response: The always_sign_artifact_response of this IdpBrowserSso.  # noqa: E501
        :type: bool
        """

        self._always_sign_artifact_response = always_sign_artifact_response

    @property
    def sso_application_endpoint(self):
        """Gets the sso_application_endpoint of this IdpBrowserSso.  # noqa: E501

        Application endpoint that can be used to invoke single sign-on (SSO) for the connection. This is a read-only parameter.  # noqa: E501

        :return: The sso_application_endpoint of this IdpBrowserSso.  # noqa: E501
        :rtype: str
        """
        return self._sso_application_endpoint

    @sso_application_endpoint.setter
    def sso_application_endpoint(self, sso_application_endpoint):
        """Sets the sso_application_endpoint of this IdpBrowserSso.

        Application endpoint that can be used to invoke single sign-on (SSO) for the connection. This is a read-only parameter.  # noqa: E501

        :param sso_application_endpoint: The sso_application_endpoint of this IdpBrowserSso.  # noqa: E501
        :type: str
        """

        self._sso_application_endpoint = sso_application_endpoint

    @property
    def sso_service_endpoints(self):
        """Gets the sso_service_endpoints of this IdpBrowserSso.  # noqa: E501

        The IdP SSO endpoints that define where to send your authentication requests. Only required for SP initiated SSO. This is required for SAML x.x and WS-FED Connections.  # noqa: E501

        :return: The sso_service_endpoints of this IdpBrowserSso.  # noqa: E501
        :rtype: list[IdpSsoServiceEndpoint]
        """
        return self._sso_service_endpoints

    @sso_service_endpoints.setter
    def sso_service_endpoints(self, sso_service_endpoints):
        """Sets the sso_service_endpoints of this IdpBrowserSso.

        The IdP SSO endpoints that define where to send your authentication requests. Only required for SP initiated SSO. This is required for SAML x.x and WS-FED Connections.  # noqa: E501

        :param sso_service_endpoints: The sso_service_endpoints of this IdpBrowserSso.  # noqa: E501
        :type: list[IdpSsoServiceEndpoint]
        """

        self._sso_service_endpoints = sso_service_endpoints

    @property
    def default_target_url(self):
        """Gets the default_target_url of this IdpBrowserSso.  # noqa: E501

        The default target URL for this connection. If defined, this overrides the default URL.  # noqa: E501

        :return: The default_target_url of this IdpBrowserSso.  # noqa: E501
        :rtype: str
        """
        return self._default_target_url

    @default_target_url.setter
    def default_target_url(self, default_target_url):
        """Sets the default_target_url of this IdpBrowserSso.

        The default target URL for this connection. If defined, this overrides the default URL.  # noqa: E501

        :param default_target_url: The default_target_url of this IdpBrowserSso.  # noqa: E501
        :type: str
        """

        self._default_target_url = default_target_url

    @property
    def authn_context_mappings(self):
        """Gets the authn_context_mappings of this IdpBrowserSso.  # noqa: E501

        A list of authentication context mappings between local and remote values. Applicable for SAML 2.0 and OIDC protocol connections.  # noqa: E501

        :return: The authn_context_mappings of this IdpBrowserSso.  # noqa: E501
        :rtype: list[AuthnContextMapping]
        """
        return self._authn_context_mappings

    @authn_context_mappings.setter
    def authn_context_mappings(self, authn_context_mappings):
        """Sets the authn_context_mappings of this IdpBrowserSso.

        A list of authentication context mappings between local and remote values. Applicable for SAML 2.0 and OIDC protocol connections.  # noqa: E501

        :param authn_context_mappings: The authn_context_mappings of this IdpBrowserSso.  # noqa: E501
        :type: list[AuthnContextMapping]
        """

        self._authn_context_mappings = authn_context_mappings

    @property
    def assertions_signed(self):
        """Gets the assertions_signed of this IdpBrowserSso.  # noqa: E501

        Specify whether the incoming SAML assertions are signed rather than the entire SAML response being signed.  # noqa: E501

        :return: The assertions_signed of this IdpBrowserSso.  # noqa: E501
        :rtype: bool
        """
        return self._assertions_signed

    @assertions_signed.setter
    def assertions_signed(self, assertions_signed):
        """Sets the assertions_signed of this IdpBrowserSso.

        Specify whether the incoming SAML assertions are signed rather than the entire SAML response being signed.  # noqa: E501

        :param assertions_signed: The assertions_signed of this IdpBrowserSso.  # noqa: E501
        :type: bool
        """

        self._assertions_signed = assertions_signed

    @property
    def sign_authn_requests(self):
        """Gets the sign_authn_requests of this IdpBrowserSso.  # noqa: E501

        Determines whether SAML authentication requests should be signed.  # noqa: E501

        :return: The sign_authn_requests of this IdpBrowserSso.  # noqa: E501
        :rtype: bool
        """
        return self._sign_authn_requests

    @sign_authn_requests.setter
    def sign_authn_requests(self, sign_authn_requests):
        """Sets the sign_authn_requests of this IdpBrowserSso.

        Determines whether SAML authentication requests should be signed.  # noqa: E501

        :param sign_authn_requests: The sign_authn_requests of this IdpBrowserSso.  # noqa: E501
        :type: bool
        """

        self._sign_authn_requests = sign_authn_requests

    @property
    def decryption_policy(self):
        """Gets the decryption_policy of this IdpBrowserSso.  # noqa: E501

        The SAML 2.0 decryption policy for browser-based SSO.  # noqa: E501

        :return: The decryption_policy of this IdpBrowserSso.  # noqa: E501
        :rtype: DecryptionPolicy
        """
        return self._decryption_policy

    @decryption_policy.setter
    def decryption_policy(self, decryption_policy):
        """Sets the decryption_policy of this IdpBrowserSso.

        The SAML 2.0 decryption policy for browser-based SSO.  # noqa: E501

        :param decryption_policy: The decryption_policy of this IdpBrowserSso.  # noqa: E501
        :type: DecryptionPolicy
        """

        self._decryption_policy = decryption_policy

    @property
    def idp_identity_mapping(self):
        """Gets the idp_identity_mapping of this IdpBrowserSso.  # noqa: E501

        Defines the process in which users authenticated by the IdP are associated with user accounts local to the SP.  # noqa: E501

        :return: The idp_identity_mapping of this IdpBrowserSso.  # noqa: E501
        :rtype: str
        """
        return self._idp_identity_mapping

    @idp_identity_mapping.setter
    def idp_identity_mapping(self, idp_identity_mapping):
        """Sets the idp_identity_mapping of this IdpBrowserSso.

        Defines the process in which users authenticated by the IdP are associated with user accounts local to the SP.  # noqa: E501

        :param idp_identity_mapping: The idp_identity_mapping of this IdpBrowserSso.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and idp_identity_mapping is None:
            raise ValueError("Invalid value for `idp_identity_mapping`, must not be `None`")  # noqa: E501
        allowed_values = ["ACCOUNT_MAPPING", "ACCOUNT_LINKING", "NONE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                idp_identity_mapping not in allowed_values):
            raise ValueError(
                "Invalid value for `idp_identity_mapping` ({0}), must be one of {1}"  # noqa: E501
                .format(idp_identity_mapping, allowed_values)
            )

        self._idp_identity_mapping = idp_identity_mapping

    @property
    def attribute_contract(self):
        """Gets the attribute_contract of this IdpBrowserSso.  # noqa: E501

        The list of attributes that the IdP sends in the assertion.  # noqa: E501

        :return: The attribute_contract of this IdpBrowserSso.  # noqa: E501
        :rtype: IdpBrowserSsoAttributeContract
        """
        return self._attribute_contract

    @attribute_contract.setter
    def attribute_contract(self, attribute_contract):
        """Sets the attribute_contract of this IdpBrowserSso.

        The list of attributes that the IdP sends in the assertion.  # noqa: E501

        :param attribute_contract: The attribute_contract of this IdpBrowserSso.  # noqa: E501
        :type: IdpBrowserSsoAttributeContract
        """

        self._attribute_contract = attribute_contract

    @property
    def adapter_mappings(self):
        """Gets the adapter_mappings of this IdpBrowserSso.  # noqa: E501

        A list of adapters that map to incoming assertions.  # noqa: E501

        :return: The adapter_mappings of this IdpBrowserSso.  # noqa: E501
        :rtype: list[SpAdapterMapping]
        """
        return self._adapter_mappings

    @adapter_mappings.setter
    def adapter_mappings(self, adapter_mappings):
        """Sets the adapter_mappings of this IdpBrowserSso.

        A list of adapters that map to incoming assertions.  # noqa: E501

        :param adapter_mappings: The adapter_mappings of this IdpBrowserSso.  # noqa: E501
        :type: list[SpAdapterMapping]
        """

        self._adapter_mappings = adapter_mappings

    @property
    def authentication_policy_contract_mappings(self):
        """Gets the authentication_policy_contract_mappings of this IdpBrowserSso.  # noqa: E501

        A list of Authentication Policy Contracts that map to incoming assertions.  # noqa: E501

        :return: The authentication_policy_contract_mappings of this IdpBrowserSso.  # noqa: E501
        :rtype: list[AuthenticationPolicyContractMapping]
        """
        return self._authentication_policy_contract_mappings

    @authentication_policy_contract_mappings.setter
    def authentication_policy_contract_mappings(self, authentication_policy_contract_mappings):
        """Sets the authentication_policy_contract_mappings of this IdpBrowserSso.

        A list of Authentication Policy Contracts that map to incoming assertions.  # noqa: E501

        :param authentication_policy_contract_mappings: The authentication_policy_contract_mappings of this IdpBrowserSso.  # noqa: E501
        :type: list[AuthenticationPolicyContractMapping]
        """

        self._authentication_policy_contract_mappings = authentication_policy_contract_mappings

    @property
    def sso_o_auth_mapping(self):
        """Gets the sso_o_auth_mapping of this IdpBrowserSso.  # noqa: E501

        Direct mapping from the IdP connection to the OAuth persistent grant.  # noqa: E501

        :return: The sso_o_auth_mapping of this IdpBrowserSso.  # noqa: E501
        :rtype: SsoOAuthMapping
        """
        return self._sso_o_auth_mapping

    @sso_o_auth_mapping.setter
    def sso_o_auth_mapping(self, sso_o_auth_mapping):
        """Sets the sso_o_auth_mapping of this IdpBrowserSso.

        Direct mapping from the IdP connection to the OAuth persistent grant.  # noqa: E501

        :param sso_o_auth_mapping: The sso_o_auth_mapping of this IdpBrowserSso.  # noqa: E501
        :type: SsoOAuthMapping
        """

        self._sso_o_auth_mapping = sso_o_auth_mapping

    @property
    def oauth_authentication_policy_contract_ref(self):
        """Gets the oauth_authentication_policy_contract_ref of this IdpBrowserSso.  # noqa: E501

        The Authentication policy contract to map into for OAuth. The policy contract can subsequently be mapped into the OAuth persistent grant.  # noqa: E501

        :return: The oauth_authentication_policy_contract_ref of this IdpBrowserSso.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._oauth_authentication_policy_contract_ref

    @oauth_authentication_policy_contract_ref.setter
    def oauth_authentication_policy_contract_ref(self, oauth_authentication_policy_contract_ref):
        """Sets the oauth_authentication_policy_contract_ref of this IdpBrowserSso.

        The Authentication policy contract to map into for OAuth. The policy contract can subsequently be mapped into the OAuth persistent grant.  # noqa: E501

        :param oauth_authentication_policy_contract_ref: The oauth_authentication_policy_contract_ref of this IdpBrowserSso.  # noqa: E501
        :type: ResourceLink
        """

        self._oauth_authentication_policy_contract_ref = oauth_authentication_policy_contract_ref

    @property
    def jit_provisioning(self):
        """Gets the jit_provisioning of this IdpBrowserSso.  # noqa: E501

        JIT Provisioning of user accounts.  # noqa: E501

        :return: The jit_provisioning of this IdpBrowserSso.  # noqa: E501
        :rtype: JitProvisioning
        """
        return self._jit_provisioning

    @jit_provisioning.setter
    def jit_provisioning(self, jit_provisioning):
        """Sets the jit_provisioning of this IdpBrowserSso.

        JIT Provisioning of user accounts.  # noqa: E501

        :param jit_provisioning: The jit_provisioning of this IdpBrowserSso.  # noqa: E501
        :type: JitProvisioning
        """

        self._jit_provisioning = jit_provisioning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdpBrowserSso, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdpBrowserSso):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IdpBrowserSso):
            return True

        return self.to_dict() != other.to_dict()
