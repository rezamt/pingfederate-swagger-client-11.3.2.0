# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AuthenticationSessionPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'authentication_source': 'AuthenticationSource',
        'enable_sessions': 'bool',
        'persistent': 'bool',
        'idle_timeout_mins': 'int',
        'max_timeout_mins': 'int',
        'timeout_display_unit': 'str',
        'authn_context_sensitive': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'authentication_source': 'authenticationSource',
        'enable_sessions': 'enableSessions',
        'persistent': 'persistent',
        'idle_timeout_mins': 'idleTimeoutMins',
        'max_timeout_mins': 'maxTimeoutMins',
        'timeout_display_unit': 'timeoutDisplayUnit',
        'authn_context_sensitive': 'authnContextSensitive'
    }

    def __init__(self, id=None, authentication_source=None, enable_sessions=None, persistent=None, idle_timeout_mins=None, max_timeout_mins=None, timeout_display_unit=None, authn_context_sensitive=None, _configuration=None):  # noqa: E501
        """AuthenticationSessionPolicy - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._authentication_source = None
        self._enable_sessions = None
        self._persistent = None
        self._idle_timeout_mins = None
        self._max_timeout_mins = None
        self._timeout_display_unit = None
        self._authn_context_sensitive = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.authentication_source = authentication_source
        self.enable_sessions = enable_sessions
        if persistent is not None:
            self.persistent = persistent
        if idle_timeout_mins is not None:
            self.idle_timeout_mins = idle_timeout_mins
        if max_timeout_mins is not None:
            self.max_timeout_mins = max_timeout_mins
        if timeout_display_unit is not None:
            self.timeout_display_unit = timeout_display_unit
        if authn_context_sensitive is not None:
            self.authn_context_sensitive = authn_context_sensitive

    @property
    def id(self):
        """Gets the id of this AuthenticationSessionPolicy.  # noqa: E501

        The persistent, unique ID for the session policy. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified.  # noqa: E501

        :return: The id of this AuthenticationSessionPolicy.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthenticationSessionPolicy.

        The persistent, unique ID for the session policy. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified.  # noqa: E501

        :param id: The id of this AuthenticationSessionPolicy.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def authentication_source(self):
        """Gets the authentication_source of this AuthenticationSessionPolicy.  # noqa: E501

        The authentication source this session policy applies to. This property cannot be changed after the policy is created.  # noqa: E501

        :return: The authentication_source of this AuthenticationSessionPolicy.  # noqa: E501
        :rtype: AuthenticationSource
        """
        return self._authentication_source

    @authentication_source.setter
    def authentication_source(self, authentication_source):
        """Sets the authentication_source of this AuthenticationSessionPolicy.

        The authentication source this session policy applies to. This property cannot be changed after the policy is created.  # noqa: E501

        :param authentication_source: The authentication_source of this AuthenticationSessionPolicy.  # noqa: E501
        :type: AuthenticationSource
        """
        if self._configuration.client_side_validation and authentication_source is None:
            raise ValueError("Invalid value for `authentication_source`, must not be `None`")  # noqa: E501

        self._authentication_source = authentication_source

    @property
    def enable_sessions(self):
        """Gets the enable_sessions of this AuthenticationSessionPolicy.  # noqa: E501

        Determines whether sessions are enabled for the authentication source. This value overrides the enableSessions value from the global authentication session policy.  # noqa: E501

        :return: The enable_sessions of this AuthenticationSessionPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._enable_sessions

    @enable_sessions.setter
    def enable_sessions(self, enable_sessions):
        """Sets the enable_sessions of this AuthenticationSessionPolicy.

        Determines whether sessions are enabled for the authentication source. This value overrides the enableSessions value from the global authentication session policy.  # noqa: E501

        :param enable_sessions: The enable_sessions of this AuthenticationSessionPolicy.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and enable_sessions is None:
            raise ValueError("Invalid value for `enable_sessions`, must not be `None`")  # noqa: E501

        self._enable_sessions = enable_sessions

    @property
    def persistent(self):
        """Gets the persistent of this AuthenticationSessionPolicy.  # noqa: E501

        Determines whether sessions for the authentication source are persistent. This value overrides the persistentSessions value from the global authentication session policy. This field is ignored if enableSessions is false.  # noqa: E501

        :return: The persistent of this AuthenticationSessionPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._persistent

    @persistent.setter
    def persistent(self, persistent):
        """Sets the persistent of this AuthenticationSessionPolicy.

        Determines whether sessions for the authentication source are persistent. This value overrides the persistentSessions value from the global authentication session policy. This field is ignored if enableSessions is false.  # noqa: E501

        :param persistent: The persistent of this AuthenticationSessionPolicy.  # noqa: E501
        :type: bool
        """

        self._persistent = persistent

    @property
    def idle_timeout_mins(self):
        """Gets the idle_timeout_mins of this AuthenticationSessionPolicy.  # noqa: E501

        The idle timeout period, in minutes. If omitted, the value from the global authentication session policy will be used. If set to -1, the idle timeout will be set to the maximum timeout. If a value is provided for this property, a value must also be provided for maxTimeoutMins.  # noqa: E501

        :return: The idle_timeout_mins of this AuthenticationSessionPolicy.  # noqa: E501
        :rtype: int
        """
        return self._idle_timeout_mins

    @idle_timeout_mins.setter
    def idle_timeout_mins(self, idle_timeout_mins):
        """Sets the idle_timeout_mins of this AuthenticationSessionPolicy.

        The idle timeout period, in minutes. If omitted, the value from the global authentication session policy will be used. If set to -1, the idle timeout will be set to the maximum timeout. If a value is provided for this property, a value must also be provided for maxTimeoutMins.  # noqa: E501

        :param idle_timeout_mins: The idle_timeout_mins of this AuthenticationSessionPolicy.  # noqa: E501
        :type: int
        """

        self._idle_timeout_mins = idle_timeout_mins

    @property
    def max_timeout_mins(self):
        """Gets the max_timeout_mins of this AuthenticationSessionPolicy.  # noqa: E501

        The maximum timeout period, in minutes. If omitted, the value from the global authentication session policy will be used. If set to -1, sessions do not expire. If a value is provided for this property, a value must also be provided for idleTimeoutMins.  # noqa: E501

        :return: The max_timeout_mins of this AuthenticationSessionPolicy.  # noqa: E501
        :rtype: int
        """
        return self._max_timeout_mins

    @max_timeout_mins.setter
    def max_timeout_mins(self, max_timeout_mins):
        """Sets the max_timeout_mins of this AuthenticationSessionPolicy.

        The maximum timeout period, in minutes. If omitted, the value from the global authentication session policy will be used. If set to -1, sessions do not expire. If a value is provided for this property, a value must also be provided for idleTimeoutMins.  # noqa: E501

        :param max_timeout_mins: The max_timeout_mins of this AuthenticationSessionPolicy.  # noqa: E501
        :type: int
        """

        self._max_timeout_mins = max_timeout_mins

    @property
    def timeout_display_unit(self):
        """Gets the timeout_display_unit of this AuthenticationSessionPolicy.  # noqa: E501

        The display unit for session timeout periods in the PingFederate administrative console. When the display unit is HOURS or DAYS, the timeout values in minutes must correspond to a whole number value for the specified unit.  # noqa: E501

        :return: The timeout_display_unit of this AuthenticationSessionPolicy.  # noqa: E501
        :rtype: str
        """
        return self._timeout_display_unit

    @timeout_display_unit.setter
    def timeout_display_unit(self, timeout_display_unit):
        """Sets the timeout_display_unit of this AuthenticationSessionPolicy.

        The display unit for session timeout periods in the PingFederate administrative console. When the display unit is HOURS or DAYS, the timeout values in minutes must correspond to a whole number value for the specified unit.  # noqa: E501

        :param timeout_display_unit: The timeout_display_unit of this AuthenticationSessionPolicy.  # noqa: E501
        :type: str
        """
        allowed_values = ["MINUTES", "HOURS", "DAYS"]  # noqa: E501
        if (self._configuration.client_side_validation and
                timeout_display_unit not in allowed_values):
            raise ValueError(
                "Invalid value for `timeout_display_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(timeout_display_unit, allowed_values)
            )

        self._timeout_display_unit = timeout_display_unit

    @property
    def authn_context_sensitive(self):
        """Gets the authn_context_sensitive of this AuthenticationSessionPolicy.  # noqa: E501

        Determines whether the requested authentication context is considered when deciding whether an existing session is valid for a given request. The default is false.  # noqa: E501

        :return: The authn_context_sensitive of this AuthenticationSessionPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._authn_context_sensitive

    @authn_context_sensitive.setter
    def authn_context_sensitive(self, authn_context_sensitive):
        """Sets the authn_context_sensitive of this AuthenticationSessionPolicy.

        Determines whether the requested authentication context is considered when deciding whether an existing session is valid for a given request. The default is false.  # noqa: E501

        :param authn_context_sensitive: The authn_context_sensitive of this AuthenticationSessionPolicy.  # noqa: E501
        :type: bool
        """

        self._authn_context_sensitive = authn_context_sensitive

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthenticationSessionPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthenticationSessionPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthenticationSessionPolicy):
            return True

        return self.to_dict() != other.to_dict()
