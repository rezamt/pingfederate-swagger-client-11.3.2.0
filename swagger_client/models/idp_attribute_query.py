# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IdpAttributeQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'name_mappings': 'list[AttributeQueryNameMapping]',
        'policy': 'IdpAttributeQueryPolicy'
    }

    attribute_map = {
        'url': 'url',
        'name_mappings': 'nameMappings',
        'policy': 'policy'
    }

    def __init__(self, url=None, name_mappings=None, policy=None, _configuration=None):  # noqa: E501
        """IdpAttributeQuery - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._url = None
        self._name_mappings = None
        self._policy = None
        self.discriminator = None

        self.url = url
        if name_mappings is not None:
            self.name_mappings = name_mappings
        if policy is not None:
            self.policy = policy

    @property
    def url(self):
        """Gets the url of this IdpAttributeQuery.  # noqa: E501

        The URL at your IdP partner's site where attribute queries are to be sent.  # noqa: E501

        :return: The url of this IdpAttributeQuery.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IdpAttributeQuery.

        The URL at your IdP partner's site where attribute queries are to be sent.  # noqa: E501

        :param url: The url of this IdpAttributeQuery.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def name_mappings(self):
        """Gets the name_mappings of this IdpAttributeQuery.  # noqa: E501

        The attribute name mappings between the SP and the IdP.  # noqa: E501

        :return: The name_mappings of this IdpAttributeQuery.  # noqa: E501
        :rtype: list[AttributeQueryNameMapping]
        """
        return self._name_mappings

    @name_mappings.setter
    def name_mappings(self, name_mappings):
        """Sets the name_mappings of this IdpAttributeQuery.

        The attribute name mappings between the SP and the IdP.  # noqa: E501

        :param name_mappings: The name_mappings of this IdpAttributeQuery.  # noqa: E501
        :type: list[AttributeQueryNameMapping]
        """

        self._name_mappings = name_mappings

    @property
    def policy(self):
        """Gets the policy of this IdpAttributeQuery.  # noqa: E501

        The attribute query profile's security policy.  # noqa: E501

        :return: The policy of this IdpAttributeQuery.  # noqa: E501
        :rtype: IdpAttributeQueryPolicy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this IdpAttributeQuery.

        The attribute query profile's security policy.  # noqa: E501

        :param policy: The policy of this IdpAttributeQuery.  # noqa: E501
        :type: IdpAttributeQueryPolicy
        """

        self._policy = policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdpAttributeQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdpAttributeQuery):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IdpAttributeQuery):
            return True

        return self.to_dict() != other.to_dict()
