# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IdpWsTrust(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute_contract': 'IdpWsTrustAttributeContract',
        'generate_local_token': 'bool',
        'token_generator_mappings': 'list[SpTokenGeneratorMapping]'
    }

    attribute_map = {
        'attribute_contract': 'attributeContract',
        'generate_local_token': 'generateLocalToken',
        'token_generator_mappings': 'tokenGeneratorMappings'
    }

    def __init__(self, attribute_contract=None, generate_local_token=None, token_generator_mappings=None, _configuration=None):  # noqa: E501
        """IdpWsTrust - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._attribute_contract = None
        self._generate_local_token = None
        self._token_generator_mappings = None
        self.discriminator = None

        self.attribute_contract = attribute_contract
        self.generate_local_token = generate_local_token
        if token_generator_mappings is not None:
            self.token_generator_mappings = token_generator_mappings

    @property
    def attribute_contract(self):
        """Gets the attribute_contract of this IdpWsTrust.  # noqa: E501

        A set of user attributes that the SP receives in the incoming token.  # noqa: E501

        :return: The attribute_contract of this IdpWsTrust.  # noqa: E501
        :rtype: IdpWsTrustAttributeContract
        """
        return self._attribute_contract

    @attribute_contract.setter
    def attribute_contract(self, attribute_contract):
        """Sets the attribute_contract of this IdpWsTrust.

        A set of user attributes that the SP receives in the incoming token.  # noqa: E501

        :param attribute_contract: The attribute_contract of this IdpWsTrust.  # noqa: E501
        :type: IdpWsTrustAttributeContract
        """
        if self._configuration.client_side_validation and attribute_contract is None:
            raise ValueError("Invalid value for `attribute_contract`, must not be `None`")  # noqa: E501

        self._attribute_contract = attribute_contract

    @property
    def generate_local_token(self):
        """Gets the generate_local_token of this IdpWsTrust.  # noqa: E501

        Indicates whether a local token needs to be generated. The default value is false.  # noqa: E501

        :return: The generate_local_token of this IdpWsTrust.  # noqa: E501
        :rtype: bool
        """
        return self._generate_local_token

    @generate_local_token.setter
    def generate_local_token(self, generate_local_token):
        """Sets the generate_local_token of this IdpWsTrust.

        Indicates whether a local token needs to be generated. The default value is false.  # noqa: E501

        :param generate_local_token: The generate_local_token of this IdpWsTrust.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and generate_local_token is None:
            raise ValueError("Invalid value for `generate_local_token`, must not be `None`")  # noqa: E501

        self._generate_local_token = generate_local_token

    @property
    def token_generator_mappings(self):
        """Gets the token_generator_mappings of this IdpWsTrust.  # noqa: E501

        A list of token generators to generate local tokens. Required if a local token needs to be generated.  # noqa: E501

        :return: The token_generator_mappings of this IdpWsTrust.  # noqa: E501
        :rtype: list[SpTokenGeneratorMapping]
        """
        return self._token_generator_mappings

    @token_generator_mappings.setter
    def token_generator_mappings(self, token_generator_mappings):
        """Sets the token_generator_mappings of this IdpWsTrust.

        A list of token generators to generate local tokens. Required if a local token needs to be generated.  # noqa: E501

        :param token_generator_mappings: The token_generator_mappings of this IdpWsTrust.  # noqa: E501
        :type: list[SpTokenGeneratorMapping]
        """

        self._token_generator_mappings = token_generator_mappings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdpWsTrust, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdpWsTrust):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IdpWsTrust):
            return True

        return self.to_dict() != other.to_dict()
