# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ClientMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parameter': 'str',
        'description': 'str',
        'multi_valued': 'bool'
    }

    attribute_map = {
        'parameter': 'parameter',
        'description': 'description',
        'multi_valued': 'multiValued'
    }

    def __init__(self, parameter=None, description=None, multi_valued=None, _configuration=None):  # noqa: E501
        """ClientMetadata - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._parameter = None
        self._description = None
        self._multi_valued = None
        self.discriminator = None

        if parameter is not None:
            self.parameter = parameter
        if description is not None:
            self.description = description
        if multi_valued is not None:
            self.multi_valued = multi_valued

    @property
    def parameter(self):
        """Gets the parameter of this ClientMetadata.  # noqa: E501

        The metadata name.  # noqa: E501

        :return: The parameter of this ClientMetadata.  # noqa: E501
        :rtype: str
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this ClientMetadata.

        The metadata name.  # noqa: E501

        :param parameter: The parameter of this ClientMetadata.  # noqa: E501
        :type: str
        """

        self._parameter = parameter

    @property
    def description(self):
        """Gets the description of this ClientMetadata.  # noqa: E501

        The metadata description.  # noqa: E501

        :return: The description of this ClientMetadata.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ClientMetadata.

        The metadata description.  # noqa: E501

        :param description: The description of this ClientMetadata.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def multi_valued(self):
        """Gets the multi_valued of this ClientMetadata.  # noqa: E501

        If the field should allow multiple values.  # noqa: E501

        :return: The multi_valued of this ClientMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._multi_valued

    @multi_valued.setter
    def multi_valued(self, multi_valued):
        """Sets the multi_valued of this ClientMetadata.

        If the field should allow multiple values.  # noqa: E501

        :param multi_valued: The multi_valued of this ClientMetadata.  # noqa: E501
        :type: bool
        """

        self._multi_valued = multi_valued

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClientMetadata):
            return True

        return self.to_dict() != other.to_dict()
