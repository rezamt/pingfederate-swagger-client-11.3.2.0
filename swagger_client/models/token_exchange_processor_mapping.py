# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TokenExchangeProcessorMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute_sources': 'list[AttributeSource]',
        'attribute_contract_fulfillment': 'dict(str, AttributeFulfillmentValue)',
        'issuance_criteria': 'IssuanceCriteria',
        'subject_token_type': 'str',
        'subject_token_processor': 'ResourceLink',
        'actor_token_type': 'str',
        'actor_token_processor': 'ResourceLink'
    }

    attribute_map = {
        'attribute_sources': 'attributeSources',
        'attribute_contract_fulfillment': 'attributeContractFulfillment',
        'issuance_criteria': 'issuanceCriteria',
        'subject_token_type': 'subjectTokenType',
        'subject_token_processor': 'subjectTokenProcessor',
        'actor_token_type': 'actorTokenType',
        'actor_token_processor': 'actorTokenProcessor'
    }

    def __init__(self, attribute_sources=None, attribute_contract_fulfillment=None, issuance_criteria=None, subject_token_type=None, subject_token_processor=None, actor_token_type=None, actor_token_processor=None, _configuration=None):  # noqa: E501
        """TokenExchangeProcessorMapping - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._attribute_sources = None
        self._attribute_contract_fulfillment = None
        self._issuance_criteria = None
        self._subject_token_type = None
        self._subject_token_processor = None
        self._actor_token_type = None
        self._actor_token_processor = None
        self.discriminator = None

        if attribute_sources is not None:
            self.attribute_sources = attribute_sources
        self.attribute_contract_fulfillment = attribute_contract_fulfillment
        if issuance_criteria is not None:
            self.issuance_criteria = issuance_criteria
        self.subject_token_type = subject_token_type
        self.subject_token_processor = subject_token_processor
        if actor_token_type is not None:
            self.actor_token_type = actor_token_type
        if actor_token_processor is not None:
            self.actor_token_processor = actor_token_processor

    @property
    def attribute_sources(self):
        """Gets the attribute_sources of this TokenExchangeProcessorMapping.  # noqa: E501

        A list of configured data stores to look up attributes from.  # noqa: E501

        :return: The attribute_sources of this TokenExchangeProcessorMapping.  # noqa: E501
        :rtype: list[AttributeSource]
        """
        return self._attribute_sources

    @attribute_sources.setter
    def attribute_sources(self, attribute_sources):
        """Sets the attribute_sources of this TokenExchangeProcessorMapping.

        A list of configured data stores to look up attributes from.  # noqa: E501

        :param attribute_sources: The attribute_sources of this TokenExchangeProcessorMapping.  # noqa: E501
        :type: list[AttributeSource]
        """

        self._attribute_sources = attribute_sources

    @property
    def attribute_contract_fulfillment(self):
        """Gets the attribute_contract_fulfillment of this TokenExchangeProcessorMapping.  # noqa: E501

        A list of mappings from attribute names to their fulfillment values.  # noqa: E501

        :return: The attribute_contract_fulfillment of this TokenExchangeProcessorMapping.  # noqa: E501
        :rtype: dict(str, AttributeFulfillmentValue)
        """
        return self._attribute_contract_fulfillment

    @attribute_contract_fulfillment.setter
    def attribute_contract_fulfillment(self, attribute_contract_fulfillment):
        """Sets the attribute_contract_fulfillment of this TokenExchangeProcessorMapping.

        A list of mappings from attribute names to their fulfillment values.  # noqa: E501

        :param attribute_contract_fulfillment: The attribute_contract_fulfillment of this TokenExchangeProcessorMapping.  # noqa: E501
        :type: dict(str, AttributeFulfillmentValue)
        """
        if self._configuration.client_side_validation and attribute_contract_fulfillment is None:
            raise ValueError("Invalid value for `attribute_contract_fulfillment`, must not be `None`")  # noqa: E501

        self._attribute_contract_fulfillment = attribute_contract_fulfillment

    @property
    def issuance_criteria(self):
        """Gets the issuance_criteria of this TokenExchangeProcessorMapping.  # noqa: E501

        The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.  # noqa: E501

        :return: The issuance_criteria of this TokenExchangeProcessorMapping.  # noqa: E501
        :rtype: IssuanceCriteria
        """
        return self._issuance_criteria

    @issuance_criteria.setter
    def issuance_criteria(self, issuance_criteria):
        """Sets the issuance_criteria of this TokenExchangeProcessorMapping.

        The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.  # noqa: E501

        :param issuance_criteria: The issuance_criteria of this TokenExchangeProcessorMapping.  # noqa: E501
        :type: IssuanceCriteria
        """

        self._issuance_criteria = issuance_criteria

    @property
    def subject_token_type(self):
        """Gets the subject_token_type of this TokenExchangeProcessorMapping.  # noqa: E501

        The Subject token type  # noqa: E501

        :return: The subject_token_type of this TokenExchangeProcessorMapping.  # noqa: E501
        :rtype: str
        """
        return self._subject_token_type

    @subject_token_type.setter
    def subject_token_type(self, subject_token_type):
        """Sets the subject_token_type of this TokenExchangeProcessorMapping.

        The Subject token type  # noqa: E501

        :param subject_token_type: The subject_token_type of this TokenExchangeProcessorMapping.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and subject_token_type is None:
            raise ValueError("Invalid value for `subject_token_type`, must not be `None`")  # noqa: E501

        self._subject_token_type = subject_token_type

    @property
    def subject_token_processor(self):
        """Gets the subject_token_processor of this TokenExchangeProcessorMapping.  # noqa: E501

        The Token processor used to process the subject token  # noqa: E501

        :return: The subject_token_processor of this TokenExchangeProcessorMapping.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._subject_token_processor

    @subject_token_processor.setter
    def subject_token_processor(self, subject_token_processor):
        """Sets the subject_token_processor of this TokenExchangeProcessorMapping.

        The Token processor used to process the subject token  # noqa: E501

        :param subject_token_processor: The subject_token_processor of this TokenExchangeProcessorMapping.  # noqa: E501
        :type: ResourceLink
        """
        if self._configuration.client_side_validation and subject_token_processor is None:
            raise ValueError("Invalid value for `subject_token_processor`, must not be `None`")  # noqa: E501

        self._subject_token_processor = subject_token_processor

    @property
    def actor_token_type(self):
        """Gets the actor_token_type of this TokenExchangeProcessorMapping.  # noqa: E501

        The Actor token type  # noqa: E501

        :return: The actor_token_type of this TokenExchangeProcessorMapping.  # noqa: E501
        :rtype: str
        """
        return self._actor_token_type

    @actor_token_type.setter
    def actor_token_type(self, actor_token_type):
        """Sets the actor_token_type of this TokenExchangeProcessorMapping.

        The Actor token type  # noqa: E501

        :param actor_token_type: The actor_token_type of this TokenExchangeProcessorMapping.  # noqa: E501
        :type: str
        """

        self._actor_token_type = actor_token_type

    @property
    def actor_token_processor(self):
        """Gets the actor_token_processor of this TokenExchangeProcessorMapping.  # noqa: E501

        The Token processor used to process the actor token  # noqa: E501

        :return: The actor_token_processor of this TokenExchangeProcessorMapping.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._actor_token_processor

    @actor_token_processor.setter
    def actor_token_processor(self, actor_token_processor):
        """Sets the actor_token_processor of this TokenExchangeProcessorMapping.

        The Token processor used to process the actor token  # noqa: E501

        :param actor_token_processor: The actor_token_processor of this TokenExchangeProcessorMapping.  # noqa: E501
        :type: ResourceLink
        """

        self._actor_token_processor = actor_token_processor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenExchangeProcessorMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenExchangeProcessorMapping):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TokenExchangeProcessorMapping):
            return True

        return self.to_dict() != other.to_dict()
