# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class BaseSigningSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'signing_key_pair_ref': 'ResourceLink',
        'algorithm': 'str',
        'include_cert_in_signature': 'bool',
        'include_raw_key_in_signature': 'bool'
    }

    attribute_map = {
        'signing_key_pair_ref': 'signingKeyPairRef',
        'algorithm': 'algorithm',
        'include_cert_in_signature': 'includeCertInSignature',
        'include_raw_key_in_signature': 'includeRawKeyInSignature'
    }

    def __init__(self, signing_key_pair_ref=None, algorithm=None, include_cert_in_signature=None, include_raw_key_in_signature=None, _configuration=None):  # noqa: E501
        """BaseSigningSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._signing_key_pair_ref = None
        self._algorithm = None
        self._include_cert_in_signature = None
        self._include_raw_key_in_signature = None
        self.discriminator = None

        self.signing_key_pair_ref = signing_key_pair_ref
        if algorithm is not None:
            self.algorithm = algorithm
        if include_cert_in_signature is not None:
            self.include_cert_in_signature = include_cert_in_signature
        if include_raw_key_in_signature is not None:
            self.include_raw_key_in_signature = include_raw_key_in_signature

    @property
    def signing_key_pair_ref(self):
        """Gets the signing_key_pair_ref of this BaseSigningSettings.  # noqa: E501

        The ID of the key pair used to sign messages sent to this partner. The ID of the key pair is also known as the alias and can be found by viewing the corresponding certificate under 'Signing & Decryption Keys & Certificates' in the PingFederate admin console.  # noqa: E501

        :return: The signing_key_pair_ref of this BaseSigningSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._signing_key_pair_ref

    @signing_key_pair_ref.setter
    def signing_key_pair_ref(self, signing_key_pair_ref):
        """Sets the signing_key_pair_ref of this BaseSigningSettings.

        The ID of the key pair used to sign messages sent to this partner. The ID of the key pair is also known as the alias and can be found by viewing the corresponding certificate under 'Signing & Decryption Keys & Certificates' in the PingFederate admin console.  # noqa: E501

        :param signing_key_pair_ref: The signing_key_pair_ref of this BaseSigningSettings.  # noqa: E501
        :type: ResourceLink
        """
        if self._configuration.client_side_validation and signing_key_pair_ref is None:
            raise ValueError("Invalid value for `signing_key_pair_ref`, must not be `None`")  # noqa: E501

        self._signing_key_pair_ref = signing_key_pair_ref

    @property
    def algorithm(self):
        """Gets the algorithm of this BaseSigningSettings.  # noqa: E501

        The algorithm used to sign messages sent to this partner. The default is SHA1withDSA for DSA certs, SHA256withRSA for RSA certs, and SHA256withECDSA for EC certs. For RSA certs, SHA1withRSA, SHA384withRSA, SHA512withRSA, SHA256withRSAandMGF1, SHA384withRSAandMGF1 and SHA512withRSAandMGF1 are also supported. For EC certs, SHA384withECDSA and SHA512withECDSA are also supported. If the connection is WS-Federation with JWT token type, then the possible values are RSA SHA256, RSA SHA384, RSA SHA512, RSASSA-PSS SHA256, RSASSA-PSS SHA384, RSASSA-PSS SHA512, ECDSA SHA256, ECDSA SHA384, ECDSA SHA512  # noqa: E501

        :return: The algorithm of this BaseSigningSettings.  # noqa: E501
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this BaseSigningSettings.

        The algorithm used to sign messages sent to this partner. The default is SHA1withDSA for DSA certs, SHA256withRSA for RSA certs, and SHA256withECDSA for EC certs. For RSA certs, SHA1withRSA, SHA384withRSA, SHA512withRSA, SHA256withRSAandMGF1, SHA384withRSAandMGF1 and SHA512withRSAandMGF1 are also supported. For EC certs, SHA384withECDSA and SHA512withECDSA are also supported. If the connection is WS-Federation with JWT token type, then the possible values are RSA SHA256, RSA SHA384, RSA SHA512, RSASSA-PSS SHA256, RSASSA-PSS SHA384, RSASSA-PSS SHA512, ECDSA SHA256, ECDSA SHA384, ECDSA SHA512  # noqa: E501

        :param algorithm: The algorithm of this BaseSigningSettings.  # noqa: E501
        :type: str
        """

        self._algorithm = algorithm

    @property
    def include_cert_in_signature(self):
        """Gets the include_cert_in_signature of this BaseSigningSettings.  # noqa: E501

        Determines whether the signing certificate is included in the signature <KeyInfo> element.  # noqa: E501

        :return: The include_cert_in_signature of this BaseSigningSettings.  # noqa: E501
        :rtype: bool
        """
        return self._include_cert_in_signature

    @include_cert_in_signature.setter
    def include_cert_in_signature(self, include_cert_in_signature):
        """Sets the include_cert_in_signature of this BaseSigningSettings.

        Determines whether the signing certificate is included in the signature <KeyInfo> element.  # noqa: E501

        :param include_cert_in_signature: The include_cert_in_signature of this BaseSigningSettings.  # noqa: E501
        :type: bool
        """

        self._include_cert_in_signature = include_cert_in_signature

    @property
    def include_raw_key_in_signature(self):
        """Gets the include_raw_key_in_signature of this BaseSigningSettings.  # noqa: E501

        Determines whether the <KeyValue> element with the raw public key is included in the signature <KeyInfo> element.  # noqa: E501

        :return: The include_raw_key_in_signature of this BaseSigningSettings.  # noqa: E501
        :rtype: bool
        """
        return self._include_raw_key_in_signature

    @include_raw_key_in_signature.setter
    def include_raw_key_in_signature(self, include_raw_key_in_signature):
        """Sets the include_raw_key_in_signature of this BaseSigningSettings.

        Determines whether the <KeyValue> element with the raw public key is included in the signature <KeyInfo> element.  # noqa: E501

        :param include_raw_key_in_signature: The include_raw_key_in_signature of this BaseSigningSettings.  # noqa: E501
        :type: bool
        """

        self._include_raw_key_in_signature = include_raw_key_in_signature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseSigningSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseSigningSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BaseSigningSettings):
            return True

        return self.to_dict() != other.to_dict()
