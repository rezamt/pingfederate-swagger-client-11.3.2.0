# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SpBrowserSso(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'protocol': 'str',
        'ws_fed_token_type': 'str',
        'ws_trust_version': 'str',
        'enabled_profiles': 'list[str]',
        'incoming_bindings': 'list[str]',
        'message_customizations': 'list[ProtocolMessageCustomization]',
        'url_whitelist_entries': 'list[UrlWhitelistEntry]',
        'artifact': 'ArtifactSettings',
        'slo_service_endpoints': 'list[SloServiceEndpoint]',
        'default_target_url': 'str',
        'always_sign_artifact_response': 'bool',
        'sso_application_endpoint': 'str',
        'sso_service_endpoints': 'list[SpSsoServiceEndpoint]',
        'sp_saml_identity_mapping': 'str',
        'sp_ws_fed_identity_mapping': 'str',
        'sign_response_as_required': 'bool',
        'sign_assertions': 'bool',
        'require_signed_authn_requests': 'bool',
        'encryption_policy': 'EncryptionPolicy',
        'attribute_contract': 'SpBrowserSsoAttributeContract',
        'adapter_mappings': 'list[IdpAdapterAssertionMapping]',
        'authentication_policy_contract_assertion_mappings': 'list[AuthenticationPolicyContractAssertionMapping]',
        'assertion_lifetime': 'AssertionLifetime'
    }

    attribute_map = {
        'protocol': 'protocol',
        'ws_fed_token_type': 'wsFedTokenType',
        'ws_trust_version': 'wsTrustVersion',
        'enabled_profiles': 'enabledProfiles',
        'incoming_bindings': 'incomingBindings',
        'message_customizations': 'messageCustomizations',
        'url_whitelist_entries': 'urlWhitelistEntries',
        'artifact': 'artifact',
        'slo_service_endpoints': 'sloServiceEndpoints',
        'default_target_url': 'defaultTargetUrl',
        'always_sign_artifact_response': 'alwaysSignArtifactResponse',
        'sso_application_endpoint': 'ssoApplicationEndpoint',
        'sso_service_endpoints': 'ssoServiceEndpoints',
        'sp_saml_identity_mapping': 'spSamlIdentityMapping',
        'sp_ws_fed_identity_mapping': 'spWsFedIdentityMapping',
        'sign_response_as_required': 'signResponseAsRequired',
        'sign_assertions': 'signAssertions',
        'require_signed_authn_requests': 'requireSignedAuthnRequests',
        'encryption_policy': 'encryptionPolicy',
        'attribute_contract': 'attributeContract',
        'adapter_mappings': 'adapterMappings',
        'authentication_policy_contract_assertion_mappings': 'authenticationPolicyContractAssertionMappings',
        'assertion_lifetime': 'assertionLifetime'
    }

    def __init__(self, protocol=None, ws_fed_token_type=None, ws_trust_version=None, enabled_profiles=None, incoming_bindings=None, message_customizations=None, url_whitelist_entries=None, artifact=None, slo_service_endpoints=None, default_target_url=None, always_sign_artifact_response=None, sso_application_endpoint=None, sso_service_endpoints=None, sp_saml_identity_mapping=None, sp_ws_fed_identity_mapping=None, sign_response_as_required=None, sign_assertions=None, require_signed_authn_requests=None, encryption_policy=None, attribute_contract=None, adapter_mappings=None, authentication_policy_contract_assertion_mappings=None, assertion_lifetime=None, _configuration=None):  # noqa: E501
        """SpBrowserSso - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._protocol = None
        self._ws_fed_token_type = None
        self._ws_trust_version = None
        self._enabled_profiles = None
        self._incoming_bindings = None
        self._message_customizations = None
        self._url_whitelist_entries = None
        self._artifact = None
        self._slo_service_endpoints = None
        self._default_target_url = None
        self._always_sign_artifact_response = None
        self._sso_application_endpoint = None
        self._sso_service_endpoints = None
        self._sp_saml_identity_mapping = None
        self._sp_ws_fed_identity_mapping = None
        self._sign_response_as_required = None
        self._sign_assertions = None
        self._require_signed_authn_requests = None
        self._encryption_policy = None
        self._attribute_contract = None
        self._adapter_mappings = None
        self._authentication_policy_contract_assertion_mappings = None
        self._assertion_lifetime = None
        self.discriminator = None

        self.protocol = protocol
        if ws_fed_token_type is not None:
            self.ws_fed_token_type = ws_fed_token_type
        if ws_trust_version is not None:
            self.ws_trust_version = ws_trust_version
        if enabled_profiles is not None:
            self.enabled_profiles = enabled_profiles
        if incoming_bindings is not None:
            self.incoming_bindings = incoming_bindings
        if message_customizations is not None:
            self.message_customizations = message_customizations
        if url_whitelist_entries is not None:
            self.url_whitelist_entries = url_whitelist_entries
        if artifact is not None:
            self.artifact = artifact
        if slo_service_endpoints is not None:
            self.slo_service_endpoints = slo_service_endpoints
        if default_target_url is not None:
            self.default_target_url = default_target_url
        if always_sign_artifact_response is not None:
            self.always_sign_artifact_response = always_sign_artifact_response
        if sso_application_endpoint is not None:
            self.sso_application_endpoint = sso_application_endpoint
        self.sso_service_endpoints = sso_service_endpoints
        if sp_saml_identity_mapping is not None:
            self.sp_saml_identity_mapping = sp_saml_identity_mapping
        if sp_ws_fed_identity_mapping is not None:
            self.sp_ws_fed_identity_mapping = sp_ws_fed_identity_mapping
        if sign_response_as_required is not None:
            self.sign_response_as_required = sign_response_as_required
        if sign_assertions is not None:
            self.sign_assertions = sign_assertions
        if require_signed_authn_requests is not None:
            self.require_signed_authn_requests = require_signed_authn_requests
        self.encryption_policy = encryption_policy
        self.attribute_contract = attribute_contract
        self.adapter_mappings = adapter_mappings
        if authentication_policy_contract_assertion_mappings is not None:
            self.authentication_policy_contract_assertion_mappings = authentication_policy_contract_assertion_mappings
        self.assertion_lifetime = assertion_lifetime

    @property
    def protocol(self):
        """Gets the protocol of this SpBrowserSso.  # noqa: E501

        The browser-based SSO protocol to use.  # noqa: E501

        :return: The protocol of this SpBrowserSso.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this SpBrowserSso.

        The browser-based SSO protocol to use.  # noqa: E501

        :param protocol: The protocol of this SpBrowserSso.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501
        allowed_values = ["SAML20", "WSFED", "SAML11", "SAML10", "OIDC"]  # noqa: E501
        if (self._configuration.client_side_validation and
                protocol not in allowed_values):
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def ws_fed_token_type(self):
        """Gets the ws_fed_token_type of this SpBrowserSso.  # noqa: E501

        The WS-Federation Token Type to use.  # noqa: E501

        :return: The ws_fed_token_type of this SpBrowserSso.  # noqa: E501
        :rtype: str
        """
        return self._ws_fed_token_type

    @ws_fed_token_type.setter
    def ws_fed_token_type(self, ws_fed_token_type):
        """Sets the ws_fed_token_type of this SpBrowserSso.

        The WS-Federation Token Type to use.  # noqa: E501

        :param ws_fed_token_type: The ws_fed_token_type of this SpBrowserSso.  # noqa: E501
        :type: str
        """
        allowed_values = ["SAML11", "SAML20", "JWT"]  # noqa: E501
        if (self._configuration.client_side_validation and
                ws_fed_token_type not in allowed_values):
            raise ValueError(
                "Invalid value for `ws_fed_token_type` ({0}), must be one of {1}"  # noqa: E501
                .format(ws_fed_token_type, allowed_values)
            )

        self._ws_fed_token_type = ws_fed_token_type

    @property
    def ws_trust_version(self):
        """Gets the ws_trust_version of this SpBrowserSso.  # noqa: E501

        The WS-Trust version for a WS-Federation connection. The default version is WSTRUST12.  # noqa: E501

        :return: The ws_trust_version of this SpBrowserSso.  # noqa: E501
        :rtype: str
        """
        return self._ws_trust_version

    @ws_trust_version.setter
    def ws_trust_version(self, ws_trust_version):
        """Sets the ws_trust_version of this SpBrowserSso.

        The WS-Trust version for a WS-Federation connection. The default version is WSTRUST12.  # noqa: E501

        :param ws_trust_version: The ws_trust_version of this SpBrowserSso.  # noqa: E501
        :type: str
        """
        allowed_values = ["WSTRUST12", "WSTRUST13"]  # noqa: E501
        if (self._configuration.client_side_validation and
                ws_trust_version not in allowed_values):
            raise ValueError(
                "Invalid value for `ws_trust_version` ({0}), must be one of {1}"  # noqa: E501
                .format(ws_trust_version, allowed_values)
            )

        self._ws_trust_version = ws_trust_version

    @property
    def enabled_profiles(self):
        """Gets the enabled_profiles of this SpBrowserSso.  # noqa: E501

        The profiles that are enabled for browser-based SSO. SAML 2.0 supports all profiles whereas SAML 1.x IdP connections support both IdP and SP (non-standard) initiated SSO. This is required for SAMLx.x Connections.   # noqa: E501

        :return: The enabled_profiles of this SpBrowserSso.  # noqa: E501
        :rtype: list[str]
        """
        return self._enabled_profiles

    @enabled_profiles.setter
    def enabled_profiles(self, enabled_profiles):
        """Sets the enabled_profiles of this SpBrowserSso.

        The profiles that are enabled for browser-based SSO. SAML 2.0 supports all profiles whereas SAML 1.x IdP connections support both IdP and SP (non-standard) initiated SSO. This is required for SAMLx.x Connections.   # noqa: E501

        :param enabled_profiles: The enabled_profiles of this SpBrowserSso.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["IDP_INITIATED_SSO", "SP_INITIATED_SSO", "IDP_INITIATED_SLO", "SP_INITIATED_SLO"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(enabled_profiles).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `enabled_profiles` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(enabled_profiles) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._enabled_profiles = enabled_profiles

    @property
    def incoming_bindings(self):
        """Gets the incoming_bindings of this SpBrowserSso.  # noqa: E501

        The SAML bindings that are enabled for browser-based SSO. This is required for SAML 2.0 connections when the enabled profiles contain the SP-initiated SSO profile or either SLO profile. For SAML 1.x based connections, it is not used for SP Connections and it is optional for IdP Connections.  # noqa: E501

        :return: The incoming_bindings of this SpBrowserSso.  # noqa: E501
        :rtype: list[str]
        """
        return self._incoming_bindings

    @incoming_bindings.setter
    def incoming_bindings(self, incoming_bindings):
        """Sets the incoming_bindings of this SpBrowserSso.

        The SAML bindings that are enabled for browser-based SSO. This is required for SAML 2.0 connections when the enabled profiles contain the SP-initiated SSO profile or either SLO profile. For SAML 1.x based connections, it is not used for SP Connections and it is optional for IdP Connections.  # noqa: E501

        :param incoming_bindings: The incoming_bindings of this SpBrowserSso.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ARTIFACT", "POST", "REDIRECT", "SOAP"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(incoming_bindings).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `incoming_bindings` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(incoming_bindings) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._incoming_bindings = incoming_bindings

    @property
    def message_customizations(self):
        """Gets the message_customizations of this SpBrowserSso.  # noqa: E501

        The message customizations for browser-based SSO. Depending on server settings, connection type, and protocol this may or may not be supported.  # noqa: E501

        :return: The message_customizations of this SpBrowserSso.  # noqa: E501
        :rtype: list[ProtocolMessageCustomization]
        """
        return self._message_customizations

    @message_customizations.setter
    def message_customizations(self, message_customizations):
        """Sets the message_customizations of this SpBrowserSso.

        The message customizations for browser-based SSO. Depending on server settings, connection type, and protocol this may or may not be supported.  # noqa: E501

        :param message_customizations: The message_customizations of this SpBrowserSso.  # noqa: E501
        :type: list[ProtocolMessageCustomization]
        """

        self._message_customizations = message_customizations

    @property
    def url_whitelist_entries(self):
        """Gets the url_whitelist_entries of this SpBrowserSso.  # noqa: E501

        For WS-Federation connections, a whitelist of additional allowed domains and paths used to validate wreply for SLO, if enabled.  # noqa: E501

        :return: The url_whitelist_entries of this SpBrowserSso.  # noqa: E501
        :rtype: list[UrlWhitelistEntry]
        """
        return self._url_whitelist_entries

    @url_whitelist_entries.setter
    def url_whitelist_entries(self, url_whitelist_entries):
        """Sets the url_whitelist_entries of this SpBrowserSso.

        For WS-Federation connections, a whitelist of additional allowed domains and paths used to validate wreply for SLO, if enabled.  # noqa: E501

        :param url_whitelist_entries: The url_whitelist_entries of this SpBrowserSso.  # noqa: E501
        :type: list[UrlWhitelistEntry]
        """

        self._url_whitelist_entries = url_whitelist_entries

    @property
    def artifact(self):
        """Gets the artifact of this SpBrowserSso.  # noqa: E501

        The settings for an artifact binding.  # noqa: E501

        :return: The artifact of this SpBrowserSso.  # noqa: E501
        :rtype: ArtifactSettings
        """
        return self._artifact

    @artifact.setter
    def artifact(self, artifact):
        """Sets the artifact of this SpBrowserSso.

        The settings for an artifact binding.  # noqa: E501

        :param artifact: The artifact of this SpBrowserSso.  # noqa: E501
        :type: ArtifactSettings
        """

        self._artifact = artifact

    @property
    def slo_service_endpoints(self):
        """Gets the slo_service_endpoints of this SpBrowserSso.  # noqa: E501

        A list of possible endpoints to send SLO requests and responses.  # noqa: E501

        :return: The slo_service_endpoints of this SpBrowserSso.  # noqa: E501
        :rtype: list[SloServiceEndpoint]
        """
        return self._slo_service_endpoints

    @slo_service_endpoints.setter
    def slo_service_endpoints(self, slo_service_endpoints):
        """Sets the slo_service_endpoints of this SpBrowserSso.

        A list of possible endpoints to send SLO requests and responses.  # noqa: E501

        :param slo_service_endpoints: The slo_service_endpoints of this SpBrowserSso.  # noqa: E501
        :type: list[SloServiceEndpoint]
        """

        self._slo_service_endpoints = slo_service_endpoints

    @property
    def default_target_url(self):
        """Gets the default_target_url of this SpBrowserSso.  # noqa: E501

        Default Target URL for SAML1.x connections. For SP connections, this default URL represents the destination on the SP where the user will be directed. For IdP connections, entering a URL in the Default Target URL field overrides the SP Default URL SSO setting.  # noqa: E501

        :return: The default_target_url of this SpBrowserSso.  # noqa: E501
        :rtype: str
        """
        return self._default_target_url

    @default_target_url.setter
    def default_target_url(self, default_target_url):
        """Sets the default_target_url of this SpBrowserSso.

        Default Target URL for SAML1.x connections. For SP connections, this default URL represents the destination on the SP where the user will be directed. For IdP connections, entering a URL in the Default Target URL field overrides the SP Default URL SSO setting.  # noqa: E501

        :param default_target_url: The default_target_url of this SpBrowserSso.  # noqa: E501
        :type: str
        """

        self._default_target_url = default_target_url

    @property
    def always_sign_artifact_response(self):
        """Gets the always_sign_artifact_response of this SpBrowserSso.  # noqa: E501

        Specify to always sign the SAML ArtifactResponse.  # noqa: E501

        :return: The always_sign_artifact_response of this SpBrowserSso.  # noqa: E501
        :rtype: bool
        """
        return self._always_sign_artifact_response

    @always_sign_artifact_response.setter
    def always_sign_artifact_response(self, always_sign_artifact_response):
        """Sets the always_sign_artifact_response of this SpBrowserSso.

        Specify to always sign the SAML ArtifactResponse.  # noqa: E501

        :param always_sign_artifact_response: The always_sign_artifact_response of this SpBrowserSso.  # noqa: E501
        :type: bool
        """

        self._always_sign_artifact_response = always_sign_artifact_response

    @property
    def sso_application_endpoint(self):
        """Gets the sso_application_endpoint of this SpBrowserSso.  # noqa: E501

        Application endpoint that can be used to invoke single sign-on (SSO) for the connection. This is a read-only parameter.  # noqa: E501

        :return: The sso_application_endpoint of this SpBrowserSso.  # noqa: E501
        :rtype: str
        """
        return self._sso_application_endpoint

    @sso_application_endpoint.setter
    def sso_application_endpoint(self, sso_application_endpoint):
        """Sets the sso_application_endpoint of this SpBrowserSso.

        Application endpoint that can be used to invoke single sign-on (SSO) for the connection. This is a read-only parameter.  # noqa: E501

        :param sso_application_endpoint: The sso_application_endpoint of this SpBrowserSso.  # noqa: E501
        :type: str
        """

        self._sso_application_endpoint = sso_application_endpoint

    @property
    def sso_service_endpoints(self):
        """Gets the sso_service_endpoints of this SpBrowserSso.  # noqa: E501

        A list of possible endpoints to send assertions to.  # noqa: E501

        :return: The sso_service_endpoints of this SpBrowserSso.  # noqa: E501
        :rtype: list[SpSsoServiceEndpoint]
        """
        return self._sso_service_endpoints

    @sso_service_endpoints.setter
    def sso_service_endpoints(self, sso_service_endpoints):
        """Sets the sso_service_endpoints of this SpBrowserSso.

        A list of possible endpoints to send assertions to.  # noqa: E501

        :param sso_service_endpoints: The sso_service_endpoints of this SpBrowserSso.  # noqa: E501
        :type: list[SpSsoServiceEndpoint]
        """
        if self._configuration.client_side_validation and sso_service_endpoints is None:
            raise ValueError("Invalid value for `sso_service_endpoints`, must not be `None`")  # noqa: E501

        self._sso_service_endpoints = sso_service_endpoints

    @property
    def sp_saml_identity_mapping(self):
        """Gets the sp_saml_identity_mapping of this SpBrowserSso.  # noqa: E501

        Process in which users authenticated by the IdP are associated with user accounts local to the SP.  # noqa: E501

        :return: The sp_saml_identity_mapping of this SpBrowserSso.  # noqa: E501
        :rtype: str
        """
        return self._sp_saml_identity_mapping

    @sp_saml_identity_mapping.setter
    def sp_saml_identity_mapping(self, sp_saml_identity_mapping):
        """Sets the sp_saml_identity_mapping of this SpBrowserSso.

        Process in which users authenticated by the IdP are associated with user accounts local to the SP.  # noqa: E501

        :param sp_saml_identity_mapping: The sp_saml_identity_mapping of this SpBrowserSso.  # noqa: E501
        :type: str
        """
        allowed_values = ["PSEUDONYM", "STANDARD", "TRANSIENT"]  # noqa: E501
        if (self._configuration.client_side_validation and
                sp_saml_identity_mapping not in allowed_values):
            raise ValueError(
                "Invalid value for `sp_saml_identity_mapping` ({0}), must be one of {1}"  # noqa: E501
                .format(sp_saml_identity_mapping, allowed_values)
            )

        self._sp_saml_identity_mapping = sp_saml_identity_mapping

    @property
    def sp_ws_fed_identity_mapping(self):
        """Gets the sp_ws_fed_identity_mapping of this SpBrowserSso.  # noqa: E501

        Process in which users authenticated by the IdP are associated with user accounts local to the SP for WS-Federation connection types.  # noqa: E501

        :return: The sp_ws_fed_identity_mapping of this SpBrowserSso.  # noqa: E501
        :rtype: str
        """
        return self._sp_ws_fed_identity_mapping

    @sp_ws_fed_identity_mapping.setter
    def sp_ws_fed_identity_mapping(self, sp_ws_fed_identity_mapping):
        """Sets the sp_ws_fed_identity_mapping of this SpBrowserSso.

        Process in which users authenticated by the IdP are associated with user accounts local to the SP for WS-Federation connection types.  # noqa: E501

        :param sp_ws_fed_identity_mapping: The sp_ws_fed_identity_mapping of this SpBrowserSso.  # noqa: E501
        :type: str
        """
        allowed_values = ["EMAIL_ADDRESS", "USER_PRINCIPLE_NAME", "COMMON_NAME"]  # noqa: E501
        if (self._configuration.client_side_validation and
                sp_ws_fed_identity_mapping not in allowed_values):
            raise ValueError(
                "Invalid value for `sp_ws_fed_identity_mapping` ({0}), must be one of {1}"  # noqa: E501
                .format(sp_ws_fed_identity_mapping, allowed_values)
            )

        self._sp_ws_fed_identity_mapping = sp_ws_fed_identity_mapping

    @property
    def sign_response_as_required(self):
        """Gets the sign_response_as_required of this SpBrowserSso.  # noqa: E501

        Sign SAML Response as required by the associated binding and encryption policy. Applicable to SAML2.0 only and is defaulted to true. It can be set to false only on SAML2.0 connections when signAssertions is set to true.  # noqa: E501

        :return: The sign_response_as_required of this SpBrowserSso.  # noqa: E501
        :rtype: bool
        """
        return self._sign_response_as_required

    @sign_response_as_required.setter
    def sign_response_as_required(self, sign_response_as_required):
        """Sets the sign_response_as_required of this SpBrowserSso.

        Sign SAML Response as required by the associated binding and encryption policy. Applicable to SAML2.0 only and is defaulted to true. It can be set to false only on SAML2.0 connections when signAssertions is set to true.  # noqa: E501

        :param sign_response_as_required: The sign_response_as_required of this SpBrowserSso.  # noqa: E501
        :type: bool
        """

        self._sign_response_as_required = sign_response_as_required

    @property
    def sign_assertions(self):
        """Gets the sign_assertions of this SpBrowserSso.  # noqa: E501

        Always sign the SAML Assertion.  # noqa: E501

        :return: The sign_assertions of this SpBrowserSso.  # noqa: E501
        :rtype: bool
        """
        return self._sign_assertions

    @sign_assertions.setter
    def sign_assertions(self, sign_assertions):
        """Sets the sign_assertions of this SpBrowserSso.

        Always sign the SAML Assertion.  # noqa: E501

        :param sign_assertions: The sign_assertions of this SpBrowserSso.  # noqa: E501
        :type: bool
        """

        self._sign_assertions = sign_assertions

    @property
    def require_signed_authn_requests(self):
        """Gets the require_signed_authn_requests of this SpBrowserSso.  # noqa: E501

        Require AuthN requests to be signed when received via the POST or Redirect bindings.  # noqa: E501

        :return: The require_signed_authn_requests of this SpBrowserSso.  # noqa: E501
        :rtype: bool
        """
        return self._require_signed_authn_requests

    @require_signed_authn_requests.setter
    def require_signed_authn_requests(self, require_signed_authn_requests):
        """Sets the require_signed_authn_requests of this SpBrowserSso.

        Require AuthN requests to be signed when received via the POST or Redirect bindings.  # noqa: E501

        :param require_signed_authn_requests: The require_signed_authn_requests of this SpBrowserSso.  # noqa: E501
        :type: bool
        """

        self._require_signed_authn_requests = require_signed_authn_requests

    @property
    def encryption_policy(self):
        """Gets the encryption_policy of this SpBrowserSso.  # noqa: E501

        The SAML 2.0 encryption policy for browser-based SSO. Required for SAML 2.0 connections.  # noqa: E501

        :return: The encryption_policy of this SpBrowserSso.  # noqa: E501
        :rtype: EncryptionPolicy
        """
        return self._encryption_policy

    @encryption_policy.setter
    def encryption_policy(self, encryption_policy):
        """Sets the encryption_policy of this SpBrowserSso.

        The SAML 2.0 encryption policy for browser-based SSO. Required for SAML 2.0 connections.  # noqa: E501

        :param encryption_policy: The encryption_policy of this SpBrowserSso.  # noqa: E501
        :type: EncryptionPolicy
        """
        if self._configuration.client_side_validation and encryption_policy is None:
            raise ValueError("Invalid value for `encryption_policy`, must not be `None`")  # noqa: E501

        self._encryption_policy = encryption_policy

    @property
    def attribute_contract(self):
        """Gets the attribute_contract of this SpBrowserSso.  # noqa: E501

        A set of user attributes that the IdP sends in the SAML assertion.  # noqa: E501

        :return: The attribute_contract of this SpBrowserSso.  # noqa: E501
        :rtype: SpBrowserSsoAttributeContract
        """
        return self._attribute_contract

    @attribute_contract.setter
    def attribute_contract(self, attribute_contract):
        """Sets the attribute_contract of this SpBrowserSso.

        A set of user attributes that the IdP sends in the SAML assertion.  # noqa: E501

        :param attribute_contract: The attribute_contract of this SpBrowserSso.  # noqa: E501
        :type: SpBrowserSsoAttributeContract
        """
        if self._configuration.client_side_validation and attribute_contract is None:
            raise ValueError("Invalid value for `attribute_contract`, must not be `None`")  # noqa: E501

        self._attribute_contract = attribute_contract

    @property
    def adapter_mappings(self):
        """Gets the adapter_mappings of this SpBrowserSso.  # noqa: E501

        A list of adapters that map to outgoing assertions.  # noqa: E501

        :return: The adapter_mappings of this SpBrowserSso.  # noqa: E501
        :rtype: list[IdpAdapterAssertionMapping]
        """
        return self._adapter_mappings

    @adapter_mappings.setter
    def adapter_mappings(self, adapter_mappings):
        """Sets the adapter_mappings of this SpBrowserSso.

        A list of adapters that map to outgoing assertions.  # noqa: E501

        :param adapter_mappings: The adapter_mappings of this SpBrowserSso.  # noqa: E501
        :type: list[IdpAdapterAssertionMapping]
        """
        if self._configuration.client_side_validation and adapter_mappings is None:
            raise ValueError("Invalid value for `adapter_mappings`, must not be `None`")  # noqa: E501

        self._adapter_mappings = adapter_mappings

    @property
    def authentication_policy_contract_assertion_mappings(self):
        """Gets the authentication_policy_contract_assertion_mappings of this SpBrowserSso.  # noqa: E501

        A list of authentication policy contracts that map to outgoing assertions.  # noqa: E501

        :return: The authentication_policy_contract_assertion_mappings of this SpBrowserSso.  # noqa: E501
        :rtype: list[AuthenticationPolicyContractAssertionMapping]
        """
        return self._authentication_policy_contract_assertion_mappings

    @authentication_policy_contract_assertion_mappings.setter
    def authentication_policy_contract_assertion_mappings(self, authentication_policy_contract_assertion_mappings):
        """Sets the authentication_policy_contract_assertion_mappings of this SpBrowserSso.

        A list of authentication policy contracts that map to outgoing assertions.  # noqa: E501

        :param authentication_policy_contract_assertion_mappings: The authentication_policy_contract_assertion_mappings of this SpBrowserSso.  # noqa: E501
        :type: list[AuthenticationPolicyContractAssertionMapping]
        """

        self._authentication_policy_contract_assertion_mappings = authentication_policy_contract_assertion_mappings

    @property
    def assertion_lifetime(self):
        """Gets the assertion_lifetime of this SpBrowserSso.  # noqa: E501

        The timeframe of validity before and after the issuance of the assertion.  # noqa: E501

        :return: The assertion_lifetime of this SpBrowserSso.  # noqa: E501
        :rtype: AssertionLifetime
        """
        return self._assertion_lifetime

    @assertion_lifetime.setter
    def assertion_lifetime(self, assertion_lifetime):
        """Sets the assertion_lifetime of this SpBrowserSso.

        The timeframe of validity before and after the issuance of the assertion.  # noqa: E501

        :param assertion_lifetime: The assertion_lifetime of this SpBrowserSso.  # noqa: E501
        :type: AssertionLifetime
        """
        if self._configuration.client_side_validation and assertion_lifetime is None:
            raise ValueError("Invalid value for `assertion_lifetime`, must not be `None`")  # noqa: E501

        self._assertion_lifetime = assertion_lifetime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpBrowserSso, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpBrowserSso):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpBrowserSso):
            return True

        return self.to_dict() != other.to_dict()
