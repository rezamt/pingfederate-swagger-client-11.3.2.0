# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SaasPluginDescriptor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'description': 'str',
        'config_descriptor': 'PluginConfigDescriptor',
        'saas_plugin_field_info_descriptors': 'list[SaasPluginFieldInfoDescriptor]'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'config_descriptor': 'configDescriptor',
        'saas_plugin_field_info_descriptors': 'saasPluginFieldInfoDescriptors'
    }

    def __init__(self, id=None, description=None, config_descriptor=None, saas_plugin_field_info_descriptors=None, _configuration=None):  # noqa: E501
        """SaasPluginDescriptor - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._description = None
        self._config_descriptor = None
        self._saas_plugin_field_info_descriptors = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if config_descriptor is not None:
            self.config_descriptor = config_descriptor
        if saas_plugin_field_info_descriptors is not None:
            self.saas_plugin_field_info_descriptors = saas_plugin_field_info_descriptors

    @property
    def id(self):
        """Gets the id of this SaasPluginDescriptor.  # noqa: E501

        The SaaS plugin type.  # noqa: E501

        :return: The id of this SaasPluginDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SaasPluginDescriptor.

        The SaaS plugin type.  # noqa: E501

        :param id: The id of this SaasPluginDescriptor.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this SaasPluginDescriptor.  # noqa: E501

        The SaaS plugin description.  # noqa: E501

        :return: The description of this SaasPluginDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SaasPluginDescriptor.

        The SaaS plugin description.  # noqa: E501

        :param description: The description of this SaasPluginDescriptor.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def config_descriptor(self):
        """Gets the config_descriptor of this SaasPluginDescriptor.  # noqa: E501

        The plugin configuration that includes information to access the target service provider.  # noqa: E501

        :return: The config_descriptor of this SaasPluginDescriptor.  # noqa: E501
        :rtype: PluginConfigDescriptor
        """
        return self._config_descriptor

    @config_descriptor.setter
    def config_descriptor(self, config_descriptor):
        """Sets the config_descriptor of this SaasPluginDescriptor.

        The plugin configuration that includes information to access the target service provider.  # noqa: E501

        :param config_descriptor: The config_descriptor of this SaasPluginDescriptor.  # noqa: E501
        :type: PluginConfigDescriptor
        """

        self._config_descriptor = config_descriptor

    @property
    def saas_plugin_field_info_descriptors(self):
        """Gets the saas_plugin_field_info_descriptors of this SaasPluginDescriptor.  # noqa: E501

        The SaaS plugin attribute list for mapping from the local data store into Fields specified by the service provide.  # noqa: E501

        :return: The saas_plugin_field_info_descriptors of this SaasPluginDescriptor.  # noqa: E501
        :rtype: list[SaasPluginFieldInfoDescriptor]
        """
        return self._saas_plugin_field_info_descriptors

    @saas_plugin_field_info_descriptors.setter
    def saas_plugin_field_info_descriptors(self, saas_plugin_field_info_descriptors):
        """Sets the saas_plugin_field_info_descriptors of this SaasPluginDescriptor.

        The SaaS plugin attribute list for mapping from the local data store into Fields specified by the service provide.  # noqa: E501

        :param saas_plugin_field_info_descriptors: The saas_plugin_field_info_descriptors of this SaasPluginDescriptor.  # noqa: E501
        :type: list[SaasPluginFieldInfoDescriptor]
        """

        self._saas_plugin_field_info_descriptors = saas_plugin_field_info_descriptors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SaasPluginDescriptor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaasPluginDescriptor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SaasPluginDescriptor):
            return True

        return self.to_dict() != other.to_dict()
