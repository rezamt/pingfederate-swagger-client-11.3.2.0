# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AccessTokenManager(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute_contract': 'AccessTokenAttributeContract',
        'selection_settings': 'AtmSelectionSettings',
        'access_control_settings': 'AtmAccessControlSettings',
        'session_validation_settings': 'SessionValidationSettings',
        'sequence_number': 'int'
    }

    attribute_map = {
        'attribute_contract': 'attributeContract',
        'selection_settings': 'selectionSettings',
        'access_control_settings': 'accessControlSettings',
        'session_validation_settings': 'sessionValidationSettings',
        'sequence_number': 'sequenceNumber'
    }

    def __init__(self, attribute_contract=None, selection_settings=None, access_control_settings=None, session_validation_settings=None, sequence_number=None, _configuration=None):  # noqa: E501
        """AccessTokenManager - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._attribute_contract = None
        self._selection_settings = None
        self._access_control_settings = None
        self._session_validation_settings = None
        self._sequence_number = None
        self.discriminator = None

        if attribute_contract is not None:
            self.attribute_contract = attribute_contract
        if selection_settings is not None:
            self.selection_settings = selection_settings
        if access_control_settings is not None:
            self.access_control_settings = access_control_settings
        if session_validation_settings is not None:
            self.session_validation_settings = session_validation_settings
        if sequence_number is not None:
            self.sequence_number = sequence_number

    @property
    def attribute_contract(self):
        """Gets the attribute_contract of this AccessTokenManager.  # noqa: E501

        The list of attributes that will be added to an access token.  # noqa: E501

        :return: The attribute_contract of this AccessTokenManager.  # noqa: E501
        :rtype: AccessTokenAttributeContract
        """
        return self._attribute_contract

    @attribute_contract.setter
    def attribute_contract(self, attribute_contract):
        """Sets the attribute_contract of this AccessTokenManager.

        The list of attributes that will be added to an access token.  # noqa: E501

        :param attribute_contract: The attribute_contract of this AccessTokenManager.  # noqa: E501
        :type: AccessTokenAttributeContract
        """

        self._attribute_contract = attribute_contract

    @property
    def selection_settings(self):
        """Gets the selection_settings of this AccessTokenManager.  # noqa: E501

        Settings which determine how this token manager can be selected for use by an OAuth request.  # noqa: E501

        :return: The selection_settings of this AccessTokenManager.  # noqa: E501
        :rtype: AtmSelectionSettings
        """
        return self._selection_settings

    @selection_settings.setter
    def selection_settings(self, selection_settings):
        """Sets the selection_settings of this AccessTokenManager.

        Settings which determine how this token manager can be selected for use by an OAuth request.  # noqa: E501

        :param selection_settings: The selection_settings of this AccessTokenManager.  # noqa: E501
        :type: AtmSelectionSettings
        """

        self._selection_settings = selection_settings

    @property
    def access_control_settings(self):
        """Gets the access_control_settings of this AccessTokenManager.  # noqa: E501

        Settings which determine which clients may access this token manager.  # noqa: E501

        :return: The access_control_settings of this AccessTokenManager.  # noqa: E501
        :rtype: AtmAccessControlSettings
        """
        return self._access_control_settings

    @access_control_settings.setter
    def access_control_settings(self, access_control_settings):
        """Sets the access_control_settings of this AccessTokenManager.

        Settings which determine which clients may access this token manager.  # noqa: E501

        :param access_control_settings: The access_control_settings of this AccessTokenManager.  # noqa: E501
        :type: AtmAccessControlSettings
        """

        self._access_control_settings = access_control_settings

    @property
    def session_validation_settings(self):
        """Gets the session_validation_settings of this AccessTokenManager.  # noqa: E501

        Settings which determine how the user session is associated with the access token.  # noqa: E501

        :return: The session_validation_settings of this AccessTokenManager.  # noqa: E501
        :rtype: SessionValidationSettings
        """
        return self._session_validation_settings

    @session_validation_settings.setter
    def session_validation_settings(self, session_validation_settings):
        """Sets the session_validation_settings of this AccessTokenManager.

        Settings which determine how the user session is associated with the access token.  # noqa: E501

        :param session_validation_settings: The session_validation_settings of this AccessTokenManager.  # noqa: E501
        :type: SessionValidationSettings
        """

        self._session_validation_settings = session_validation_settings

    @property
    def sequence_number(self):
        """Gets the sequence_number of this AccessTokenManager.  # noqa: E501

        Number added to an access token to identify which Access Token Manager issued the token.  # noqa: E501

        :return: The sequence_number of this AccessTokenManager.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this AccessTokenManager.

        Number added to an access token to identify which Access Token Manager issued the token.  # noqa: E501

        :param sequence_number: The sequence_number of this AccessTokenManager.  # noqa: E501
        :type: int
        """

        self._sequence_number = sequence_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessTokenManager, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessTokenManager):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccessTokenManager):
            return True

        return self.to_dict() != other.to_dict()
