# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ConfigStoreSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'string_value': 'str',
        'list_value': 'list[str]',
        'map_value': 'dict(str, str)',
        'type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'string_value': 'stringValue',
        'list_value': 'listValue',
        'map_value': 'mapValue',
        'type': 'type'
    }

    def __init__(self, id=None, string_value=None, list_value=None, map_value=None, type=None, _configuration=None):  # noqa: E501
        """ConfigStoreSetting - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._string_value = None
        self._list_value = None
        self._map_value = None
        self._type = None
        self.discriminator = None

        self.id = id
        if string_value is not None:
            self.string_value = string_value
        if list_value is not None:
            self.list_value = list_value
        if map_value is not None:
            self.map_value = map_value
        self.type = type

    @property
    def id(self):
        """Gets the id of this ConfigStoreSetting.  # noqa: E501

        The id of the configuration setting.  # noqa: E501

        :return: The id of this ConfigStoreSetting.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConfigStoreSetting.

        The id of the configuration setting.  # noqa: E501

        :param id: The id of this ConfigStoreSetting.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def string_value(self):
        """Gets the string_value of this ConfigStoreSetting.  # noqa: E501

        The value of the configuration setting. This is used when the setting has a single string value.  # noqa: E501

        :return: The string_value of this ConfigStoreSetting.  # noqa: E501
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this ConfigStoreSetting.

        The value of the configuration setting. This is used when the setting has a single string value.  # noqa: E501

        :param string_value: The string_value of this ConfigStoreSetting.  # noqa: E501
        :type: str
        """

        self._string_value = string_value

    @property
    def list_value(self):
        """Gets the list_value of this ConfigStoreSetting.  # noqa: E501

        The list of values for the configuration setting. This is used when the setting has a list of string values.  # noqa: E501

        :return: The list_value of this ConfigStoreSetting.  # noqa: E501
        :rtype: list[str]
        """
        return self._list_value

    @list_value.setter
    def list_value(self, list_value):
        """Sets the list_value of this ConfigStoreSetting.

        The list of values for the configuration setting. This is used when the setting has a list of string values.  # noqa: E501

        :param list_value: The list_value of this ConfigStoreSetting.  # noqa: E501
        :type: list[str]
        """

        self._list_value = list_value

    @property
    def map_value(self):
        """Gets the map_value of this ConfigStoreSetting.  # noqa: E501

        The map of key/value pairs for the configuration setting. This is used when the setting has a map of string keys and values.  # noqa: E501

        :return: The map_value of this ConfigStoreSetting.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._map_value

    @map_value.setter
    def map_value(self, map_value):
        """Sets the map_value of this ConfigStoreSetting.

        The map of key/value pairs for the configuration setting. This is used when the setting has a map of string keys and values.  # noqa: E501

        :param map_value: The map_value of this ConfigStoreSetting.  # noqa: E501
        :type: dict(str, str)
        """

        self._map_value = map_value

    @property
    def type(self):
        """Gets the type of this ConfigStoreSetting.  # noqa: E501

        The type of configuration setting. This could be a single string, list of strings, or map of string keys and values.  # noqa: E501

        :return: The type of this ConfigStoreSetting.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigStoreSetting.

        The type of configuration setting. This could be a single string, list of strings, or map of string keys and values.  # noqa: E501

        :param type: The type of this ConfigStoreSetting.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["STRING", "LIST", "MAP"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigStoreSetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigStoreSetting):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigStoreSetting):
            return True

        return self.to_dict() != other.to_dict()
