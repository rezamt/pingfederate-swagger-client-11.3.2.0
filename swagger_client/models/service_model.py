# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ServiceModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'shared_secret': 'str',
        'encrypted_shared_secret': 'str'
    }

    attribute_map = {
        'id': 'id',
        'shared_secret': 'sharedSecret',
        'encrypted_shared_secret': 'encryptedSharedSecret'
    }

    def __init__(self, id=None, shared_secret=None, encrypted_shared_secret=None, _configuration=None):  # noqa: E501
        """ServiceModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._shared_secret = None
        self._encrypted_shared_secret = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if shared_secret is not None:
            self.shared_secret = shared_secret
        if encrypted_shared_secret is not None:
            self.encrypted_shared_secret = encrypted_shared_secret

    @property
    def id(self):
        """Gets the id of this ServiceModel.  # noqa: E501

        Id of the service.  # noqa: E501

        :return: The id of this ServiceModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceModel.

        Id of the service.  # noqa: E501

        :param id: The id of this ServiceModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def shared_secret(self):
        """Gets the shared_secret of this ServiceModel.  # noqa: E501

        Shared secret for the service.  # noqa: E501

        :return: The shared_secret of this ServiceModel.  # noqa: E501
        :rtype: str
        """
        return self._shared_secret

    @shared_secret.setter
    def shared_secret(self, shared_secret):
        """Sets the shared_secret of this ServiceModel.

        Shared secret for the service.  # noqa: E501

        :param shared_secret: The shared_secret of this ServiceModel.  # noqa: E501
        :type: str
        """

        self._shared_secret = shared_secret

    @property
    def encrypted_shared_secret(self):
        """Gets the encrypted_shared_secret of this ServiceModel.  # noqa: E501

        Encrypted shared secret for the service.  # noqa: E501

        :return: The encrypted_shared_secret of this ServiceModel.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_shared_secret

    @encrypted_shared_secret.setter
    def encrypted_shared_secret(self, encrypted_shared_secret):
        """Sets the encrypted_shared_secret of this ServiceModel.

        Encrypted shared secret for the service.  # noqa: E501

        :param encrypted_shared_secret: The encrypted_shared_secret of this ServiceModel.  # noqa: E501
        :type: str
        """

        self._encrypted_shared_secret = encrypted_shared_secret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceModel):
            return True

        return self.to_dict() != other.to_dict()
