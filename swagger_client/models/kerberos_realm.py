# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class KerberosRealm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'kerberos_realm_name': 'str',
        'connection_type': 'str',
        'key_distribution_centers': 'list[str]',
        'kerberos_username': 'str',
        'kerberos_password': 'str',
        'kerberos_encrypted_password': 'str',
        'key_sets': 'list[KerberosKeySet]',
        'retain_previous_keys_on_password_change': 'bool',
        'suppress_domain_name_concatenation': 'bool',
        'ldap_gateway_data_store_ref': 'ResourceLink'
    }

    attribute_map = {
        'id': 'id',
        'kerberos_realm_name': 'kerberosRealmName',
        'connection_type': 'connectionType',
        'key_distribution_centers': 'keyDistributionCenters',
        'kerberos_username': 'kerberosUsername',
        'kerberos_password': 'kerberosPassword',
        'kerberos_encrypted_password': 'kerberosEncryptedPassword',
        'key_sets': 'keySets',
        'retain_previous_keys_on_password_change': 'retainPreviousKeysOnPasswordChange',
        'suppress_domain_name_concatenation': 'suppressDomainNameConcatenation',
        'ldap_gateway_data_store_ref': 'ldapGatewayDataStoreRef'
    }

    def __init__(self, id=None, kerberos_realm_name=None, connection_type=None, key_distribution_centers=None, kerberos_username=None, kerberos_password=None, kerberos_encrypted_password=None, key_sets=None, retain_previous_keys_on_password_change=None, suppress_domain_name_concatenation=None, ldap_gateway_data_store_ref=None, _configuration=None):  # noqa: E501
        """KerberosRealm - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._kerberos_realm_name = None
        self._connection_type = None
        self._key_distribution_centers = None
        self._kerberos_username = None
        self._kerberos_password = None
        self._kerberos_encrypted_password = None
        self._key_sets = None
        self._retain_previous_keys_on_password_change = None
        self._suppress_domain_name_concatenation = None
        self._ldap_gateway_data_store_ref = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.kerberos_realm_name = kerberos_realm_name
        if connection_type is not None:
            self.connection_type = connection_type
        if key_distribution_centers is not None:
            self.key_distribution_centers = key_distribution_centers
        if kerberos_username is not None:
            self.kerberos_username = kerberos_username
        if kerberos_password is not None:
            self.kerberos_password = kerberos_password
        if kerberos_encrypted_password is not None:
            self.kerberos_encrypted_password = kerberos_encrypted_password
        if key_sets is not None:
            self.key_sets = key_sets
        if retain_previous_keys_on_password_change is not None:
            self.retain_previous_keys_on_password_change = retain_previous_keys_on_password_change
        if suppress_domain_name_concatenation is not None:
            self.suppress_domain_name_concatenation = suppress_domain_name_concatenation
        if ldap_gateway_data_store_ref is not None:
            self.ldap_gateway_data_store_ref = ldap_gateway_data_store_ref

    @property
    def id(self):
        """Gets the id of this KerberosRealm.  # noqa: E501

        The persistent, unique ID for the Kerberos Realm. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified.  # noqa: E501

        :return: The id of this KerberosRealm.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this KerberosRealm.

        The persistent, unique ID for the Kerberos Realm. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified.  # noqa: E501

        :param id: The id of this KerberosRealm.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def kerberos_realm_name(self):
        """Gets the kerberos_realm_name of this KerberosRealm.  # noqa: E501

        The Domain/Realm name used for display in UI screens.  # noqa: E501

        :return: The kerberos_realm_name of this KerberosRealm.  # noqa: E501
        :rtype: str
        """
        return self._kerberos_realm_name

    @kerberos_realm_name.setter
    def kerberos_realm_name(self, kerberos_realm_name):
        """Sets the kerberos_realm_name of this KerberosRealm.

        The Domain/Realm name used for display in UI screens.  # noqa: E501

        :param kerberos_realm_name: The kerberos_realm_name of this KerberosRealm.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and kerberos_realm_name is None:
            raise ValueError("Invalid value for `kerberos_realm_name`, must not be `None`")  # noqa: E501

        self._kerberos_realm_name = kerberos_realm_name

    @property
    def connection_type(self):
        """Gets the connection_type of this KerberosRealm.  # noqa: E501

        Controls how PingFederate connects to the Active Directory/Kerberos Realm. The default is: \"DIRECT\".  # noqa: E501

        :return: The connection_type of this KerberosRealm.  # noqa: E501
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this KerberosRealm.

        Controls how PingFederate connects to the Active Directory/Kerberos Realm. The default is: \"DIRECT\".  # noqa: E501

        :param connection_type: The connection_type of this KerberosRealm.  # noqa: E501
        :type: str
        """
        allowed_values = ["DIRECT", "LDAP_GATEWAY"]  # noqa: E501
        if (self._configuration.client_side_validation and
                connection_type not in allowed_values):
            raise ValueError(
                "Invalid value for `connection_type` ({0}), must be one of {1}"  # noqa: E501
                .format(connection_type, allowed_values)
            )

        self._connection_type = connection_type

    @property
    def key_distribution_centers(self):
        """Gets the key_distribution_centers of this KerberosRealm.  # noqa: E501

        The Domain Controller/Key Distribution Center Host Action Names. Only applicable when 'connectionType' is \"DIRECT\".  # noqa: E501

        :return: The key_distribution_centers of this KerberosRealm.  # noqa: E501
        :rtype: list[str]
        """
        return self._key_distribution_centers

    @key_distribution_centers.setter
    def key_distribution_centers(self, key_distribution_centers):
        """Sets the key_distribution_centers of this KerberosRealm.

        The Domain Controller/Key Distribution Center Host Action Names. Only applicable when 'connectionType' is \"DIRECT\".  # noqa: E501

        :param key_distribution_centers: The key_distribution_centers of this KerberosRealm.  # noqa: E501
        :type: list[str]
        """

        self._key_distribution_centers = key_distribution_centers

    @property
    def kerberos_username(self):
        """Gets the kerberos_username of this KerberosRealm.  # noqa: E501

        The Domain/Realm username. Only required when 'connectionType' is \"DIRECT\".  # noqa: E501

        :return: The kerberos_username of this KerberosRealm.  # noqa: E501
        :rtype: str
        """
        return self._kerberos_username

    @kerberos_username.setter
    def kerberos_username(self, kerberos_username):
        """Sets the kerberos_username of this KerberosRealm.

        The Domain/Realm username. Only required when 'connectionType' is \"DIRECT\".  # noqa: E501

        :param kerberos_username: The kerberos_username of this KerberosRealm.  # noqa: E501
        :type: str
        """

        self._kerberos_username = kerberos_username

    @property
    def kerberos_password(self):
        """Gets the kerberos_password of this KerberosRealm.  # noqa: E501

        The Domain/Realm password. GETs will not return this attribute. To update this field, specify the new value in this attribute. Only applicable when 'connectionType' is \"DIRECT\".  # noqa: E501

        :return: The kerberos_password of this KerberosRealm.  # noqa: E501
        :rtype: str
        """
        return self._kerberos_password

    @kerberos_password.setter
    def kerberos_password(self, kerberos_password):
        """Sets the kerberos_password of this KerberosRealm.

        The Domain/Realm password. GETs will not return this attribute. To update this field, specify the new value in this attribute. Only applicable when 'connectionType' is \"DIRECT\".  # noqa: E501

        :param kerberos_password: The kerberos_password of this KerberosRealm.  # noqa: E501
        :type: str
        """

        self._kerberos_password = kerberos_password

    @property
    def kerberos_encrypted_password(self):
        """Gets the kerberos_encrypted_password of this KerberosRealm.  # noqa: E501

        For GET requests, this field contains the encrypted Domain/Realm password, if one exists. For POST and PUT requests, if you wish to reuse the existing password, this field should be passed back unchanged. Only applicable when 'connectionType' is \"DIRECT\".  # noqa: E501

        :return: The kerberos_encrypted_password of this KerberosRealm.  # noqa: E501
        :rtype: str
        """
        return self._kerberos_encrypted_password

    @kerberos_encrypted_password.setter
    def kerberos_encrypted_password(self, kerberos_encrypted_password):
        """Sets the kerberos_encrypted_password of this KerberosRealm.

        For GET requests, this field contains the encrypted Domain/Realm password, if one exists. For POST and PUT requests, if you wish to reuse the existing password, this field should be passed back unchanged. Only applicable when 'connectionType' is \"DIRECT\".  # noqa: E501

        :param kerberos_encrypted_password: The kerberos_encrypted_password of this KerberosRealm.  # noqa: E501
        :type: str
        """

        self._kerberos_encrypted_password = kerberos_encrypted_password

    @property
    def key_sets(self):
        """Gets the key_sets of this KerberosRealm.  # noqa: E501

        A list of key sets for validating Kerberos tickets. On POST or PUT, if 'retainPreviousKeysOnPasswordChange' is true, PingFederate automatically adds the key set for the current password to this list and removes expired key sets. If 'retainPreviousKeysOnPasswordChange' is false, this list is cleared. Only applicable when 'connectionType' is \"DIRECT\".  # noqa: E501

        :return: The key_sets of this KerberosRealm.  # noqa: E501
        :rtype: list[KerberosKeySet]
        """
        return self._key_sets

    @key_sets.setter
    def key_sets(self, key_sets):
        """Sets the key_sets of this KerberosRealm.

        A list of key sets for validating Kerberos tickets. On POST or PUT, if 'retainPreviousKeysOnPasswordChange' is true, PingFederate automatically adds the key set for the current password to this list and removes expired key sets. If 'retainPreviousKeysOnPasswordChange' is false, this list is cleared. Only applicable when 'connectionType' is \"DIRECT\".  # noqa: E501

        :param key_sets: The key_sets of this KerberosRealm.  # noqa: E501
        :type: list[KerberosKeySet]
        """

        self._key_sets = key_sets

    @property
    def retain_previous_keys_on_password_change(self):
        """Gets the retain_previous_keys_on_password_change of this KerberosRealm.  # noqa: E501

        Determines whether the previous encryption keys are retained when the password is updated. Retaining the previous keys allows existing Kerberos tickets to continue to be validated. The default is false. Only applicable when 'connectionType' is \"DIRECT\".  # noqa: E501

        :return: The retain_previous_keys_on_password_change of this KerberosRealm.  # noqa: E501
        :rtype: bool
        """
        return self._retain_previous_keys_on_password_change

    @retain_previous_keys_on_password_change.setter
    def retain_previous_keys_on_password_change(self, retain_previous_keys_on_password_change):
        """Sets the retain_previous_keys_on_password_change of this KerberosRealm.

        Determines whether the previous encryption keys are retained when the password is updated. Retaining the previous keys allows existing Kerberos tickets to continue to be validated. The default is false. Only applicable when 'connectionType' is \"DIRECT\".  # noqa: E501

        :param retain_previous_keys_on_password_change: The retain_previous_keys_on_password_change of this KerberosRealm.  # noqa: E501
        :type: bool
        """

        self._retain_previous_keys_on_password_change = retain_previous_keys_on_password_change

    @property
    def suppress_domain_name_concatenation(self):
        """Gets the suppress_domain_name_concatenation of this KerberosRealm.  # noqa: E501

        Controls whether the KDC hostnames and the realm name are concatenated in the auto-generated krb5.conf file. Default is false. Only applicable when 'connectionType' is \"DIRECT\".  # noqa: E501

        :return: The suppress_domain_name_concatenation of this KerberosRealm.  # noqa: E501
        :rtype: bool
        """
        return self._suppress_domain_name_concatenation

    @suppress_domain_name_concatenation.setter
    def suppress_domain_name_concatenation(self, suppress_domain_name_concatenation):
        """Sets the suppress_domain_name_concatenation of this KerberosRealm.

        Controls whether the KDC hostnames and the realm name are concatenated in the auto-generated krb5.conf file. Default is false. Only applicable when 'connectionType' is \"DIRECT\".  # noqa: E501

        :param suppress_domain_name_concatenation: The suppress_domain_name_concatenation of this KerberosRealm.  # noqa: E501
        :type: bool
        """

        self._suppress_domain_name_concatenation = suppress_domain_name_concatenation

    @property
    def ldap_gateway_data_store_ref(self):
        """Gets the ldap_gateway_data_store_ref of this KerberosRealm.  # noqa: E501

        The LDAP gateway used by PingFederate to communicate with the Active Directory. Only required when 'connectionType' is \"LDAP_GATEWAY\".  # noqa: E501

        :return: The ldap_gateway_data_store_ref of this KerberosRealm.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._ldap_gateway_data_store_ref

    @ldap_gateway_data_store_ref.setter
    def ldap_gateway_data_store_ref(self, ldap_gateway_data_store_ref):
        """Sets the ldap_gateway_data_store_ref of this KerberosRealm.

        The LDAP gateway used by PingFederate to communicate with the Active Directory. Only required when 'connectionType' is \"LDAP_GATEWAY\".  # noqa: E501

        :param ldap_gateway_data_store_ref: The ldap_gateway_data_store_ref of this KerberosRealm.  # noqa: E501
        :type: ResourceLink
        """

        self._ldap_gateway_data_store_ref = ldap_gateway_data_store_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KerberosRealm, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KerberosRealm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KerberosRealm):
            return True

        return self.to_dict() != other.to_dict()
