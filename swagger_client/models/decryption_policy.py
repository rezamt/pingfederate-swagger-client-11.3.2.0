# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DecryptionPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assertion_encrypted': 'bool',
        'attributes_encrypted': 'bool',
        'subject_name_id_encrypted': 'bool',
        'slo_encrypt_subject_name_id': 'bool',
        'slo_subject_name_id_encrypted': 'bool'
    }

    attribute_map = {
        'assertion_encrypted': 'assertionEncrypted',
        'attributes_encrypted': 'attributesEncrypted',
        'subject_name_id_encrypted': 'subjectNameIdEncrypted',
        'slo_encrypt_subject_name_id': 'sloEncryptSubjectNameID',
        'slo_subject_name_id_encrypted': 'sloSubjectNameIDEncrypted'
    }

    def __init__(self, assertion_encrypted=None, attributes_encrypted=None, subject_name_id_encrypted=None, slo_encrypt_subject_name_id=None, slo_subject_name_id_encrypted=None, _configuration=None):  # noqa: E501
        """DecryptionPolicy - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._assertion_encrypted = None
        self._attributes_encrypted = None
        self._subject_name_id_encrypted = None
        self._slo_encrypt_subject_name_id = None
        self._slo_subject_name_id_encrypted = None
        self.discriminator = None

        if assertion_encrypted is not None:
            self.assertion_encrypted = assertion_encrypted
        if attributes_encrypted is not None:
            self.attributes_encrypted = attributes_encrypted
        if subject_name_id_encrypted is not None:
            self.subject_name_id_encrypted = subject_name_id_encrypted
        if slo_encrypt_subject_name_id is not None:
            self.slo_encrypt_subject_name_id = slo_encrypt_subject_name_id
        if slo_subject_name_id_encrypted is not None:
            self.slo_subject_name_id_encrypted = slo_subject_name_id_encrypted

    @property
    def assertion_encrypted(self):
        """Gets the assertion_encrypted of this DecryptionPolicy.  # noqa: E501

        Specify whether the incoming SAML assertion is encrypted for an IdP connection.  # noqa: E501

        :return: The assertion_encrypted of this DecryptionPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._assertion_encrypted

    @assertion_encrypted.setter
    def assertion_encrypted(self, assertion_encrypted):
        """Sets the assertion_encrypted of this DecryptionPolicy.

        Specify whether the incoming SAML assertion is encrypted for an IdP connection.  # noqa: E501

        :param assertion_encrypted: The assertion_encrypted of this DecryptionPolicy.  # noqa: E501
        :type: bool
        """

        self._assertion_encrypted = assertion_encrypted

    @property
    def attributes_encrypted(self):
        """Gets the attributes_encrypted of this DecryptionPolicy.  # noqa: E501

        Specify whether one or more incoming SAML attributes are encrypted for an IdP connection.  # noqa: E501

        :return: The attributes_encrypted of this DecryptionPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._attributes_encrypted

    @attributes_encrypted.setter
    def attributes_encrypted(self, attributes_encrypted):
        """Sets the attributes_encrypted of this DecryptionPolicy.

        Specify whether one or more incoming SAML attributes are encrypted for an IdP connection.  # noqa: E501

        :param attributes_encrypted: The attributes_encrypted of this DecryptionPolicy.  # noqa: E501
        :type: bool
        """

        self._attributes_encrypted = attributes_encrypted

    @property
    def subject_name_id_encrypted(self):
        """Gets the subject_name_id_encrypted of this DecryptionPolicy.  # noqa: E501

        Specify whether the incoming Subject Name ID is encrypted for an IdP connection.  # noqa: E501

        :return: The subject_name_id_encrypted of this DecryptionPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._subject_name_id_encrypted

    @subject_name_id_encrypted.setter
    def subject_name_id_encrypted(self, subject_name_id_encrypted):
        """Sets the subject_name_id_encrypted of this DecryptionPolicy.

        Specify whether the incoming Subject Name ID is encrypted for an IdP connection.  # noqa: E501

        :param subject_name_id_encrypted: The subject_name_id_encrypted of this DecryptionPolicy.  # noqa: E501
        :type: bool
        """

        self._subject_name_id_encrypted = subject_name_id_encrypted

    @property
    def slo_encrypt_subject_name_id(self):
        """Gets the slo_encrypt_subject_name_id of this DecryptionPolicy.  # noqa: E501

        Encrypt the Subject Name ID in SLO messages to the IdP.  # noqa: E501

        :return: The slo_encrypt_subject_name_id of this DecryptionPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._slo_encrypt_subject_name_id

    @slo_encrypt_subject_name_id.setter
    def slo_encrypt_subject_name_id(self, slo_encrypt_subject_name_id):
        """Sets the slo_encrypt_subject_name_id of this DecryptionPolicy.

        Encrypt the Subject Name ID in SLO messages to the IdP.  # noqa: E501

        :param slo_encrypt_subject_name_id: The slo_encrypt_subject_name_id of this DecryptionPolicy.  # noqa: E501
        :type: bool
        """

        self._slo_encrypt_subject_name_id = slo_encrypt_subject_name_id

    @property
    def slo_subject_name_id_encrypted(self):
        """Gets the slo_subject_name_id_encrypted of this DecryptionPolicy.  # noqa: E501

        Allow encrypted Subject Name ID in SLO messages from the IdP.  # noqa: E501

        :return: The slo_subject_name_id_encrypted of this DecryptionPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._slo_subject_name_id_encrypted

    @slo_subject_name_id_encrypted.setter
    def slo_subject_name_id_encrypted(self, slo_subject_name_id_encrypted):
        """Sets the slo_subject_name_id_encrypted of this DecryptionPolicy.

        Allow encrypted Subject Name ID in SLO messages from the IdP.  # noqa: E501

        :param slo_subject_name_id_encrypted: The slo_subject_name_id_encrypted of this DecryptionPolicy.  # noqa: E501
        :type: bool
        """

        self._slo_subject_name_id_encrypted = slo_subject_name_id_encrypted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DecryptionPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DecryptionPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DecryptionPolicy):
            return True

        return self.to_dict() != other.to_dict()
