# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AuthorizationServerSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_scope_description': 'str',
        'scopes': 'list[ScopeEntry]',
        'scope_groups': 'list[ScopeGroupEntry]',
        'exclusive_scopes': 'list[ScopeEntry]',
        'exclusive_scope_groups': 'list[ScopeGroupEntry]',
        'authorization_code_timeout': 'int',
        'authorization_code_entropy': 'int',
        'disallow_plain_pkce': 'bool',
        'include_issuer_in_authorization_response': 'bool',
        'track_user_sessions_for_logout': 'bool',
        'token_endpoint_base_url': 'str',
        'persistent_grant_lifetime': 'int',
        'persistent_grant_lifetime_unit': 'str',
        'persistent_grant_idle_timeout': 'int',
        'persistent_grant_idle_timeout_time_unit': 'str',
        'refresh_token_length': 'int',
        'roll_refresh_token_values': 'bool',
        'refresh_token_rolling_grace_period': 'int',
        'refresh_rolling_interval': 'int',
        'persistent_grant_reuse_grant_types': 'list[str]',
        'persistent_grant_contract': 'PersistentGrantContract',
        'bypass_authorization_for_approved_grants': 'bool',
        'allow_unidentified_client_ro_creds': 'bool',
        'allow_unidentified_client_extension_grants': 'bool',
        'admin_web_service_pcv_ref': 'ResourceLink',
        'atm_id_for_o_auth_grant_management': 'str',
        'scope_for_o_auth_grant_management': 'str',
        'allowed_origins': 'list[str]',
        'user_authorization_url': 'str',
        'registered_authorization_path': 'str',
        'pending_authorization_timeout': 'int',
        'device_polling_interval': 'int',
        'activation_code_check_mode': 'str',
        'bypass_activation_code_confirmation': 'bool',
        'user_authorization_consent_page_setting': 'str',
        'user_authorization_consent_adapter': 'str',
        'approved_scopes_attribute': 'str',
        'approved_authorization_detail_attribute': 'str',
        'par_reference_timeout': 'int',
        'par_reference_length': 'int',
        'par_status': 'str',
        'client_secret_retention_period': 'int',
        'jwt_secured_authorization_response_mode_lifetime': 'int',
        'dpop_proof_require_nonce': 'bool',
        'dpop_proof_lifetime_seconds': 'int',
        'dpop_proof_enforce_replay_prevention': 'bool'
    }

    attribute_map = {
        'default_scope_description': 'defaultScopeDescription',
        'scopes': 'scopes',
        'scope_groups': 'scopeGroups',
        'exclusive_scopes': 'exclusiveScopes',
        'exclusive_scope_groups': 'exclusiveScopeGroups',
        'authorization_code_timeout': 'authorizationCodeTimeout',
        'authorization_code_entropy': 'authorizationCodeEntropy',
        'disallow_plain_pkce': 'disallowPlainPKCE',
        'include_issuer_in_authorization_response': 'includeIssuerInAuthorizationResponse',
        'track_user_sessions_for_logout': 'trackUserSessionsForLogout',
        'token_endpoint_base_url': 'tokenEndpointBaseUrl',
        'persistent_grant_lifetime': 'persistentGrantLifetime',
        'persistent_grant_lifetime_unit': 'persistentGrantLifetimeUnit',
        'persistent_grant_idle_timeout': 'persistentGrantIdleTimeout',
        'persistent_grant_idle_timeout_time_unit': 'persistentGrantIdleTimeoutTimeUnit',
        'refresh_token_length': 'refreshTokenLength',
        'roll_refresh_token_values': 'rollRefreshTokenValues',
        'refresh_token_rolling_grace_period': 'refreshTokenRollingGracePeriod',
        'refresh_rolling_interval': 'refreshRollingInterval',
        'persistent_grant_reuse_grant_types': 'persistentGrantReuseGrantTypes',
        'persistent_grant_contract': 'persistentGrantContract',
        'bypass_authorization_for_approved_grants': 'bypassAuthorizationForApprovedGrants',
        'allow_unidentified_client_ro_creds': 'allowUnidentifiedClientROCreds',
        'allow_unidentified_client_extension_grants': 'allowUnidentifiedClientExtensionGrants',
        'admin_web_service_pcv_ref': 'adminWebServicePcvRef',
        'atm_id_for_o_auth_grant_management': 'atmIdForOAuthGrantManagement',
        'scope_for_o_auth_grant_management': 'scopeForOAuthGrantManagement',
        'allowed_origins': 'allowedOrigins',
        'user_authorization_url': 'userAuthorizationUrl',
        'registered_authorization_path': 'registeredAuthorizationPath',
        'pending_authorization_timeout': 'pendingAuthorizationTimeout',
        'device_polling_interval': 'devicePollingInterval',
        'activation_code_check_mode': 'activationCodeCheckMode',
        'bypass_activation_code_confirmation': 'bypassActivationCodeConfirmation',
        'user_authorization_consent_page_setting': 'userAuthorizationConsentPageSetting',
        'user_authorization_consent_adapter': 'userAuthorizationConsentAdapter',
        'approved_scopes_attribute': 'approvedScopesAttribute',
        'approved_authorization_detail_attribute': 'approvedAuthorizationDetailAttribute',
        'par_reference_timeout': 'parReferenceTimeout',
        'par_reference_length': 'parReferenceLength',
        'par_status': 'parStatus',
        'client_secret_retention_period': 'clientSecretRetentionPeriod',
        'jwt_secured_authorization_response_mode_lifetime': 'jwtSecuredAuthorizationResponseModeLifetime',
        'dpop_proof_require_nonce': 'dpopProofRequireNonce',
        'dpop_proof_lifetime_seconds': 'dpopProofLifetimeSeconds',
        'dpop_proof_enforce_replay_prevention': 'dpopProofEnforceReplayPrevention'
    }

    def __init__(self, default_scope_description=None, scopes=None, scope_groups=None, exclusive_scopes=None, exclusive_scope_groups=None, authorization_code_timeout=None, authorization_code_entropy=None, disallow_plain_pkce=None, include_issuer_in_authorization_response=None, track_user_sessions_for_logout=None, token_endpoint_base_url=None, persistent_grant_lifetime=None, persistent_grant_lifetime_unit=None, persistent_grant_idle_timeout=None, persistent_grant_idle_timeout_time_unit=None, refresh_token_length=None, roll_refresh_token_values=None, refresh_token_rolling_grace_period=None, refresh_rolling_interval=None, persistent_grant_reuse_grant_types=None, persistent_grant_contract=None, bypass_authorization_for_approved_grants=None, allow_unidentified_client_ro_creds=None, allow_unidentified_client_extension_grants=None, admin_web_service_pcv_ref=None, atm_id_for_o_auth_grant_management=None, scope_for_o_auth_grant_management=None, allowed_origins=None, user_authorization_url=None, registered_authorization_path=None, pending_authorization_timeout=None, device_polling_interval=None, activation_code_check_mode=None, bypass_activation_code_confirmation=None, user_authorization_consent_page_setting=None, user_authorization_consent_adapter=None, approved_scopes_attribute=None, approved_authorization_detail_attribute=None, par_reference_timeout=None, par_reference_length=None, par_status=None, client_secret_retention_period=None, jwt_secured_authorization_response_mode_lifetime=None, dpop_proof_require_nonce=None, dpop_proof_lifetime_seconds=None, dpop_proof_enforce_replay_prevention=None, _configuration=None):  # noqa: E501
        """AuthorizationServerSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._default_scope_description = None
        self._scopes = None
        self._scope_groups = None
        self._exclusive_scopes = None
        self._exclusive_scope_groups = None
        self._authorization_code_timeout = None
        self._authorization_code_entropy = None
        self._disallow_plain_pkce = None
        self._include_issuer_in_authorization_response = None
        self._track_user_sessions_for_logout = None
        self._token_endpoint_base_url = None
        self._persistent_grant_lifetime = None
        self._persistent_grant_lifetime_unit = None
        self._persistent_grant_idle_timeout = None
        self._persistent_grant_idle_timeout_time_unit = None
        self._refresh_token_length = None
        self._roll_refresh_token_values = None
        self._refresh_token_rolling_grace_period = None
        self._refresh_rolling_interval = None
        self._persistent_grant_reuse_grant_types = None
        self._persistent_grant_contract = None
        self._bypass_authorization_for_approved_grants = None
        self._allow_unidentified_client_ro_creds = None
        self._allow_unidentified_client_extension_grants = None
        self._admin_web_service_pcv_ref = None
        self._atm_id_for_o_auth_grant_management = None
        self._scope_for_o_auth_grant_management = None
        self._allowed_origins = None
        self._user_authorization_url = None
        self._registered_authorization_path = None
        self._pending_authorization_timeout = None
        self._device_polling_interval = None
        self._activation_code_check_mode = None
        self._bypass_activation_code_confirmation = None
        self._user_authorization_consent_page_setting = None
        self._user_authorization_consent_adapter = None
        self._approved_scopes_attribute = None
        self._approved_authorization_detail_attribute = None
        self._par_reference_timeout = None
        self._par_reference_length = None
        self._par_status = None
        self._client_secret_retention_period = None
        self._jwt_secured_authorization_response_mode_lifetime = None
        self._dpop_proof_require_nonce = None
        self._dpop_proof_lifetime_seconds = None
        self._dpop_proof_enforce_replay_prevention = None
        self.discriminator = None

        self.default_scope_description = default_scope_description
        if scopes is not None:
            self.scopes = scopes
        if scope_groups is not None:
            self.scope_groups = scope_groups
        if exclusive_scopes is not None:
            self.exclusive_scopes = exclusive_scopes
        if exclusive_scope_groups is not None:
            self.exclusive_scope_groups = exclusive_scope_groups
        self.authorization_code_timeout = authorization_code_timeout
        self.authorization_code_entropy = authorization_code_entropy
        if disallow_plain_pkce is not None:
            self.disallow_plain_pkce = disallow_plain_pkce
        if include_issuer_in_authorization_response is not None:
            self.include_issuer_in_authorization_response = include_issuer_in_authorization_response
        if track_user_sessions_for_logout is not None:
            self.track_user_sessions_for_logout = track_user_sessions_for_logout
        if token_endpoint_base_url is not None:
            self.token_endpoint_base_url = token_endpoint_base_url
        if persistent_grant_lifetime is not None:
            self.persistent_grant_lifetime = persistent_grant_lifetime
        if persistent_grant_lifetime_unit is not None:
            self.persistent_grant_lifetime_unit = persistent_grant_lifetime_unit
        if persistent_grant_idle_timeout is not None:
            self.persistent_grant_idle_timeout = persistent_grant_idle_timeout
        if persistent_grant_idle_timeout_time_unit is not None:
            self.persistent_grant_idle_timeout_time_unit = persistent_grant_idle_timeout_time_unit
        self.refresh_token_length = refresh_token_length
        if roll_refresh_token_values is not None:
            self.roll_refresh_token_values = roll_refresh_token_values
        if refresh_token_rolling_grace_period is not None:
            self.refresh_token_rolling_grace_period = refresh_token_rolling_grace_period
        self.refresh_rolling_interval = refresh_rolling_interval
        if persistent_grant_reuse_grant_types is not None:
            self.persistent_grant_reuse_grant_types = persistent_grant_reuse_grant_types
        if persistent_grant_contract is not None:
            self.persistent_grant_contract = persistent_grant_contract
        if bypass_authorization_for_approved_grants is not None:
            self.bypass_authorization_for_approved_grants = bypass_authorization_for_approved_grants
        if allow_unidentified_client_ro_creds is not None:
            self.allow_unidentified_client_ro_creds = allow_unidentified_client_ro_creds
        if allow_unidentified_client_extension_grants is not None:
            self.allow_unidentified_client_extension_grants = allow_unidentified_client_extension_grants
        if admin_web_service_pcv_ref is not None:
            self.admin_web_service_pcv_ref = admin_web_service_pcv_ref
        if atm_id_for_o_auth_grant_management is not None:
            self.atm_id_for_o_auth_grant_management = atm_id_for_o_auth_grant_management
        if scope_for_o_auth_grant_management is not None:
            self.scope_for_o_auth_grant_management = scope_for_o_auth_grant_management
        if allowed_origins is not None:
            self.allowed_origins = allowed_origins
        if user_authorization_url is not None:
            self.user_authorization_url = user_authorization_url
        self.registered_authorization_path = registered_authorization_path
        self.pending_authorization_timeout = pending_authorization_timeout
        self.device_polling_interval = device_polling_interval
        if activation_code_check_mode is not None:
            self.activation_code_check_mode = activation_code_check_mode
        self.bypass_activation_code_confirmation = bypass_activation_code_confirmation
        if user_authorization_consent_page_setting is not None:
            self.user_authorization_consent_page_setting = user_authorization_consent_page_setting
        if user_authorization_consent_adapter is not None:
            self.user_authorization_consent_adapter = user_authorization_consent_adapter
        if approved_scopes_attribute is not None:
            self.approved_scopes_attribute = approved_scopes_attribute
        if approved_authorization_detail_attribute is not None:
            self.approved_authorization_detail_attribute = approved_authorization_detail_attribute
        if par_reference_timeout is not None:
            self.par_reference_timeout = par_reference_timeout
        if par_reference_length is not None:
            self.par_reference_length = par_reference_length
        if par_status is not None:
            self.par_status = par_status
        if client_secret_retention_period is not None:
            self.client_secret_retention_period = client_secret_retention_period
        if jwt_secured_authorization_response_mode_lifetime is not None:
            self.jwt_secured_authorization_response_mode_lifetime = jwt_secured_authorization_response_mode_lifetime
        if dpop_proof_require_nonce is not None:
            self.dpop_proof_require_nonce = dpop_proof_require_nonce
        if dpop_proof_lifetime_seconds is not None:
            self.dpop_proof_lifetime_seconds = dpop_proof_lifetime_seconds
        if dpop_proof_enforce_replay_prevention is not None:
            self.dpop_proof_enforce_replay_prevention = dpop_proof_enforce_replay_prevention

    @property
    def default_scope_description(self):
        """Gets the default_scope_description of this AuthorizationServerSettings.  # noqa: E501

        The default scope description.  # noqa: E501

        :return: The default_scope_description of this AuthorizationServerSettings.  # noqa: E501
        :rtype: str
        """
        return self._default_scope_description

    @default_scope_description.setter
    def default_scope_description(self, default_scope_description):
        """Sets the default_scope_description of this AuthorizationServerSettings.

        The default scope description.  # noqa: E501

        :param default_scope_description: The default_scope_description of this AuthorizationServerSettings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and default_scope_description is None:
            raise ValueError("Invalid value for `default_scope_description`, must not be `None`")  # noqa: E501

        self._default_scope_description = default_scope_description

    @property
    def scopes(self):
        """Gets the scopes of this AuthorizationServerSettings.  # noqa: E501

        The list of common scopes.  # noqa: E501

        :return: The scopes of this AuthorizationServerSettings.  # noqa: E501
        :rtype: list[ScopeEntry]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this AuthorizationServerSettings.

        The list of common scopes.  # noqa: E501

        :param scopes: The scopes of this AuthorizationServerSettings.  # noqa: E501
        :type: list[ScopeEntry]
        """

        self._scopes = scopes

    @property
    def scope_groups(self):
        """Gets the scope_groups of this AuthorizationServerSettings.  # noqa: E501

        The list of common scope groups.  # noqa: E501

        :return: The scope_groups of this AuthorizationServerSettings.  # noqa: E501
        :rtype: list[ScopeGroupEntry]
        """
        return self._scope_groups

    @scope_groups.setter
    def scope_groups(self, scope_groups):
        """Sets the scope_groups of this AuthorizationServerSettings.

        The list of common scope groups.  # noqa: E501

        :param scope_groups: The scope_groups of this AuthorizationServerSettings.  # noqa: E501
        :type: list[ScopeGroupEntry]
        """

        self._scope_groups = scope_groups

    @property
    def exclusive_scopes(self):
        """Gets the exclusive_scopes of this AuthorizationServerSettings.  # noqa: E501

        The list of exclusive scopes.  # noqa: E501

        :return: The exclusive_scopes of this AuthorizationServerSettings.  # noqa: E501
        :rtype: list[ScopeEntry]
        """
        return self._exclusive_scopes

    @exclusive_scopes.setter
    def exclusive_scopes(self, exclusive_scopes):
        """Sets the exclusive_scopes of this AuthorizationServerSettings.

        The list of exclusive scopes.  # noqa: E501

        :param exclusive_scopes: The exclusive_scopes of this AuthorizationServerSettings.  # noqa: E501
        :type: list[ScopeEntry]
        """

        self._exclusive_scopes = exclusive_scopes

    @property
    def exclusive_scope_groups(self):
        """Gets the exclusive_scope_groups of this AuthorizationServerSettings.  # noqa: E501

        The list of exclusive scope groups.  # noqa: E501

        :return: The exclusive_scope_groups of this AuthorizationServerSettings.  # noqa: E501
        :rtype: list[ScopeGroupEntry]
        """
        return self._exclusive_scope_groups

    @exclusive_scope_groups.setter
    def exclusive_scope_groups(self, exclusive_scope_groups):
        """Sets the exclusive_scope_groups of this AuthorizationServerSettings.

        The list of exclusive scope groups.  # noqa: E501

        :param exclusive_scope_groups: The exclusive_scope_groups of this AuthorizationServerSettings.  # noqa: E501
        :type: list[ScopeGroupEntry]
        """

        self._exclusive_scope_groups = exclusive_scope_groups

    @property
    def authorization_code_timeout(self):
        """Gets the authorization_code_timeout of this AuthorizationServerSettings.  # noqa: E501

        The authorization code timeout, in seconds.  # noqa: E501

        :return: The authorization_code_timeout of this AuthorizationServerSettings.  # noqa: E501
        :rtype: int
        """
        return self._authorization_code_timeout

    @authorization_code_timeout.setter
    def authorization_code_timeout(self, authorization_code_timeout):
        """Sets the authorization_code_timeout of this AuthorizationServerSettings.

        The authorization code timeout, in seconds.  # noqa: E501

        :param authorization_code_timeout: The authorization_code_timeout of this AuthorizationServerSettings.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and authorization_code_timeout is None:
            raise ValueError("Invalid value for `authorization_code_timeout`, must not be `None`")  # noqa: E501

        self._authorization_code_timeout = authorization_code_timeout

    @property
    def authorization_code_entropy(self):
        """Gets the authorization_code_entropy of this AuthorizationServerSettings.  # noqa: E501

        The authorization code entropy, in bytes.  # noqa: E501

        :return: The authorization_code_entropy of this AuthorizationServerSettings.  # noqa: E501
        :rtype: int
        """
        return self._authorization_code_entropy

    @authorization_code_entropy.setter
    def authorization_code_entropy(self, authorization_code_entropy):
        """Sets the authorization_code_entropy of this AuthorizationServerSettings.

        The authorization code entropy, in bytes.  # noqa: E501

        :param authorization_code_entropy: The authorization_code_entropy of this AuthorizationServerSettings.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and authorization_code_entropy is None:
            raise ValueError("Invalid value for `authorization_code_entropy`, must not be `None`")  # noqa: E501

        self._authorization_code_entropy = authorization_code_entropy

    @property
    def disallow_plain_pkce(self):
        """Gets the disallow_plain_pkce of this AuthorizationServerSettings.  # noqa: E501

        Determines whether PKCE's 'plain' code challenge method will be disallowed. The default value is false.  # noqa: E501

        :return: The disallow_plain_pkce of this AuthorizationServerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._disallow_plain_pkce

    @disallow_plain_pkce.setter
    def disallow_plain_pkce(self, disallow_plain_pkce):
        """Sets the disallow_plain_pkce of this AuthorizationServerSettings.

        Determines whether PKCE's 'plain' code challenge method will be disallowed. The default value is false.  # noqa: E501

        :param disallow_plain_pkce: The disallow_plain_pkce of this AuthorizationServerSettings.  # noqa: E501
        :type: bool
        """

        self._disallow_plain_pkce = disallow_plain_pkce

    @property
    def include_issuer_in_authorization_response(self):
        """Gets the include_issuer_in_authorization_response of this AuthorizationServerSettings.  # noqa: E501

        Determines whether the authorization server's issuer value is added to the authorization response or not. The default value is false.  # noqa: E501

        :return: The include_issuer_in_authorization_response of this AuthorizationServerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._include_issuer_in_authorization_response

    @include_issuer_in_authorization_response.setter
    def include_issuer_in_authorization_response(self, include_issuer_in_authorization_response):
        """Sets the include_issuer_in_authorization_response of this AuthorizationServerSettings.

        Determines whether the authorization server's issuer value is added to the authorization response or not. The default value is false.  # noqa: E501

        :param include_issuer_in_authorization_response: The include_issuer_in_authorization_response of this AuthorizationServerSettings.  # noqa: E501
        :type: bool
        """

        self._include_issuer_in_authorization_response = include_issuer_in_authorization_response

    @property
    def track_user_sessions_for_logout(self):
        """Gets the track_user_sessions_for_logout of this AuthorizationServerSettings.  # noqa: E501

        Determines whether user sessions are tracked for logout. If this property is not provided on a PUT, the setting is left unchanged.  # noqa: E501

        :return: The track_user_sessions_for_logout of this AuthorizationServerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._track_user_sessions_for_logout

    @track_user_sessions_for_logout.setter
    def track_user_sessions_for_logout(self, track_user_sessions_for_logout):
        """Sets the track_user_sessions_for_logout of this AuthorizationServerSettings.

        Determines whether user sessions are tracked for logout. If this property is not provided on a PUT, the setting is left unchanged.  # noqa: E501

        :param track_user_sessions_for_logout: The track_user_sessions_for_logout of this AuthorizationServerSettings.  # noqa: E501
        :type: bool
        """

        self._track_user_sessions_for_logout = track_user_sessions_for_logout

    @property
    def token_endpoint_base_url(self):
        """Gets the token_endpoint_base_url of this AuthorizationServerSettings.  # noqa: E501

        The token endpoint base URL used to validate the 'aud' claim during Private Key JWT Client Authentication.  # noqa: E501

        :return: The token_endpoint_base_url of this AuthorizationServerSettings.  # noqa: E501
        :rtype: str
        """
        return self._token_endpoint_base_url

    @token_endpoint_base_url.setter
    def token_endpoint_base_url(self, token_endpoint_base_url):
        """Sets the token_endpoint_base_url of this AuthorizationServerSettings.

        The token endpoint base URL used to validate the 'aud' claim during Private Key JWT Client Authentication.  # noqa: E501

        :param token_endpoint_base_url: The token_endpoint_base_url of this AuthorizationServerSettings.  # noqa: E501
        :type: str
        """

        self._token_endpoint_base_url = token_endpoint_base_url

    @property
    def persistent_grant_lifetime(self):
        """Gets the persistent_grant_lifetime of this AuthorizationServerSettings.  # noqa: E501

        The persistent grant lifetime. The default value is indefinite. -1 indicates an indefinite amount of time.  # noqa: E501

        :return: The persistent_grant_lifetime of this AuthorizationServerSettings.  # noqa: E501
        :rtype: int
        """
        return self._persistent_grant_lifetime

    @persistent_grant_lifetime.setter
    def persistent_grant_lifetime(self, persistent_grant_lifetime):
        """Sets the persistent_grant_lifetime of this AuthorizationServerSettings.

        The persistent grant lifetime. The default value is indefinite. -1 indicates an indefinite amount of time.  # noqa: E501

        :param persistent_grant_lifetime: The persistent_grant_lifetime of this AuthorizationServerSettings.  # noqa: E501
        :type: int
        """

        self._persistent_grant_lifetime = persistent_grant_lifetime

    @property
    def persistent_grant_lifetime_unit(self):
        """Gets the persistent_grant_lifetime_unit of this AuthorizationServerSettings.  # noqa: E501

        The persistent grant lifetime unit.  # noqa: E501

        :return: The persistent_grant_lifetime_unit of this AuthorizationServerSettings.  # noqa: E501
        :rtype: str
        """
        return self._persistent_grant_lifetime_unit

    @persistent_grant_lifetime_unit.setter
    def persistent_grant_lifetime_unit(self, persistent_grant_lifetime_unit):
        """Sets the persistent_grant_lifetime_unit of this AuthorizationServerSettings.

        The persistent grant lifetime unit.  # noqa: E501

        :param persistent_grant_lifetime_unit: The persistent_grant_lifetime_unit of this AuthorizationServerSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["MINUTES", "DAYS", "HOURS"]  # noqa: E501
        if (self._configuration.client_side_validation and
                persistent_grant_lifetime_unit not in allowed_values):
            raise ValueError(
                "Invalid value for `persistent_grant_lifetime_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(persistent_grant_lifetime_unit, allowed_values)
            )

        self._persistent_grant_lifetime_unit = persistent_grant_lifetime_unit

    @property
    def persistent_grant_idle_timeout(self):
        """Gets the persistent_grant_idle_timeout of this AuthorizationServerSettings.  # noqa: E501

        The persistent grant idle timeout. The default value is 30 (days). -1 indicates an indefinite amount of time.  # noqa: E501

        :return: The persistent_grant_idle_timeout of this AuthorizationServerSettings.  # noqa: E501
        :rtype: int
        """
        return self._persistent_grant_idle_timeout

    @persistent_grant_idle_timeout.setter
    def persistent_grant_idle_timeout(self, persistent_grant_idle_timeout):
        """Sets the persistent_grant_idle_timeout of this AuthorizationServerSettings.

        The persistent grant idle timeout. The default value is 30 (days). -1 indicates an indefinite amount of time.  # noqa: E501

        :param persistent_grant_idle_timeout: The persistent_grant_idle_timeout of this AuthorizationServerSettings.  # noqa: E501
        :type: int
        """

        self._persistent_grant_idle_timeout = persistent_grant_idle_timeout

    @property
    def persistent_grant_idle_timeout_time_unit(self):
        """Gets the persistent_grant_idle_timeout_time_unit of this AuthorizationServerSettings.  # noqa: E501

        The persistent grant idle timeout time unit.  # noqa: E501

        :return: The persistent_grant_idle_timeout_time_unit of this AuthorizationServerSettings.  # noqa: E501
        :rtype: str
        """
        return self._persistent_grant_idle_timeout_time_unit

    @persistent_grant_idle_timeout_time_unit.setter
    def persistent_grant_idle_timeout_time_unit(self, persistent_grant_idle_timeout_time_unit):
        """Sets the persistent_grant_idle_timeout_time_unit of this AuthorizationServerSettings.

        The persistent grant idle timeout time unit.  # noqa: E501

        :param persistent_grant_idle_timeout_time_unit: The persistent_grant_idle_timeout_time_unit of this AuthorizationServerSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["MINUTES", "DAYS", "HOURS"]  # noqa: E501
        if (self._configuration.client_side_validation and
                persistent_grant_idle_timeout_time_unit not in allowed_values):
            raise ValueError(
                "Invalid value for `persistent_grant_idle_timeout_time_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(persistent_grant_idle_timeout_time_unit, allowed_values)
            )

        self._persistent_grant_idle_timeout_time_unit = persistent_grant_idle_timeout_time_unit

    @property
    def refresh_token_length(self):
        """Gets the refresh_token_length of this AuthorizationServerSettings.  # noqa: E501

        The refresh token length in number of characters.  # noqa: E501

        :return: The refresh_token_length of this AuthorizationServerSettings.  # noqa: E501
        :rtype: int
        """
        return self._refresh_token_length

    @refresh_token_length.setter
    def refresh_token_length(self, refresh_token_length):
        """Sets the refresh_token_length of this AuthorizationServerSettings.

        The refresh token length in number of characters.  # noqa: E501

        :param refresh_token_length: The refresh_token_length of this AuthorizationServerSettings.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and refresh_token_length is None:
            raise ValueError("Invalid value for `refresh_token_length`, must not be `None`")  # noqa: E501

        self._refresh_token_length = refresh_token_length

    @property
    def roll_refresh_token_values(self):
        """Gets the roll_refresh_token_values of this AuthorizationServerSettings.  # noqa: E501

        The roll refresh token values default policy. The default value is true.  # noqa: E501

        :return: The roll_refresh_token_values of this AuthorizationServerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._roll_refresh_token_values

    @roll_refresh_token_values.setter
    def roll_refresh_token_values(self, roll_refresh_token_values):
        """Sets the roll_refresh_token_values of this AuthorizationServerSettings.

        The roll refresh token values default policy. The default value is true.  # noqa: E501

        :param roll_refresh_token_values: The roll_refresh_token_values of this AuthorizationServerSettings.  # noqa: E501
        :type: bool
        """

        self._roll_refresh_token_values = roll_refresh_token_values

    @property
    def refresh_token_rolling_grace_period(self):
        """Gets the refresh_token_rolling_grace_period of this AuthorizationServerSettings.  # noqa: E501

        The grace period that a rolled refresh token remains valid in seconds. The default value is 60.  # noqa: E501

        :return: The refresh_token_rolling_grace_period of this AuthorizationServerSettings.  # noqa: E501
        :rtype: int
        """
        return self._refresh_token_rolling_grace_period

    @refresh_token_rolling_grace_period.setter
    def refresh_token_rolling_grace_period(self, refresh_token_rolling_grace_period):
        """Sets the refresh_token_rolling_grace_period of this AuthorizationServerSettings.

        The grace period that a rolled refresh token remains valid in seconds. The default value is 60.  # noqa: E501

        :param refresh_token_rolling_grace_period: The refresh_token_rolling_grace_period of this AuthorizationServerSettings.  # noqa: E501
        :type: int
        """

        self._refresh_token_rolling_grace_period = refresh_token_rolling_grace_period

    @property
    def refresh_rolling_interval(self):
        """Gets the refresh_rolling_interval of this AuthorizationServerSettings.  # noqa: E501

        The minimum interval to roll refresh tokens, in hours.  # noqa: E501

        :return: The refresh_rolling_interval of this AuthorizationServerSettings.  # noqa: E501
        :rtype: int
        """
        return self._refresh_rolling_interval

    @refresh_rolling_interval.setter
    def refresh_rolling_interval(self, refresh_rolling_interval):
        """Sets the refresh_rolling_interval of this AuthorizationServerSettings.

        The minimum interval to roll refresh tokens, in hours.  # noqa: E501

        :param refresh_rolling_interval: The refresh_rolling_interval of this AuthorizationServerSettings.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and refresh_rolling_interval is None:
            raise ValueError("Invalid value for `refresh_rolling_interval`, must not be `None`")  # noqa: E501

        self._refresh_rolling_interval = refresh_rolling_interval

    @property
    def persistent_grant_reuse_grant_types(self):
        """Gets the persistent_grant_reuse_grant_types of this AuthorizationServerSettings.  # noqa: E501

        The grant types that the OAuth AS can reuse rather than creating a new grant for each request. Only 'IMPLICIT' or 'AUTHORIZATION_CODE' or 'RESOURCE_OWNER_CREDENTIALS' are valid grant types.  # noqa: E501

        :return: The persistent_grant_reuse_grant_types of this AuthorizationServerSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._persistent_grant_reuse_grant_types

    @persistent_grant_reuse_grant_types.setter
    def persistent_grant_reuse_grant_types(self, persistent_grant_reuse_grant_types):
        """Sets the persistent_grant_reuse_grant_types of this AuthorizationServerSettings.

        The grant types that the OAuth AS can reuse rather than creating a new grant for each request. Only 'IMPLICIT' or 'AUTHORIZATION_CODE' or 'RESOURCE_OWNER_CREDENTIALS' are valid grant types.  # noqa: E501

        :param persistent_grant_reuse_grant_types: The persistent_grant_reuse_grant_types of this AuthorizationServerSettings.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["IMPLICIT", "AUTHORIZATION_CODE", "RESOURCE_OWNER_CREDENTIALS", "CLIENT_CREDENTIALS", "REFRESH_TOKEN", "EXTENSION", "DEVICE_CODE", "ACCESS_TOKEN_VALIDATION", "CIBA", "TOKEN_EXCHANGE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(persistent_grant_reuse_grant_types).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `persistent_grant_reuse_grant_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(persistent_grant_reuse_grant_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._persistent_grant_reuse_grant_types = persistent_grant_reuse_grant_types

    @property
    def persistent_grant_contract(self):
        """Gets the persistent_grant_contract of this AuthorizationServerSettings.  # noqa: E501

        The persistent grant contract defines attributes that are associated with OAuth persistent grants.  # noqa: E501

        :return: The persistent_grant_contract of this AuthorizationServerSettings.  # noqa: E501
        :rtype: PersistentGrantContract
        """
        return self._persistent_grant_contract

    @persistent_grant_contract.setter
    def persistent_grant_contract(self, persistent_grant_contract):
        """Sets the persistent_grant_contract of this AuthorizationServerSettings.

        The persistent grant contract defines attributes that are associated with OAuth persistent grants.  # noqa: E501

        :param persistent_grant_contract: The persistent_grant_contract of this AuthorizationServerSettings.  # noqa: E501
        :type: PersistentGrantContract
        """

        self._persistent_grant_contract = persistent_grant_contract

    @property
    def bypass_authorization_for_approved_grants(self):
        """Gets the bypass_authorization_for_approved_grants of this AuthorizationServerSettings.  # noqa: E501

        Bypass authorization for previously approved persistent grants. The default value is false.  # noqa: E501

        :return: The bypass_authorization_for_approved_grants of this AuthorizationServerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._bypass_authorization_for_approved_grants

    @bypass_authorization_for_approved_grants.setter
    def bypass_authorization_for_approved_grants(self, bypass_authorization_for_approved_grants):
        """Sets the bypass_authorization_for_approved_grants of this AuthorizationServerSettings.

        Bypass authorization for previously approved persistent grants. The default value is false.  # noqa: E501

        :param bypass_authorization_for_approved_grants: The bypass_authorization_for_approved_grants of this AuthorizationServerSettings.  # noqa: E501
        :type: bool
        """

        self._bypass_authorization_for_approved_grants = bypass_authorization_for_approved_grants

    @property
    def allow_unidentified_client_ro_creds(self):
        """Gets the allow_unidentified_client_ro_creds of this AuthorizationServerSettings.  # noqa: E501

        Allow unidentified clients to request resource owner password credentials grants. The default value is false.  # noqa: E501

        :return: The allow_unidentified_client_ro_creds of this AuthorizationServerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_unidentified_client_ro_creds

    @allow_unidentified_client_ro_creds.setter
    def allow_unidentified_client_ro_creds(self, allow_unidentified_client_ro_creds):
        """Sets the allow_unidentified_client_ro_creds of this AuthorizationServerSettings.

        Allow unidentified clients to request resource owner password credentials grants. The default value is false.  # noqa: E501

        :param allow_unidentified_client_ro_creds: The allow_unidentified_client_ro_creds of this AuthorizationServerSettings.  # noqa: E501
        :type: bool
        """

        self._allow_unidentified_client_ro_creds = allow_unidentified_client_ro_creds

    @property
    def allow_unidentified_client_extension_grants(self):
        """Gets the allow_unidentified_client_extension_grants of this AuthorizationServerSettings.  # noqa: E501

        Allow unidentified clients to request extension grants. The default value is false.  # noqa: E501

        :return: The allow_unidentified_client_extension_grants of this AuthorizationServerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_unidentified_client_extension_grants

    @allow_unidentified_client_extension_grants.setter
    def allow_unidentified_client_extension_grants(self, allow_unidentified_client_extension_grants):
        """Sets the allow_unidentified_client_extension_grants of this AuthorizationServerSettings.

        Allow unidentified clients to request extension grants. The default value is false.  # noqa: E501

        :param allow_unidentified_client_extension_grants: The allow_unidentified_client_extension_grants of this AuthorizationServerSettings.  # noqa: E501
        :type: bool
        """

        self._allow_unidentified_client_extension_grants = allow_unidentified_client_extension_grants

    @property
    def admin_web_service_pcv_ref(self):
        """Gets the admin_web_service_pcv_ref of this AuthorizationServerSettings.  # noqa: E501

        The password credential validator reference that is used for authenticating access to the OAuth Administrative Web Service.  # noqa: E501

        :return: The admin_web_service_pcv_ref of this AuthorizationServerSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._admin_web_service_pcv_ref

    @admin_web_service_pcv_ref.setter
    def admin_web_service_pcv_ref(self, admin_web_service_pcv_ref):
        """Sets the admin_web_service_pcv_ref of this AuthorizationServerSettings.

        The password credential validator reference that is used for authenticating access to the OAuth Administrative Web Service.  # noqa: E501

        :param admin_web_service_pcv_ref: The admin_web_service_pcv_ref of this AuthorizationServerSettings.  # noqa: E501
        :type: ResourceLink
        """

        self._admin_web_service_pcv_ref = admin_web_service_pcv_ref

    @property
    def atm_id_for_o_auth_grant_management(self):
        """Gets the atm_id_for_o_auth_grant_management of this AuthorizationServerSettings.  # noqa: E501

        The ID of the Access Token Manager used for OAuth enabled grant management.  # noqa: E501

        :return: The atm_id_for_o_auth_grant_management of this AuthorizationServerSettings.  # noqa: E501
        :rtype: str
        """
        return self._atm_id_for_o_auth_grant_management

    @atm_id_for_o_auth_grant_management.setter
    def atm_id_for_o_auth_grant_management(self, atm_id_for_o_auth_grant_management):
        """Sets the atm_id_for_o_auth_grant_management of this AuthorizationServerSettings.

        The ID of the Access Token Manager used for OAuth enabled grant management.  # noqa: E501

        :param atm_id_for_o_auth_grant_management: The atm_id_for_o_auth_grant_management of this AuthorizationServerSettings.  # noqa: E501
        :type: str
        """

        self._atm_id_for_o_auth_grant_management = atm_id_for_o_auth_grant_management

    @property
    def scope_for_o_auth_grant_management(self):
        """Gets the scope_for_o_auth_grant_management of this AuthorizationServerSettings.  # noqa: E501

        The OAuth scope to validate when accessing grant management service.  # noqa: E501

        :return: The scope_for_o_auth_grant_management of this AuthorizationServerSettings.  # noqa: E501
        :rtype: str
        """
        return self._scope_for_o_auth_grant_management

    @scope_for_o_auth_grant_management.setter
    def scope_for_o_auth_grant_management(self, scope_for_o_auth_grant_management):
        """Sets the scope_for_o_auth_grant_management of this AuthorizationServerSettings.

        The OAuth scope to validate when accessing grant management service.  # noqa: E501

        :param scope_for_o_auth_grant_management: The scope_for_o_auth_grant_management of this AuthorizationServerSettings.  # noqa: E501
        :type: str
        """

        self._scope_for_o_auth_grant_management = scope_for_o_auth_grant_management

    @property
    def allowed_origins(self):
        """Gets the allowed_origins of this AuthorizationServerSettings.  # noqa: E501

        The list of allowed origins.  # noqa: E501

        :return: The allowed_origins of this AuthorizationServerSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_origins

    @allowed_origins.setter
    def allowed_origins(self, allowed_origins):
        """Sets the allowed_origins of this AuthorizationServerSettings.

        The list of allowed origins.  # noqa: E501

        :param allowed_origins: The allowed_origins of this AuthorizationServerSettings.  # noqa: E501
        :type: list[str]
        """

        self._allowed_origins = allowed_origins

    @property
    def user_authorization_url(self):
        """Gets the user_authorization_url of this AuthorizationServerSettings.  # noqa: E501

        The URL used to generate 'verification_url' and 'verification_url_complete' values in a Device Authorization request  # noqa: E501

        :return: The user_authorization_url of this AuthorizationServerSettings.  # noqa: E501
        :rtype: str
        """
        return self._user_authorization_url

    @user_authorization_url.setter
    def user_authorization_url(self, user_authorization_url):
        """Sets the user_authorization_url of this AuthorizationServerSettings.

        The URL used to generate 'verification_url' and 'verification_url_complete' values in a Device Authorization request  # noqa: E501

        :param user_authorization_url: The user_authorization_url of this AuthorizationServerSettings.  # noqa: E501
        :type: str
        """

        self._user_authorization_url = user_authorization_url

    @property
    def registered_authorization_path(self):
        """Gets the registered_authorization_path of this AuthorizationServerSettings.  # noqa: E501

        The Registered Authorization Path is concatenated to PingFederate base URL to generate 'verification_url' and 'verification_url_complete' values in a Device Authorization request. PingFederate listens to this path if specified  # noqa: E501

        :return: The registered_authorization_path of this AuthorizationServerSettings.  # noqa: E501
        :rtype: str
        """
        return self._registered_authorization_path

    @registered_authorization_path.setter
    def registered_authorization_path(self, registered_authorization_path):
        """Sets the registered_authorization_path of this AuthorizationServerSettings.

        The Registered Authorization Path is concatenated to PingFederate base URL to generate 'verification_url' and 'verification_url_complete' values in a Device Authorization request. PingFederate listens to this path if specified  # noqa: E501

        :param registered_authorization_path: The registered_authorization_path of this AuthorizationServerSettings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and registered_authorization_path is None:
            raise ValueError("Invalid value for `registered_authorization_path`, must not be `None`")  # noqa: E501

        self._registered_authorization_path = registered_authorization_path

    @property
    def pending_authorization_timeout(self):
        """Gets the pending_authorization_timeout of this AuthorizationServerSettings.  # noqa: E501

        The 'device_code' and 'user_code' timeout, in seconds.  # noqa: E501

        :return: The pending_authorization_timeout of this AuthorizationServerSettings.  # noqa: E501
        :rtype: int
        """
        return self._pending_authorization_timeout

    @pending_authorization_timeout.setter
    def pending_authorization_timeout(self, pending_authorization_timeout):
        """Sets the pending_authorization_timeout of this AuthorizationServerSettings.

        The 'device_code' and 'user_code' timeout, in seconds.  # noqa: E501

        :param pending_authorization_timeout: The pending_authorization_timeout of this AuthorizationServerSettings.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and pending_authorization_timeout is None:
            raise ValueError("Invalid value for `pending_authorization_timeout`, must not be `None`")  # noqa: E501

        self._pending_authorization_timeout = pending_authorization_timeout

    @property
    def device_polling_interval(self):
        """Gets the device_polling_interval of this AuthorizationServerSettings.  # noqa: E501

        The amount of time client should wait between polling requests, in seconds.  # noqa: E501

        :return: The device_polling_interval of this AuthorizationServerSettings.  # noqa: E501
        :rtype: int
        """
        return self._device_polling_interval

    @device_polling_interval.setter
    def device_polling_interval(self, device_polling_interval):
        """Sets the device_polling_interval of this AuthorizationServerSettings.

        The amount of time client should wait between polling requests, in seconds.  # noqa: E501

        :param device_polling_interval: The device_polling_interval of this AuthorizationServerSettings.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and device_polling_interval is None:
            raise ValueError("Invalid value for `device_polling_interval`, must not be `None`")  # noqa: E501

        self._device_polling_interval = device_polling_interval

    @property
    def activation_code_check_mode(self):
        """Gets the activation_code_check_mode of this AuthorizationServerSettings.  # noqa: E501

        Determines whether the user is prompted to enter or confirm the activation code after authenticating or before. The default is AFTER_AUTHENTICATION.  # noqa: E501

        :return: The activation_code_check_mode of this AuthorizationServerSettings.  # noqa: E501
        :rtype: str
        """
        return self._activation_code_check_mode

    @activation_code_check_mode.setter
    def activation_code_check_mode(self, activation_code_check_mode):
        """Sets the activation_code_check_mode of this AuthorizationServerSettings.

        Determines whether the user is prompted to enter or confirm the activation code after authenticating or before. The default is AFTER_AUTHENTICATION.  # noqa: E501

        :param activation_code_check_mode: The activation_code_check_mode of this AuthorizationServerSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["AFTER_AUTHENTICATION", "BEFORE_AUTHENTICATION"]  # noqa: E501
        if (self._configuration.client_side_validation and
                activation_code_check_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `activation_code_check_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(activation_code_check_mode, allowed_values)
            )

        self._activation_code_check_mode = activation_code_check_mode

    @property
    def bypass_activation_code_confirmation(self):
        """Gets the bypass_activation_code_confirmation of this AuthorizationServerSettings.  # noqa: E501

        Indicates if the Activation Code Confirmation page should be bypassed if 'verification_url_complete' is used by the end user to authorize a device.  # noqa: E501

        :return: The bypass_activation_code_confirmation of this AuthorizationServerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._bypass_activation_code_confirmation

    @bypass_activation_code_confirmation.setter
    def bypass_activation_code_confirmation(self, bypass_activation_code_confirmation):
        """Sets the bypass_activation_code_confirmation of this AuthorizationServerSettings.

        Indicates if the Activation Code Confirmation page should be bypassed if 'verification_url_complete' is used by the end user to authorize a device.  # noqa: E501

        :param bypass_activation_code_confirmation: The bypass_activation_code_confirmation of this AuthorizationServerSettings.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and bypass_activation_code_confirmation is None:
            raise ValueError("Invalid value for `bypass_activation_code_confirmation`, must not be `None`")  # noqa: E501

        self._bypass_activation_code_confirmation = bypass_activation_code_confirmation

    @property
    def user_authorization_consent_page_setting(self):
        """Gets the user_authorization_consent_page_setting of this AuthorizationServerSettings.  # noqa: E501

        User Authorization Consent Page setting to use PingFederate's internal consent page or an external system  # noqa: E501

        :return: The user_authorization_consent_page_setting of this AuthorizationServerSettings.  # noqa: E501
        :rtype: str
        """
        return self._user_authorization_consent_page_setting

    @user_authorization_consent_page_setting.setter
    def user_authorization_consent_page_setting(self, user_authorization_consent_page_setting):
        """Sets the user_authorization_consent_page_setting of this AuthorizationServerSettings.

        User Authorization Consent Page setting to use PingFederate's internal consent page or an external system  # noqa: E501

        :param user_authorization_consent_page_setting: The user_authorization_consent_page_setting of this AuthorizationServerSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["INTERNAL", "ADAPTER"]  # noqa: E501
        if (self._configuration.client_side_validation and
                user_authorization_consent_page_setting not in allowed_values):
            raise ValueError(
                "Invalid value for `user_authorization_consent_page_setting` ({0}), must be one of {1}"  # noqa: E501
                .format(user_authorization_consent_page_setting, allowed_values)
            )

        self._user_authorization_consent_page_setting = user_authorization_consent_page_setting

    @property
    def user_authorization_consent_adapter(self):
        """Gets the user_authorization_consent_adapter of this AuthorizationServerSettings.  # noqa: E501

        Adapter ID of the external consent adapter to be used for the consent page user interface.  # noqa: E501

        :return: The user_authorization_consent_adapter of this AuthorizationServerSettings.  # noqa: E501
        :rtype: str
        """
        return self._user_authorization_consent_adapter

    @user_authorization_consent_adapter.setter
    def user_authorization_consent_adapter(self, user_authorization_consent_adapter):
        """Sets the user_authorization_consent_adapter of this AuthorizationServerSettings.

        Adapter ID of the external consent adapter to be used for the consent page user interface.  # noqa: E501

        :param user_authorization_consent_adapter: The user_authorization_consent_adapter of this AuthorizationServerSettings.  # noqa: E501
        :type: str
        """

        self._user_authorization_consent_adapter = user_authorization_consent_adapter

    @property
    def approved_scopes_attribute(self):
        """Gets the approved_scopes_attribute of this AuthorizationServerSettings.  # noqa: E501

        Attribute from the external consent adapter's contract, intended for storing approved scopes returned by the external consent page.  # noqa: E501

        :return: The approved_scopes_attribute of this AuthorizationServerSettings.  # noqa: E501
        :rtype: str
        """
        return self._approved_scopes_attribute

    @approved_scopes_attribute.setter
    def approved_scopes_attribute(self, approved_scopes_attribute):
        """Sets the approved_scopes_attribute of this AuthorizationServerSettings.

        Attribute from the external consent adapter's contract, intended for storing approved scopes returned by the external consent page.  # noqa: E501

        :param approved_scopes_attribute: The approved_scopes_attribute of this AuthorizationServerSettings.  # noqa: E501
        :type: str
        """

        self._approved_scopes_attribute = approved_scopes_attribute

    @property
    def approved_authorization_detail_attribute(self):
        """Gets the approved_authorization_detail_attribute of this AuthorizationServerSettings.  # noqa: E501

        Attribute from the external consent adapter's contract, intended for storing approved authorization details returned by the external consent page.  # noqa: E501

        :return: The approved_authorization_detail_attribute of this AuthorizationServerSettings.  # noqa: E501
        :rtype: str
        """
        return self._approved_authorization_detail_attribute

    @approved_authorization_detail_attribute.setter
    def approved_authorization_detail_attribute(self, approved_authorization_detail_attribute):
        """Sets the approved_authorization_detail_attribute of this AuthorizationServerSettings.

        Attribute from the external consent adapter's contract, intended for storing approved authorization details returned by the external consent page.  # noqa: E501

        :param approved_authorization_detail_attribute: The approved_authorization_detail_attribute of this AuthorizationServerSettings.  # noqa: E501
        :type: str
        """

        self._approved_authorization_detail_attribute = approved_authorization_detail_attribute

    @property
    def par_reference_timeout(self):
        """Gets the par_reference_timeout of this AuthorizationServerSettings.  # noqa: E501

        The timeout, in seconds, of the pushed authorization request reference. The default value is 60.  # noqa: E501

        :return: The par_reference_timeout of this AuthorizationServerSettings.  # noqa: E501
        :rtype: int
        """
        return self._par_reference_timeout

    @par_reference_timeout.setter
    def par_reference_timeout(self, par_reference_timeout):
        """Sets the par_reference_timeout of this AuthorizationServerSettings.

        The timeout, in seconds, of the pushed authorization request reference. The default value is 60.  # noqa: E501

        :param par_reference_timeout: The par_reference_timeout of this AuthorizationServerSettings.  # noqa: E501
        :type: int
        """

        self._par_reference_timeout = par_reference_timeout

    @property
    def par_reference_length(self):
        """Gets the par_reference_length of this AuthorizationServerSettings.  # noqa: E501

        The entropy of pushed authorization request references, in bytes. The default value is 24.  # noqa: E501

        :return: The par_reference_length of this AuthorizationServerSettings.  # noqa: E501
        :rtype: int
        """
        return self._par_reference_length

    @par_reference_length.setter
    def par_reference_length(self, par_reference_length):
        """Sets the par_reference_length of this AuthorizationServerSettings.

        The entropy of pushed authorization request references, in bytes. The default value is 24.  # noqa: E501

        :param par_reference_length: The par_reference_length of this AuthorizationServerSettings.  # noqa: E501
        :type: int
        """

        self._par_reference_length = par_reference_length

    @property
    def par_status(self):
        """Gets the par_status of this AuthorizationServerSettings.  # noqa: E501

        The status of pushed authorization request support. The default value is ENABLED.  # noqa: E501

        :return: The par_status of this AuthorizationServerSettings.  # noqa: E501
        :rtype: str
        """
        return self._par_status

    @par_status.setter
    def par_status(self, par_status):
        """Sets the par_status of this AuthorizationServerSettings.

        The status of pushed authorization request support. The default value is ENABLED.  # noqa: E501

        :param par_status: The par_status of this AuthorizationServerSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["DISABLED", "ENABLED", "REQUIRED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                par_status not in allowed_values):
            raise ValueError(
                "Invalid value for `par_status` ({0}), must be one of {1}"  # noqa: E501
                .format(par_status, allowed_values)
            )

        self._par_status = par_status

    @property
    def client_secret_retention_period(self):
        """Gets the client_secret_retention_period of this AuthorizationServerSettings.  # noqa: E501

        The length of time in minutes that client secrets will be retained as secondary secrets after secret change. The default value is 0, which will disable secondary client secret retention.  # noqa: E501

        :return: The client_secret_retention_period of this AuthorizationServerSettings.  # noqa: E501
        :rtype: int
        """
        return self._client_secret_retention_period

    @client_secret_retention_period.setter
    def client_secret_retention_period(self, client_secret_retention_period):
        """Sets the client_secret_retention_period of this AuthorizationServerSettings.

        The length of time in minutes that client secrets will be retained as secondary secrets after secret change. The default value is 0, which will disable secondary client secret retention.  # noqa: E501

        :param client_secret_retention_period: The client_secret_retention_period of this AuthorizationServerSettings.  # noqa: E501
        :type: int
        """

        self._client_secret_retention_period = client_secret_retention_period

    @property
    def jwt_secured_authorization_response_mode_lifetime(self):
        """Gets the jwt_secured_authorization_response_mode_lifetime of this AuthorizationServerSettings.  # noqa: E501

        The lifetime, in seconds, of the JWT Secured authorization response. The default value is 600.  # noqa: E501

        :return: The jwt_secured_authorization_response_mode_lifetime of this AuthorizationServerSettings.  # noqa: E501
        :rtype: int
        """
        return self._jwt_secured_authorization_response_mode_lifetime

    @jwt_secured_authorization_response_mode_lifetime.setter
    def jwt_secured_authorization_response_mode_lifetime(self, jwt_secured_authorization_response_mode_lifetime):
        """Sets the jwt_secured_authorization_response_mode_lifetime of this AuthorizationServerSettings.

        The lifetime, in seconds, of the JWT Secured authorization response. The default value is 600.  # noqa: E501

        :param jwt_secured_authorization_response_mode_lifetime: The jwt_secured_authorization_response_mode_lifetime of this AuthorizationServerSettings.  # noqa: E501
        :type: int
        """

        self._jwt_secured_authorization_response_mode_lifetime = jwt_secured_authorization_response_mode_lifetime

    @property
    def dpop_proof_require_nonce(self):
        """Gets the dpop_proof_require_nonce of this AuthorizationServerSettings.  # noqa: E501

        Determines whether nonce is required in the Demonstrating Proof-of-Possession (DPoP) proof JWT. The default value is false.  # noqa: E501

        :return: The dpop_proof_require_nonce of this AuthorizationServerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._dpop_proof_require_nonce

    @dpop_proof_require_nonce.setter
    def dpop_proof_require_nonce(self, dpop_proof_require_nonce):
        """Sets the dpop_proof_require_nonce of this AuthorizationServerSettings.

        Determines whether nonce is required in the Demonstrating Proof-of-Possession (DPoP) proof JWT. The default value is false.  # noqa: E501

        :param dpop_proof_require_nonce: The dpop_proof_require_nonce of this AuthorizationServerSettings.  # noqa: E501
        :type: bool
        """

        self._dpop_proof_require_nonce = dpop_proof_require_nonce

    @property
    def dpop_proof_lifetime_seconds(self):
        """Gets the dpop_proof_lifetime_seconds of this AuthorizationServerSettings.  # noqa: E501

        The lifetime, in seconds, of the Demonstrating Proof-of-Possession (DPoP) proof JWT. The default value is 120.  # noqa: E501

        :return: The dpop_proof_lifetime_seconds of this AuthorizationServerSettings.  # noqa: E501
        :rtype: int
        """
        return self._dpop_proof_lifetime_seconds

    @dpop_proof_lifetime_seconds.setter
    def dpop_proof_lifetime_seconds(self, dpop_proof_lifetime_seconds):
        """Sets the dpop_proof_lifetime_seconds of this AuthorizationServerSettings.

        The lifetime, in seconds, of the Demonstrating Proof-of-Possession (DPoP) proof JWT. The default value is 120.  # noqa: E501

        :param dpop_proof_lifetime_seconds: The dpop_proof_lifetime_seconds of this AuthorizationServerSettings.  # noqa: E501
        :type: int
        """

        self._dpop_proof_lifetime_seconds = dpop_proof_lifetime_seconds

    @property
    def dpop_proof_enforce_replay_prevention(self):
        """Gets the dpop_proof_enforce_replay_prevention of this AuthorizationServerSettings.  # noqa: E501

        Determines whether Demonstrating Proof-of-Possession (DPoP) proof JWT replay prevention is enforced. The default value is false.  # noqa: E501

        :return: The dpop_proof_enforce_replay_prevention of this AuthorizationServerSettings.  # noqa: E501
        :rtype: bool
        """
        return self._dpop_proof_enforce_replay_prevention

    @dpop_proof_enforce_replay_prevention.setter
    def dpop_proof_enforce_replay_prevention(self, dpop_proof_enforce_replay_prevention):
        """Sets the dpop_proof_enforce_replay_prevention of this AuthorizationServerSettings.

        Determines whether Demonstrating Proof-of-Possession (DPoP) proof JWT replay prevention is enforced. The default value is false.  # noqa: E501

        :param dpop_proof_enforce_replay_prevention: The dpop_proof_enforce_replay_prevention of this AuthorizationServerSettings.  # noqa: E501
        :type: bool
        """

        self._dpop_proof_enforce_replay_prevention = dpop_proof_enforce_replay_prevention

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthorizationServerSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthorizationServerSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthorizationServerSettings):
            return True

        return self.to_dict() != other.to_dict()
