# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EmailVerificationConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_verification_enabled': 'bool',
        'verify_email_template_name': 'str',
        'email_verification_sent_template_name': 'str',
        'email_verification_success_template_name': 'str',
        'email_verification_error_template_name': 'str',
        'email_verification_type': 'str',
        'otp_length': 'int',
        'otp_retry_attempts': 'int',
        'allowed_otp_character_set': 'str',
        'otp_time_to_live': 'int',
        'email_verification_otp_template_name': 'str',
        'otl_time_to_live': 'int',
        'field_for_email_to_verify': 'str',
        'field_storing_verification_status': 'str',
        'notification_publisher_ref': 'ResourceLink',
        'require_verified_email': 'bool',
        'require_verified_email_template_name': 'str'
    }

    attribute_map = {
        'email_verification_enabled': 'emailVerificationEnabled',
        'verify_email_template_name': 'verifyEmailTemplateName',
        'email_verification_sent_template_name': 'emailVerificationSentTemplateName',
        'email_verification_success_template_name': 'emailVerificationSuccessTemplateName',
        'email_verification_error_template_name': 'emailVerificationErrorTemplateName',
        'email_verification_type': 'emailVerificationType',
        'otp_length': 'otpLength',
        'otp_retry_attempts': 'otpRetryAttempts',
        'allowed_otp_character_set': 'allowedOtpCharacterSet',
        'otp_time_to_live': 'otpTimeToLive',
        'email_verification_otp_template_name': 'emailVerificationOtpTemplateName',
        'otl_time_to_live': 'otlTimeToLive',
        'field_for_email_to_verify': 'fieldForEmailToVerify',
        'field_storing_verification_status': 'fieldStoringVerificationStatus',
        'notification_publisher_ref': 'notificationPublisherRef',
        'require_verified_email': 'requireVerifiedEmail',
        'require_verified_email_template_name': 'requireVerifiedEmailTemplateName'
    }

    def __init__(self, email_verification_enabled=None, verify_email_template_name=None, email_verification_sent_template_name=None, email_verification_success_template_name=None, email_verification_error_template_name=None, email_verification_type=None, otp_length=None, otp_retry_attempts=None, allowed_otp_character_set=None, otp_time_to_live=None, email_verification_otp_template_name=None, otl_time_to_live=None, field_for_email_to_verify=None, field_storing_verification_status=None, notification_publisher_ref=None, require_verified_email=None, require_verified_email_template_name=None, _configuration=None):  # noqa: E501
        """EmailVerificationConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._email_verification_enabled = None
        self._verify_email_template_name = None
        self._email_verification_sent_template_name = None
        self._email_verification_success_template_name = None
        self._email_verification_error_template_name = None
        self._email_verification_type = None
        self._otp_length = None
        self._otp_retry_attempts = None
        self._allowed_otp_character_set = None
        self._otp_time_to_live = None
        self._email_verification_otp_template_name = None
        self._otl_time_to_live = None
        self._field_for_email_to_verify = None
        self._field_storing_verification_status = None
        self._notification_publisher_ref = None
        self._require_verified_email = None
        self._require_verified_email_template_name = None
        self.discriminator = None

        if email_verification_enabled is not None:
            self.email_verification_enabled = email_verification_enabled
        if verify_email_template_name is not None:
            self.verify_email_template_name = verify_email_template_name
        if email_verification_sent_template_name is not None:
            self.email_verification_sent_template_name = email_verification_sent_template_name
        if email_verification_success_template_name is not None:
            self.email_verification_success_template_name = email_verification_success_template_name
        if email_verification_error_template_name is not None:
            self.email_verification_error_template_name = email_verification_error_template_name
        if email_verification_type is not None:
            self.email_verification_type = email_verification_type
        if otp_length is not None:
            self.otp_length = otp_length
        if otp_retry_attempts is not None:
            self.otp_retry_attempts = otp_retry_attempts
        if allowed_otp_character_set is not None:
            self.allowed_otp_character_set = allowed_otp_character_set
        if otp_time_to_live is not None:
            self.otp_time_to_live = otp_time_to_live
        if email_verification_otp_template_name is not None:
            self.email_verification_otp_template_name = email_verification_otp_template_name
        if otl_time_to_live is not None:
            self.otl_time_to_live = otl_time_to_live
        self.field_for_email_to_verify = field_for_email_to_verify
        self.field_storing_verification_status = field_storing_verification_status
        if notification_publisher_ref is not None:
            self.notification_publisher_ref = notification_publisher_ref
        if require_verified_email is not None:
            self.require_verified_email = require_verified_email
        if require_verified_email_template_name is not None:
            self.require_verified_email_template_name = require_verified_email_template_name

    @property
    def email_verification_enabled(self):
        """Gets the email_verification_enabled of this EmailVerificationConfig.  # noqa: E501

        Whether the email ownership verification is enabled.  # noqa: E501

        :return: The email_verification_enabled of this EmailVerificationConfig.  # noqa: E501
        :rtype: bool
        """
        return self._email_verification_enabled

    @email_verification_enabled.setter
    def email_verification_enabled(self, email_verification_enabled):
        """Sets the email_verification_enabled of this EmailVerificationConfig.

        Whether the email ownership verification is enabled.  # noqa: E501

        :param email_verification_enabled: The email_verification_enabled of this EmailVerificationConfig.  # noqa: E501
        :type: bool
        """

        self._email_verification_enabled = email_verification_enabled

    @property
    def verify_email_template_name(self):
        """Gets the verify_email_template_name of this EmailVerificationConfig.  # noqa: E501

        The template name for verify email. The default is message-template-email-ownership-verification.html.  # noqa: E501

        :return: The verify_email_template_name of this EmailVerificationConfig.  # noqa: E501
        :rtype: str
        """
        return self._verify_email_template_name

    @verify_email_template_name.setter
    def verify_email_template_name(self, verify_email_template_name):
        """Sets the verify_email_template_name of this EmailVerificationConfig.

        The template name for verify email. The default is message-template-email-ownership-verification.html.  # noqa: E501

        :param verify_email_template_name: The verify_email_template_name of this EmailVerificationConfig.  # noqa: E501
        :type: str
        """

        self._verify_email_template_name = verify_email_template_name

    @property
    def email_verification_sent_template_name(self):
        """Gets the email_verification_sent_template_name of this EmailVerificationConfig.  # noqa: E501

        The template name for email verification sent. The default is local.identity.email.verification.sent.html.<br>Note:Only applicable if EmailVerificationType is OTL.  # noqa: E501

        :return: The email_verification_sent_template_name of this EmailVerificationConfig.  # noqa: E501
        :rtype: str
        """
        return self._email_verification_sent_template_name

    @email_verification_sent_template_name.setter
    def email_verification_sent_template_name(self, email_verification_sent_template_name):
        """Sets the email_verification_sent_template_name of this EmailVerificationConfig.

        The template name for email verification sent. The default is local.identity.email.verification.sent.html.<br>Note:Only applicable if EmailVerificationType is OTL.  # noqa: E501

        :param email_verification_sent_template_name: The email_verification_sent_template_name of this EmailVerificationConfig.  # noqa: E501
        :type: str
        """

        self._email_verification_sent_template_name = email_verification_sent_template_name

    @property
    def email_verification_success_template_name(self):
        """Gets the email_verification_success_template_name of this EmailVerificationConfig.  # noqa: E501

        The template name for email verification success. The default is local.identity.email.verification.success.html.  # noqa: E501

        :return: The email_verification_success_template_name of this EmailVerificationConfig.  # noqa: E501
        :rtype: str
        """
        return self._email_verification_success_template_name

    @email_verification_success_template_name.setter
    def email_verification_success_template_name(self, email_verification_success_template_name):
        """Sets the email_verification_success_template_name of this EmailVerificationConfig.

        The template name for email verification success. The default is local.identity.email.verification.success.html.  # noqa: E501

        :param email_verification_success_template_name: The email_verification_success_template_name of this EmailVerificationConfig.  # noqa: E501
        :type: str
        """

        self._email_verification_success_template_name = email_verification_success_template_name

    @property
    def email_verification_error_template_name(self):
        """Gets the email_verification_error_template_name of this EmailVerificationConfig.  # noqa: E501

        The template name for email verification error.  The default is local.identity.email.verification.error.html.  # noqa: E501

        :return: The email_verification_error_template_name of this EmailVerificationConfig.  # noqa: E501
        :rtype: str
        """
        return self._email_verification_error_template_name

    @email_verification_error_template_name.setter
    def email_verification_error_template_name(self, email_verification_error_template_name):
        """Sets the email_verification_error_template_name of this EmailVerificationConfig.

        The template name for email verification error.  The default is local.identity.email.verification.error.html.  # noqa: E501

        :param email_verification_error_template_name: The email_verification_error_template_name of this EmailVerificationConfig.  # noqa: E501
        :type: str
        """

        self._email_verification_error_template_name = email_verification_error_template_name

    @property
    def email_verification_type(self):
        """Gets the email_verification_type of this EmailVerificationConfig.  # noqa: E501

        Email Verification Type.  # noqa: E501

        :return: The email_verification_type of this EmailVerificationConfig.  # noqa: E501
        :rtype: str
        """
        return self._email_verification_type

    @email_verification_type.setter
    def email_verification_type(self, email_verification_type):
        """Sets the email_verification_type of this EmailVerificationConfig.

        Email Verification Type.  # noqa: E501

        :param email_verification_type: The email_verification_type of this EmailVerificationConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["OTP", "OTL"]  # noqa: E501
        if (self._configuration.client_side_validation and
                email_verification_type not in allowed_values):
            raise ValueError(
                "Invalid value for `email_verification_type` ({0}), must be one of {1}"  # noqa: E501
                .format(email_verification_type, allowed_values)
            )

        self._email_verification_type = email_verification_type

    @property
    def otp_length(self):
        """Gets the otp_length of this EmailVerificationConfig.  # noqa: E501

        The OTP length generated for email verification. The default is 8.<br>Note: Only applicable if EmailVerificationType is OTP.  # noqa: E501

        :return: The otp_length of this EmailVerificationConfig.  # noqa: E501
        :rtype: int
        """
        return self._otp_length

    @otp_length.setter
    def otp_length(self, otp_length):
        """Sets the otp_length of this EmailVerificationConfig.

        The OTP length generated for email verification. The default is 8.<br>Note: Only applicable if EmailVerificationType is OTP.  # noqa: E501

        :param otp_length: The otp_length of this EmailVerificationConfig.  # noqa: E501
        :type: int
        """

        self._otp_length = otp_length

    @property
    def otp_retry_attempts(self):
        """Gets the otp_retry_attempts of this EmailVerificationConfig.  # noqa: E501

        The number of OTP retry attempts for email verification. The default is 3.<br>Note: Only applicable if EmailVerificationType is OTP.  # noqa: E501

        :return: The otp_retry_attempts of this EmailVerificationConfig.  # noqa: E501
        :rtype: int
        """
        return self._otp_retry_attempts

    @otp_retry_attempts.setter
    def otp_retry_attempts(self, otp_retry_attempts):
        """Sets the otp_retry_attempts of this EmailVerificationConfig.

        The number of OTP retry attempts for email verification. The default is 3.<br>Note: Only applicable if EmailVerificationType is OTP.  # noqa: E501

        :param otp_retry_attempts: The otp_retry_attempts of this EmailVerificationConfig.  # noqa: E501
        :type: int
        """

        self._otp_retry_attempts = otp_retry_attempts

    @property
    def allowed_otp_character_set(self):
        """Gets the allowed_otp_character_set of this EmailVerificationConfig.  # noqa: E501

        The allowed character set used to generate the OTP. The default is 23456789BCDFGHJKMNPQRSTVWXZbcdfghjkmnpqrstvwxz.<br>Note: Only applicable if EmailVerificationType is OTP.  # noqa: E501

        :return: The allowed_otp_character_set of this EmailVerificationConfig.  # noqa: E501
        :rtype: str
        """
        return self._allowed_otp_character_set

    @allowed_otp_character_set.setter
    def allowed_otp_character_set(self, allowed_otp_character_set):
        """Sets the allowed_otp_character_set of this EmailVerificationConfig.

        The allowed character set used to generate the OTP. The default is 23456789BCDFGHJKMNPQRSTVWXZbcdfghjkmnpqrstvwxz.<br>Note: Only applicable if EmailVerificationType is OTP.  # noqa: E501

        :param allowed_otp_character_set: The allowed_otp_character_set of this EmailVerificationConfig.  # noqa: E501
        :type: str
        """

        self._allowed_otp_character_set = allowed_otp_character_set

    @property
    def otp_time_to_live(self):
        """Gets the otp_time_to_live of this EmailVerificationConfig.  # noqa: E501

        Field used OTP time to live. The default is 15.<br>Note: Only applicable if EmailVerificationType is OTP.  # noqa: E501

        :return: The otp_time_to_live of this EmailVerificationConfig.  # noqa: E501
        :rtype: int
        """
        return self._otp_time_to_live

    @otp_time_to_live.setter
    def otp_time_to_live(self, otp_time_to_live):
        """Sets the otp_time_to_live of this EmailVerificationConfig.

        Field used OTP time to live. The default is 15.<br>Note: Only applicable if EmailVerificationType is OTP.  # noqa: E501

        :param otp_time_to_live: The otp_time_to_live of this EmailVerificationConfig.  # noqa: E501
        :type: int
        """

        self._otp_time_to_live = otp_time_to_live

    @property
    def email_verification_otp_template_name(self):
        """Gets the email_verification_otp_template_name of this EmailVerificationConfig.  # noqa: E501

        The template name for email verification OTP verification.  The default is local.identity.email.verification.otp.html.<br>Note: Only applicable if EmailVerificationType is OTP.  # noqa: E501

        :return: The email_verification_otp_template_name of this EmailVerificationConfig.  # noqa: E501
        :rtype: str
        """
        return self._email_verification_otp_template_name

    @email_verification_otp_template_name.setter
    def email_verification_otp_template_name(self, email_verification_otp_template_name):
        """Sets the email_verification_otp_template_name of this EmailVerificationConfig.

        The template name for email verification OTP verification.  The default is local.identity.email.verification.otp.html.<br>Note: Only applicable if EmailVerificationType is OTP.  # noqa: E501

        :param email_verification_otp_template_name: The email_verification_otp_template_name of this EmailVerificationConfig.  # noqa: E501
        :type: str
        """

        self._email_verification_otp_template_name = email_verification_otp_template_name

    @property
    def otl_time_to_live(self):
        """Gets the otl_time_to_live of this EmailVerificationConfig.  # noqa: E501

        Field used OTL time to live. The default is 1440.<br>Note: Only applicable if EmailVerificationType is OTL.  # noqa: E501

        :return: The otl_time_to_live of this EmailVerificationConfig.  # noqa: E501
        :rtype: int
        """
        return self._otl_time_to_live

    @otl_time_to_live.setter
    def otl_time_to_live(self, otl_time_to_live):
        """Sets the otl_time_to_live of this EmailVerificationConfig.

        Field used OTL time to live. The default is 1440.<br>Note: Only applicable if EmailVerificationType is OTL.  # noqa: E501

        :param otl_time_to_live: The otl_time_to_live of this EmailVerificationConfig.  # noqa: E501
        :type: int
        """

        self._otl_time_to_live = otl_time_to_live

    @property
    def field_for_email_to_verify(self):
        """Gets the field_for_email_to_verify of this EmailVerificationConfig.  # noqa: E501

        Field used for email ownership verification.<br>Note: Not required when emailVerificationEnabled is set to false.  # noqa: E501

        :return: The field_for_email_to_verify of this EmailVerificationConfig.  # noqa: E501
        :rtype: str
        """
        return self._field_for_email_to_verify

    @field_for_email_to_verify.setter
    def field_for_email_to_verify(self, field_for_email_to_verify):
        """Sets the field_for_email_to_verify of this EmailVerificationConfig.

        Field used for email ownership verification.<br>Note: Not required when emailVerificationEnabled is set to false.  # noqa: E501

        :param field_for_email_to_verify: The field_for_email_to_verify of this EmailVerificationConfig.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and field_for_email_to_verify is None:
            raise ValueError("Invalid value for `field_for_email_to_verify`, must not be `None`")  # noqa: E501

        self._field_for_email_to_verify = field_for_email_to_verify

    @property
    def field_storing_verification_status(self):
        """Gets the field_storing_verification_status of this EmailVerificationConfig.  # noqa: E501

        Field used for storing email verification status.<br>Note: Not required when emailVerificationEnabled is set to false.  # noqa: E501

        :return: The field_storing_verification_status of this EmailVerificationConfig.  # noqa: E501
        :rtype: str
        """
        return self._field_storing_verification_status

    @field_storing_verification_status.setter
    def field_storing_verification_status(self, field_storing_verification_status):
        """Sets the field_storing_verification_status of this EmailVerificationConfig.

        Field used for storing email verification status.<br>Note: Not required when emailVerificationEnabled is set to false.  # noqa: E501

        :param field_storing_verification_status: The field_storing_verification_status of this EmailVerificationConfig.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and field_storing_verification_status is None:
            raise ValueError("Invalid value for `field_storing_verification_status`, must not be `None`")  # noqa: E501

        self._field_storing_verification_status = field_storing_verification_status

    @property
    def notification_publisher_ref(self):
        """Gets the notification_publisher_ref of this EmailVerificationConfig.  # noqa: E501

        Reference to the associated notification publisher.  # noqa: E501

        :return: The notification_publisher_ref of this EmailVerificationConfig.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._notification_publisher_ref

    @notification_publisher_ref.setter
    def notification_publisher_ref(self, notification_publisher_ref):
        """Sets the notification_publisher_ref of this EmailVerificationConfig.

        Reference to the associated notification publisher.  # noqa: E501

        :param notification_publisher_ref: The notification_publisher_ref of this EmailVerificationConfig.  # noqa: E501
        :type: ResourceLink
        """

        self._notification_publisher_ref = notification_publisher_ref

    @property
    def require_verified_email(self):
        """Gets the require_verified_email of this EmailVerificationConfig.  # noqa: E501

        Whether the user must verify their email address before they can complete a single sign-on transaction. The default is false.  # noqa: E501

        :return: The require_verified_email of this EmailVerificationConfig.  # noqa: E501
        :rtype: bool
        """
        return self._require_verified_email

    @require_verified_email.setter
    def require_verified_email(self, require_verified_email):
        """Sets the require_verified_email of this EmailVerificationConfig.

        Whether the user must verify their email address before they can complete a single sign-on transaction. The default is false.  # noqa: E501

        :param require_verified_email: The require_verified_email of this EmailVerificationConfig.  # noqa: E501
        :type: bool
        """

        self._require_verified_email = require_verified_email

    @property
    def require_verified_email_template_name(self):
        """Gets the require_verified_email_template_name of this EmailVerificationConfig.  # noqa: E501

        The template to render when the user must verify their email address before they can complete a single sign-on transaction. The default is local.identity.email.verification.required.html.<br>Note:Only applicable if EmailVerificationType is OTL and requireVerifiedEmail is true.  # noqa: E501

        :return: The require_verified_email_template_name of this EmailVerificationConfig.  # noqa: E501
        :rtype: str
        """
        return self._require_verified_email_template_name

    @require_verified_email_template_name.setter
    def require_verified_email_template_name(self, require_verified_email_template_name):
        """Sets the require_verified_email_template_name of this EmailVerificationConfig.

        The template to render when the user must verify their email address before they can complete a single sign-on transaction. The default is local.identity.email.verification.required.html.<br>Note:Only applicable if EmailVerificationType is OTL and requireVerifiedEmail is true.  # noqa: E501

        :param require_verified_email_template_name: The require_verified_email_template_name of this EmailVerificationConfig.  # noqa: E501
        :type: str
        """

        self._require_verified_email_template_name = require_verified_email_template_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailVerificationConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailVerificationConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmailVerificationConfig):
            return True

        return self.to_dict() != other.to_dict()
