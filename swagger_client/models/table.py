# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Table(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schema': 'str',
        'table_name': 'str',
        'unique_id_column': 'str'
    }

    attribute_map = {
        'schema': 'schema',
        'table_name': 'tableName',
        'unique_id_column': 'uniqueIdColumn'
    }

    def __init__(self, schema=None, table_name=None, unique_id_column=None, _configuration=None):  # noqa: E501
        """Table - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._schema = None
        self._table_name = None
        self._unique_id_column = None
        self.discriminator = None

        self.schema = schema
        self.table_name = table_name
        self.unique_id_column = unique_id_column

    @property
    def schema(self):
        """Gets the schema of this Table.  # noqa: E501

        Lists the table structure that stores information within a database.  # noqa: E501

        :return: The schema of this Table.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this Table.

        Lists the table structure that stores information within a database.  # noqa: E501

        :param schema: The schema of this Table.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and schema is None:
            raise ValueError("Invalid value for `schema`, must not be `None`")  # noqa: E501

        self._schema = schema

    @property
    def table_name(self):
        """Gets the table_name of this Table.  # noqa: E501

        The name of the database table.  # noqa: E501

        :return: The table_name of this Table.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this Table.

        The name of the database table.  # noqa: E501

        :param table_name: The table_name of this Table.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")  # noqa: E501

        self._table_name = table_name

    @property
    def unique_id_column(self):
        """Gets the unique_id_column of this Table.  # noqa: E501

        The database column that uniquely identifies the provisioned user on the SP side.  # noqa: E501

        :return: The unique_id_column of this Table.  # noqa: E501
        :rtype: str
        """
        return self._unique_id_column

    @unique_id_column.setter
    def unique_id_column(self, unique_id_column):
        """Sets the unique_id_column of this Table.

        The database column that uniquely identifies the provisioned user on the SP side.  # noqa: E501

        :param unique_id_column: The unique_id_column of this Table.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and unique_id_column is None:
            raise ValueError("Invalid value for `unique_id_column`, must not be `None`")  # noqa: E501

        self._unique_id_column = unique_id_column

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Table, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Table):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Table):
            return True

        return self.to_dict() != other.to_dict()
