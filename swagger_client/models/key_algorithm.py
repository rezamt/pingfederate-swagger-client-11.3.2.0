# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class KeyAlgorithm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'key_sizes': 'list[int]',
        'default_key_size': 'int',
        'signature_algorithms': 'list[str]',
        'default_signature_algorithm': 'str'
    }

    attribute_map = {
        'name': 'name',
        'key_sizes': 'keySizes',
        'default_key_size': 'defaultKeySize',
        'signature_algorithms': 'signatureAlgorithms',
        'default_signature_algorithm': 'defaultSignatureAlgorithm'
    }

    def __init__(self, name=None, key_sizes=None, default_key_size=None, signature_algorithms=None, default_signature_algorithm=None, _configuration=None):  # noqa: E501
        """KeyAlgorithm - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._key_sizes = None
        self._default_key_size = None
        self._signature_algorithms = None
        self._default_signature_algorithm = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if key_sizes is not None:
            self.key_sizes = key_sizes
        if default_key_size is not None:
            self.default_key_size = default_key_size
        if signature_algorithms is not None:
            self.signature_algorithms = signature_algorithms
        if default_signature_algorithm is not None:
            self.default_signature_algorithm = default_signature_algorithm

    @property
    def name(self):
        """Gets the name of this KeyAlgorithm.  # noqa: E501

        Name of the key algorithm.  # noqa: E501

        :return: The name of this KeyAlgorithm.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KeyAlgorithm.

        Name of the key algorithm.  # noqa: E501

        :param name: The name of this KeyAlgorithm.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def key_sizes(self):
        """Gets the key_sizes of this KeyAlgorithm.  # noqa: E501

        Possible key sizes for this algorithm, in bits.  # noqa: E501

        :return: The key_sizes of this KeyAlgorithm.  # noqa: E501
        :rtype: list[int]
        """
        return self._key_sizes

    @key_sizes.setter
    def key_sizes(self, key_sizes):
        """Sets the key_sizes of this KeyAlgorithm.

        Possible key sizes for this algorithm, in bits.  # noqa: E501

        :param key_sizes: The key_sizes of this KeyAlgorithm.  # noqa: E501
        :type: list[int]
        """

        self._key_sizes = key_sizes

    @property
    def default_key_size(self):
        """Gets the default_key_size of this KeyAlgorithm.  # noqa: E501

        Default key size for this algorithm.  # noqa: E501

        :return: The default_key_size of this KeyAlgorithm.  # noqa: E501
        :rtype: int
        """
        return self._default_key_size

    @default_key_size.setter
    def default_key_size(self, default_key_size):
        """Sets the default_key_size of this KeyAlgorithm.

        Default key size for this algorithm.  # noqa: E501

        :param default_key_size: The default_key_size of this KeyAlgorithm.  # noqa: E501
        :type: int
        """

        self._default_key_size = default_key_size

    @property
    def signature_algorithms(self):
        """Gets the signature_algorithms of this KeyAlgorithm.  # noqa: E501

        Possible signature algorithms for this key algorithm.  # noqa: E501

        :return: The signature_algorithms of this KeyAlgorithm.  # noqa: E501
        :rtype: list[str]
        """
        return self._signature_algorithms

    @signature_algorithms.setter
    def signature_algorithms(self, signature_algorithms):
        """Sets the signature_algorithms of this KeyAlgorithm.

        Possible signature algorithms for this key algorithm.  # noqa: E501

        :param signature_algorithms: The signature_algorithms of this KeyAlgorithm.  # noqa: E501
        :type: list[str]
        """

        self._signature_algorithms = signature_algorithms

    @property
    def default_signature_algorithm(self):
        """Gets the default_signature_algorithm of this KeyAlgorithm.  # noqa: E501

        Default signature algorithm for this key algorithm.  # noqa: E501

        :return: The default_signature_algorithm of this KeyAlgorithm.  # noqa: E501
        :rtype: str
        """
        return self._default_signature_algorithm

    @default_signature_algorithm.setter
    def default_signature_algorithm(self, default_signature_algorithm):
        """Sets the default_signature_algorithm of this KeyAlgorithm.

        Default signature algorithm for this key algorithm.  # noqa: E501

        :param default_signature_algorithm: The default_signature_algorithm of this KeyAlgorithm.  # noqa: E501
        :type: str
        """

        self._default_signature_algorithm = default_signature_algorithm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KeyAlgorithm, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeyAlgorithm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KeyAlgorithm):
            return True

        return self.to_dict() != other.to_dict()
