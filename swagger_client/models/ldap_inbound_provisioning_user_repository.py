# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LdapInboundProvisioningUserRepository(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_store_ref': 'ResourceLink',
        'base_dn': 'str',
        'unique_user_id_filter': 'str',
        'unique_group_id_filter': 'str'
    }

    attribute_map = {
        'data_store_ref': 'dataStoreRef',
        'base_dn': 'baseDn',
        'unique_user_id_filter': 'uniqueUserIdFilter',
        'unique_group_id_filter': 'uniqueGroupIdFilter'
    }

    def __init__(self, data_store_ref=None, base_dn=None, unique_user_id_filter=None, unique_group_id_filter=None, _configuration=None):  # noqa: E501
        """LdapInboundProvisioningUserRepository - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._data_store_ref = None
        self._base_dn = None
        self._unique_user_id_filter = None
        self._unique_group_id_filter = None
        self.discriminator = None

        self.data_store_ref = data_store_ref
        if base_dn is not None:
            self.base_dn = base_dn
        self.unique_user_id_filter = unique_user_id_filter
        self.unique_group_id_filter = unique_group_id_filter

    @property
    def data_store_ref(self):
        """Gets the data_store_ref of this LdapInboundProvisioningUserRepository.  # noqa: E501

        Reference to the associated data store.  # noqa: E501

        :return: The data_store_ref of this LdapInboundProvisioningUserRepository.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._data_store_ref

    @data_store_ref.setter
    def data_store_ref(self, data_store_ref):
        """Sets the data_store_ref of this LdapInboundProvisioningUserRepository.

        Reference to the associated data store.  # noqa: E501

        :param data_store_ref: The data_store_ref of this LdapInboundProvisioningUserRepository.  # noqa: E501
        :type: ResourceLink
        """
        if self._configuration.client_side_validation and data_store_ref is None:
            raise ValueError("Invalid value for `data_store_ref`, must not be `None`")  # noqa: E501

        self._data_store_ref = data_store_ref

    @property
    def base_dn(self):
        """Gets the base_dn of this LdapInboundProvisioningUserRepository.  # noqa: E501

        The base DN to search from. If not specified, the search will start at the LDAP's root.  # noqa: E501

        :return: The base_dn of this LdapInboundProvisioningUserRepository.  # noqa: E501
        :rtype: str
        """
        return self._base_dn

    @base_dn.setter
    def base_dn(self, base_dn):
        """Sets the base_dn of this LdapInboundProvisioningUserRepository.

        The base DN to search from. If not specified, the search will start at the LDAP's root.  # noqa: E501

        :param base_dn: The base_dn of this LdapInboundProvisioningUserRepository.  # noqa: E501
        :type: str
        """

        self._base_dn = base_dn

    @property
    def unique_user_id_filter(self):
        """Gets the unique_user_id_filter of this LdapInboundProvisioningUserRepository.  # noqa: E501

        The expression that results in a unique user identifier, when combined with the Base DN.  # noqa: E501

        :return: The unique_user_id_filter of this LdapInboundProvisioningUserRepository.  # noqa: E501
        :rtype: str
        """
        return self._unique_user_id_filter

    @unique_user_id_filter.setter
    def unique_user_id_filter(self, unique_user_id_filter):
        """Sets the unique_user_id_filter of this LdapInboundProvisioningUserRepository.

        The expression that results in a unique user identifier, when combined with the Base DN.  # noqa: E501

        :param unique_user_id_filter: The unique_user_id_filter of this LdapInboundProvisioningUserRepository.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and unique_user_id_filter is None:
            raise ValueError("Invalid value for `unique_user_id_filter`, must not be `None`")  # noqa: E501

        self._unique_user_id_filter = unique_user_id_filter

    @property
    def unique_group_id_filter(self):
        """Gets the unique_group_id_filter of this LdapInboundProvisioningUserRepository.  # noqa: E501

        The expression that results in a unique group identifier, when combined with the Base DN.  # noqa: E501

        :return: The unique_group_id_filter of this LdapInboundProvisioningUserRepository.  # noqa: E501
        :rtype: str
        """
        return self._unique_group_id_filter

    @unique_group_id_filter.setter
    def unique_group_id_filter(self, unique_group_id_filter):
        """Sets the unique_group_id_filter of this LdapInboundProvisioningUserRepository.

        The expression that results in a unique group identifier, when combined with the Base DN.  # noqa: E501

        :param unique_group_id_filter: The unique_group_id_filter of this LdapInboundProvisioningUserRepository.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and unique_group_id_filter is None:
            raise ValueError("Invalid value for `unique_group_id_filter`, must not be `None`")  # noqa: E501

        self._unique_group_id_filter = unique_group_id_filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LdapInboundProvisioningUserRepository, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LdapInboundProvisioningUserRepository):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LdapInboundProvisioningUserRepository):
            return True

        return self.to_dict() != other.to_dict()
