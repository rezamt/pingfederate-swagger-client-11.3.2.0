# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IncomingProxySettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'forwarded_ip_address_header_name': 'str',
        'forwarded_ip_address_header_index': 'str',
        'forwarded_host_header_name': 'str',
        'forwarded_host_header_index': 'str',
        'client_cert_ssl_header_name': 'str',
        'client_cert_chain_ssl_header_name': 'str',
        'proxy_terminates_https_conns': 'bool'
    }

    attribute_map = {
        'forwarded_ip_address_header_name': 'forwardedIpAddressHeaderName',
        'forwarded_ip_address_header_index': 'forwardedIpAddressHeaderIndex',
        'forwarded_host_header_name': 'forwardedHostHeaderName',
        'forwarded_host_header_index': 'forwardedHostHeaderIndex',
        'client_cert_ssl_header_name': 'clientCertSSLHeaderName',
        'client_cert_chain_ssl_header_name': 'clientCertChainSSLHeaderName',
        'proxy_terminates_https_conns': 'proxyTerminatesHttpsConns'
    }

    def __init__(self, forwarded_ip_address_header_name=None, forwarded_ip_address_header_index=None, forwarded_host_header_name=None, forwarded_host_header_index=None, client_cert_ssl_header_name=None, client_cert_chain_ssl_header_name=None, proxy_terminates_https_conns=None, _configuration=None):  # noqa: E501
        """IncomingProxySettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._forwarded_ip_address_header_name = None
        self._forwarded_ip_address_header_index = None
        self._forwarded_host_header_name = None
        self._forwarded_host_header_index = None
        self._client_cert_ssl_header_name = None
        self._client_cert_chain_ssl_header_name = None
        self._proxy_terminates_https_conns = None
        self.discriminator = None

        if forwarded_ip_address_header_name is not None:
            self.forwarded_ip_address_header_name = forwarded_ip_address_header_name
        if forwarded_ip_address_header_index is not None:
            self.forwarded_ip_address_header_index = forwarded_ip_address_header_index
        if forwarded_host_header_name is not None:
            self.forwarded_host_header_name = forwarded_host_header_name
        if forwarded_host_header_index is not None:
            self.forwarded_host_header_index = forwarded_host_header_index
        if client_cert_ssl_header_name is not None:
            self.client_cert_ssl_header_name = client_cert_ssl_header_name
        if client_cert_chain_ssl_header_name is not None:
            self.client_cert_chain_ssl_header_name = client_cert_chain_ssl_header_name
        if proxy_terminates_https_conns is not None:
            self.proxy_terminates_https_conns = proxy_terminates_https_conns

    @property
    def forwarded_ip_address_header_name(self):
        """Gets the forwarded_ip_address_header_name of this IncomingProxySettings.  # noqa: E501

        Globally specify the header name (for example, X-Forwarded-For) where PingFederate should attempt to retrieve the client IP address in all HTTP requests.  # noqa: E501

        :return: The forwarded_ip_address_header_name of this IncomingProxySettings.  # noqa: E501
        :rtype: str
        """
        return self._forwarded_ip_address_header_name

    @forwarded_ip_address_header_name.setter
    def forwarded_ip_address_header_name(self, forwarded_ip_address_header_name):
        """Sets the forwarded_ip_address_header_name of this IncomingProxySettings.

        Globally specify the header name (for example, X-Forwarded-For) where PingFederate should attempt to retrieve the client IP address in all HTTP requests.  # noqa: E501

        :param forwarded_ip_address_header_name: The forwarded_ip_address_header_name of this IncomingProxySettings.  # noqa: E501
        :type: str
        """

        self._forwarded_ip_address_header_name = forwarded_ip_address_header_name

    @property
    def forwarded_ip_address_header_index(self):
        """Gets the forwarded_ip_address_header_index of this IncomingProxySettings.  # noqa: E501

        PingFederate combines multiple comma-separated header values into the same order that they are received. Define which IP address you want to use. Default is to use the last address.  # noqa: E501

        :return: The forwarded_ip_address_header_index of this IncomingProxySettings.  # noqa: E501
        :rtype: str
        """
        return self._forwarded_ip_address_header_index

    @forwarded_ip_address_header_index.setter
    def forwarded_ip_address_header_index(self, forwarded_ip_address_header_index):
        """Sets the forwarded_ip_address_header_index of this IncomingProxySettings.

        PingFederate combines multiple comma-separated header values into the same order that they are received. Define which IP address you want to use. Default is to use the last address.  # noqa: E501

        :param forwarded_ip_address_header_index: The forwarded_ip_address_header_index of this IncomingProxySettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["FIRST", "LAST"]  # noqa: E501
        if (self._configuration.client_side_validation and
                forwarded_ip_address_header_index not in allowed_values):
            raise ValueError(
                "Invalid value for `forwarded_ip_address_header_index` ({0}), must be one of {1}"  # noqa: E501
                .format(forwarded_ip_address_header_index, allowed_values)
            )

        self._forwarded_ip_address_header_index = forwarded_ip_address_header_index

    @property
    def forwarded_host_header_name(self):
        """Gets the forwarded_host_header_name of this IncomingProxySettings.  # noqa: E501

        Globally specify the header name (for example, X-Forwarded-Host) where PingFederate should attempt to retrieve the hostname and port in all HTTP requests.  # noqa: E501

        :return: The forwarded_host_header_name of this IncomingProxySettings.  # noqa: E501
        :rtype: str
        """
        return self._forwarded_host_header_name

    @forwarded_host_header_name.setter
    def forwarded_host_header_name(self, forwarded_host_header_name):
        """Sets the forwarded_host_header_name of this IncomingProxySettings.

        Globally specify the header name (for example, X-Forwarded-Host) where PingFederate should attempt to retrieve the hostname and port in all HTTP requests.  # noqa: E501

        :param forwarded_host_header_name: The forwarded_host_header_name of this IncomingProxySettings.  # noqa: E501
        :type: str
        """

        self._forwarded_host_header_name = forwarded_host_header_name

    @property
    def forwarded_host_header_index(self):
        """Gets the forwarded_host_header_index of this IncomingProxySettings.  # noqa: E501

        PingFederate combines multiple comma-separated header values into the same order that they are received. Define which hostname you want to use. Default is to use the last hostname.  # noqa: E501

        :return: The forwarded_host_header_index of this IncomingProxySettings.  # noqa: E501
        :rtype: str
        """
        return self._forwarded_host_header_index

    @forwarded_host_header_index.setter
    def forwarded_host_header_index(self, forwarded_host_header_index):
        """Sets the forwarded_host_header_index of this IncomingProxySettings.

        PingFederate combines multiple comma-separated header values into the same order that they are received. Define which hostname you want to use. Default is to use the last hostname.  # noqa: E501

        :param forwarded_host_header_index: The forwarded_host_header_index of this IncomingProxySettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["FIRST", "LAST"]  # noqa: E501
        if (self._configuration.client_side_validation and
                forwarded_host_header_index not in allowed_values):
            raise ValueError(
                "Invalid value for `forwarded_host_header_index` ({0}), must be one of {1}"  # noqa: E501
                .format(forwarded_host_header_index, allowed_values)
            )

        self._forwarded_host_header_index = forwarded_host_header_index

    @property
    def client_cert_ssl_header_name(self):
        """Gets the client_cert_ssl_header_name of this IncomingProxySettings.  # noqa: E501

        While the proxy server is configured to pass client certificates as HTTP request headers, specify the header name here.  # noqa: E501

        :return: The client_cert_ssl_header_name of this IncomingProxySettings.  # noqa: E501
        :rtype: str
        """
        return self._client_cert_ssl_header_name

    @client_cert_ssl_header_name.setter
    def client_cert_ssl_header_name(self, client_cert_ssl_header_name):
        """Sets the client_cert_ssl_header_name of this IncomingProxySettings.

        While the proxy server is configured to pass client certificates as HTTP request headers, specify the header name here.  # noqa: E501

        :param client_cert_ssl_header_name: The client_cert_ssl_header_name of this IncomingProxySettings.  # noqa: E501
        :type: str
        """

        self._client_cert_ssl_header_name = client_cert_ssl_header_name

    @property
    def client_cert_chain_ssl_header_name(self):
        """Gets the client_cert_chain_ssl_header_name of this IncomingProxySettings.  # noqa: E501

        While the proxy server is configured to pass client certificates as HTTP request headers, specify the chain header name here.  # noqa: E501

        :return: The client_cert_chain_ssl_header_name of this IncomingProxySettings.  # noqa: E501
        :rtype: str
        """
        return self._client_cert_chain_ssl_header_name

    @client_cert_chain_ssl_header_name.setter
    def client_cert_chain_ssl_header_name(self, client_cert_chain_ssl_header_name):
        """Sets the client_cert_chain_ssl_header_name of this IncomingProxySettings.

        While the proxy server is configured to pass client certificates as HTTP request headers, specify the chain header name here.  # noqa: E501

        :param client_cert_chain_ssl_header_name: The client_cert_chain_ssl_header_name of this IncomingProxySettings.  # noqa: E501
        :type: str
        """

        self._client_cert_chain_ssl_header_name = client_cert_chain_ssl_header_name

    @property
    def proxy_terminates_https_conns(self):
        """Gets the proxy_terminates_https_conns of this IncomingProxySettings.  # noqa: E501

        Allows you to globally specify that connections to the reverse proxy are made over HTTPS even when HTTP is used between the reverse proxy and PingFederate.  # noqa: E501

        :return: The proxy_terminates_https_conns of this IncomingProxySettings.  # noqa: E501
        :rtype: bool
        """
        return self._proxy_terminates_https_conns

    @proxy_terminates_https_conns.setter
    def proxy_terminates_https_conns(self, proxy_terminates_https_conns):
        """Sets the proxy_terminates_https_conns of this IncomingProxySettings.

        Allows you to globally specify that connections to the reverse proxy are made over HTTPS even when HTTP is used between the reverse proxy and PingFederate.  # noqa: E501

        :param proxy_terminates_https_conns: The proxy_terminates_https_conns of this IncomingProxySettings.  # noqa: E501
        :type: bool
        """

        self._proxy_terminates_https_conns = proxy_terminates_https_conns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IncomingProxySettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncomingProxySettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IncomingProxySettings):
            return True

        return self.to_dict() != other.to_dict()
