# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OutboundProvision(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'target_settings': 'list[ConfigField]',
        'custom_schema': 'Schema',
        'channels': 'list[Channel]'
    }

    attribute_map = {
        'type': 'type',
        'target_settings': 'targetSettings',
        'custom_schema': 'customSchema',
        'channels': 'channels'
    }

    def __init__(self, type=None, target_settings=None, custom_schema=None, channels=None, _configuration=None):  # noqa: E501
        """OutboundProvision - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._target_settings = None
        self._custom_schema = None
        self._channels = None
        self.discriminator = None

        self.type = type
        self.target_settings = target_settings
        if custom_schema is not None:
            self.custom_schema = custom_schema
        self.channels = channels

    @property
    def type(self):
        """Gets the type of this OutboundProvision.  # noqa: E501

        The SaaS plugin type.  # noqa: E501

        :return: The type of this OutboundProvision.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OutboundProvision.

        The SaaS plugin type.  # noqa: E501

        :param type: The type of this OutboundProvision.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def target_settings(self):
        """Gets the target_settings of this OutboundProvision.  # noqa: E501

        Configuration fields that includes credentials to target SaaS application.  # noqa: E501

        :return: The target_settings of this OutboundProvision.  # noqa: E501
        :rtype: list[ConfigField]
        """
        return self._target_settings

    @target_settings.setter
    def target_settings(self, target_settings):
        """Sets the target_settings of this OutboundProvision.

        Configuration fields that includes credentials to target SaaS application.  # noqa: E501

        :param target_settings: The target_settings of this OutboundProvision.  # noqa: E501
        :type: list[ConfigField]
        """
        if self._configuration.client_side_validation and target_settings is None:
            raise ValueError("Invalid value for `target_settings`, must not be `None`")  # noqa: E501

        self._target_settings = target_settings

    @property
    def custom_schema(self):
        """Gets the custom_schema of this OutboundProvision.  # noqa: E501

        Custom SCIM attribute configuration.  # noqa: E501

        :return: The custom_schema of this OutboundProvision.  # noqa: E501
        :rtype: Schema
        """
        return self._custom_schema

    @custom_schema.setter
    def custom_schema(self, custom_schema):
        """Sets the custom_schema of this OutboundProvision.

        Custom SCIM attribute configuration.  # noqa: E501

        :param custom_schema: The custom_schema of this OutboundProvision.  # noqa: E501
        :type: Schema
        """

        self._custom_schema = custom_schema

    @property
    def channels(self):
        """Gets the channels of this OutboundProvision.  # noqa: E501

        Includes settings of a source data store, managing provisioning threads and mapping of attributes.  # noqa: E501

        :return: The channels of this OutboundProvision.  # noqa: E501
        :rtype: list[Channel]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this OutboundProvision.

        Includes settings of a source data store, managing provisioning threads and mapping of attributes.  # noqa: E501

        :param channels: The channels of this OutboundProvision.  # noqa: E501
        :type: list[Channel]
        """
        if self._configuration.client_side_validation and channels is None:
            raise ValueError("Invalid value for `channels`, must not be `None`")  # noqa: E501

        self._channels = channels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OutboundProvision, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OutboundProvision):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OutboundProvision):
            return True

        return self.to_dict() != other.to_dict()
