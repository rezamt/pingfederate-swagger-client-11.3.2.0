# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class InboundBackChannelAuth(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'verification_subject_dn': 'str',
        'verification_issuer_dn': 'str',
        'certs': 'list[ConnectionCert]',
        'require_ssl': 'bool'
    }

    attribute_map = {
        'verification_subject_dn': 'verificationSubjectDN',
        'verification_issuer_dn': 'verificationIssuerDN',
        'certs': 'certs',
        'require_ssl': 'requireSsl'
    }

    def __init__(self, verification_subject_dn=None, verification_issuer_dn=None, certs=None, require_ssl=None, _configuration=None):  # noqa: E501
        """InboundBackChannelAuth - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._verification_subject_dn = None
        self._verification_issuer_dn = None
        self._certs = None
        self._require_ssl = None
        self.discriminator = None

        if verification_subject_dn is not None:
            self.verification_subject_dn = verification_subject_dn
        if verification_issuer_dn is not None:
            self.verification_issuer_dn = verification_issuer_dn
        if certs is not None:
            self.certs = certs
        if require_ssl is not None:
            self.require_ssl = require_ssl

    @property
    def verification_subject_dn(self):
        """Gets the verification_subject_dn of this InboundBackChannelAuth.  # noqa: E501

        If this property is set, the verification trust model is Anchored. The verification certificate must be signed by a trusted CA and included in the incoming message, and the subject DN of the expected certificate is specified in this property. If this property is not set, then a primary verification certificate must be specified in the certs array.  # noqa: E501

        :return: The verification_subject_dn of this InboundBackChannelAuth.  # noqa: E501
        :rtype: str
        """
        return self._verification_subject_dn

    @verification_subject_dn.setter
    def verification_subject_dn(self, verification_subject_dn):
        """Sets the verification_subject_dn of this InboundBackChannelAuth.

        If this property is set, the verification trust model is Anchored. The verification certificate must be signed by a trusted CA and included in the incoming message, and the subject DN of the expected certificate is specified in this property. If this property is not set, then a primary verification certificate must be specified in the certs array.  # noqa: E501

        :param verification_subject_dn: The verification_subject_dn of this InboundBackChannelAuth.  # noqa: E501
        :type: str
        """

        self._verification_subject_dn = verification_subject_dn

    @property
    def verification_issuer_dn(self):
        """Gets the verification_issuer_dn of this InboundBackChannelAuth.  # noqa: E501

        If a verification Subject DN is provided, you can optionally restrict the issuer to a specific trusted CA by specifying its DN in this field.  # noqa: E501

        :return: The verification_issuer_dn of this InboundBackChannelAuth.  # noqa: E501
        :rtype: str
        """
        return self._verification_issuer_dn

    @verification_issuer_dn.setter
    def verification_issuer_dn(self, verification_issuer_dn):
        """Sets the verification_issuer_dn of this InboundBackChannelAuth.

        If a verification Subject DN is provided, you can optionally restrict the issuer to a specific trusted CA by specifying its DN in this field.  # noqa: E501

        :param verification_issuer_dn: The verification_issuer_dn of this InboundBackChannelAuth.  # noqa: E501
        :type: str
        """

        self._verification_issuer_dn = verification_issuer_dn

    @property
    def certs(self):
        """Gets the certs of this InboundBackChannelAuth.  # noqa: E501

        The certificate used for signature verification and XML encryption.  # noqa: E501

        :return: The certs of this InboundBackChannelAuth.  # noqa: E501
        :rtype: list[ConnectionCert]
        """
        return self._certs

    @certs.setter
    def certs(self, certs):
        """Sets the certs of this InboundBackChannelAuth.

        The certificate used for signature verification and XML encryption.  # noqa: E501

        :param certs: The certs of this InboundBackChannelAuth.  # noqa: E501
        :type: list[ConnectionCert]
        """

        self._certs = certs

    @property
    def require_ssl(self):
        """Gets the require_ssl of this InboundBackChannelAuth.  # noqa: E501

        Incoming HTTP transmissions must use a secure channel.  # noqa: E501

        :return: The require_ssl of this InboundBackChannelAuth.  # noqa: E501
        :rtype: bool
        """
        return self._require_ssl

    @require_ssl.setter
    def require_ssl(self, require_ssl):
        """Sets the require_ssl of this InboundBackChannelAuth.

        Incoming HTTP transmissions must use a secure channel.  # noqa: E501

        :param require_ssl: The require_ssl of this InboundBackChannelAuth.  # noqa: E501
        :type: bool
        """

        self._require_ssl = require_ssl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InboundBackChannelAuth, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InboundBackChannelAuth):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InboundBackChannelAuth):
            return True

        return self.to_dict() != other.to_dict()
