# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RegistrationConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'captcha_enabled': 'bool',
        'captcha_provider_ref': 'ResourceLink',
        'template_name': 'str',
        'create_authn_session_after_registration': 'bool',
        'username_field': 'str',
        'this_is_my_device_enabled': 'bool',
        'registration_workflow': 'ResourceLink',
        'execute_workflow': 'str'
    }

    attribute_map = {
        'captcha_enabled': 'captchaEnabled',
        'captcha_provider_ref': 'captchaProviderRef',
        'template_name': 'templateName',
        'create_authn_session_after_registration': 'createAuthnSessionAfterRegistration',
        'username_field': 'usernameField',
        'this_is_my_device_enabled': 'thisIsMyDeviceEnabled',
        'registration_workflow': 'registrationWorkflow',
        'execute_workflow': 'executeWorkflow'
    }

    def __init__(self, captcha_enabled=None, captcha_provider_ref=None, template_name=None, create_authn_session_after_registration=None, username_field=None, this_is_my_device_enabled=None, registration_workflow=None, execute_workflow=None, _configuration=None):  # noqa: E501
        """RegistrationConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._captcha_enabled = None
        self._captcha_provider_ref = None
        self._template_name = None
        self._create_authn_session_after_registration = None
        self._username_field = None
        self._this_is_my_device_enabled = None
        self._registration_workflow = None
        self._execute_workflow = None
        self.discriminator = None

        if captcha_enabled is not None:
            self.captcha_enabled = captcha_enabled
        if captcha_provider_ref is not None:
            self.captcha_provider_ref = captcha_provider_ref
        self.template_name = template_name
        if create_authn_session_after_registration is not None:
            self.create_authn_session_after_registration = create_authn_session_after_registration
        if username_field is not None:
            self.username_field = username_field
        if this_is_my_device_enabled is not None:
            self.this_is_my_device_enabled = this_is_my_device_enabled
        if registration_workflow is not None:
            self.registration_workflow = registration_workflow
        if execute_workflow is not None:
            self.execute_workflow = execute_workflow

    @property
    def captcha_enabled(self):
        """Gets the captcha_enabled of this RegistrationConfig.  # noqa: E501

        Whether CAPTCHA is enabled or not in the registration configuration.  # noqa: E501

        :return: The captcha_enabled of this RegistrationConfig.  # noqa: E501
        :rtype: bool
        """
        return self._captcha_enabled

    @captcha_enabled.setter
    def captcha_enabled(self, captcha_enabled):
        """Sets the captcha_enabled of this RegistrationConfig.

        Whether CAPTCHA is enabled or not in the registration configuration.  # noqa: E501

        :param captcha_enabled: The captcha_enabled of this RegistrationConfig.  # noqa: E501
        :type: bool
        """

        self._captcha_enabled = captcha_enabled

    @property
    def captcha_provider_ref(self):
        """Gets the captcha_provider_ref of this RegistrationConfig.  # noqa: E501

        Reference to the associated CAPTCHA provider.  # noqa: E501

        :return: The captcha_provider_ref of this RegistrationConfig.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._captcha_provider_ref

    @captcha_provider_ref.setter
    def captcha_provider_ref(self, captcha_provider_ref):
        """Sets the captcha_provider_ref of this RegistrationConfig.

        Reference to the associated CAPTCHA provider.  # noqa: E501

        :param captcha_provider_ref: The captcha_provider_ref of this RegistrationConfig.  # noqa: E501
        :type: ResourceLink
        """

        self._captcha_provider_ref = captcha_provider_ref

    @property
    def template_name(self):
        """Gets the template_name of this RegistrationConfig.  # noqa: E501

        The template name for the registration configuration.  # noqa: E501

        :return: The template_name of this RegistrationConfig.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this RegistrationConfig.

        The template name for the registration configuration.  # noqa: E501

        :param template_name: The template_name of this RegistrationConfig.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")  # noqa: E501

        self._template_name = template_name

    @property
    def create_authn_session_after_registration(self):
        """Gets the create_authn_session_after_registration of this RegistrationConfig.  # noqa: E501

        Whether to create an Authentication Session when registering a local account. Default is true.  # noqa: E501

        :return: The create_authn_session_after_registration of this RegistrationConfig.  # noqa: E501
        :rtype: bool
        """
        return self._create_authn_session_after_registration

    @create_authn_session_after_registration.setter
    def create_authn_session_after_registration(self, create_authn_session_after_registration):
        """Sets the create_authn_session_after_registration of this RegistrationConfig.

        Whether to create an Authentication Session when registering a local account. Default is true.  # noqa: E501

        :param create_authn_session_after_registration: The create_authn_session_after_registration of this RegistrationConfig.  # noqa: E501
        :type: bool
        """

        self._create_authn_session_after_registration = create_authn_session_after_registration

    @property
    def username_field(self):
        """Gets the username_field of this RegistrationConfig.  # noqa: E501

        When creating an Authentication Session after registering a local account, PingFederate will pass the Unique ID field's value as the username. If the Unique ID value is not the username, then override which field's value will be used as the username.  # noqa: E501

        :return: The username_field of this RegistrationConfig.  # noqa: E501
        :rtype: str
        """
        return self._username_field

    @username_field.setter
    def username_field(self, username_field):
        """Sets the username_field of this RegistrationConfig.

        When creating an Authentication Session after registering a local account, PingFederate will pass the Unique ID field's value as the username. If the Unique ID value is not the username, then override which field's value will be used as the username.  # noqa: E501

        :param username_field: The username_field of this RegistrationConfig.  # noqa: E501
        :type: str
        """

        self._username_field = username_field

    @property
    def this_is_my_device_enabled(self):
        """Gets the this_is_my_device_enabled of this RegistrationConfig.  # noqa: E501

        Allows users to indicate whether their device is shared or private. In this mode, PingFederate Authentication Sessions will not be stored unless the user indicates the device is private.  # noqa: E501

        :return: The this_is_my_device_enabled of this RegistrationConfig.  # noqa: E501
        :rtype: bool
        """
        return self._this_is_my_device_enabled

    @this_is_my_device_enabled.setter
    def this_is_my_device_enabled(self, this_is_my_device_enabled):
        """Sets the this_is_my_device_enabled of this RegistrationConfig.

        Allows users to indicate whether their device is shared or private. In this mode, PingFederate Authentication Sessions will not be stored unless the user indicates the device is private.  # noqa: E501

        :param this_is_my_device_enabled: The this_is_my_device_enabled of this RegistrationConfig.  # noqa: E501
        :type: bool
        """

        self._this_is_my_device_enabled = this_is_my_device_enabled

    @property
    def registration_workflow(self):
        """Gets the registration_workflow of this RegistrationConfig.  # noqa: E501

        The policy fragment to be executed as part of the registration workflow.  # noqa: E501

        :return: The registration_workflow of this RegistrationConfig.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._registration_workflow

    @registration_workflow.setter
    def registration_workflow(self, registration_workflow):
        """Sets the registration_workflow of this RegistrationConfig.

        The policy fragment to be executed as part of the registration workflow.  # noqa: E501

        :param registration_workflow: The registration_workflow of this RegistrationConfig.  # noqa: E501
        :type: ResourceLink
        """

        self._registration_workflow = registration_workflow

    @property
    def execute_workflow(self):
        """Gets the execute_workflow of this RegistrationConfig.  # noqa: E501

        This setting indicates whether PingFederate should execute the workflow before or after account creation. The default is to run the registration workflow after account creation.  # noqa: E501

        :return: The execute_workflow of this RegistrationConfig.  # noqa: E501
        :rtype: str
        """
        return self._execute_workflow

    @execute_workflow.setter
    def execute_workflow(self, execute_workflow):
        """Sets the execute_workflow of this RegistrationConfig.

        This setting indicates whether PingFederate should execute the workflow before or after account creation. The default is to run the registration workflow after account creation.  # noqa: E501

        :param execute_workflow: The execute_workflow of this RegistrationConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["BEFORE_ACCOUNT_CREATION", "AFTER_ACCOUNT_CREATION"]  # noqa: E501
        if (self._configuration.client_side_validation and
                execute_workflow not in allowed_values):
            raise ValueError(
                "Invalid value for `execute_workflow` ({0}), must be one of {1}"  # noqa: E501
                .format(execute_workflow, allowed_values)
            )

        self._execute_workflow = execute_workflow

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegistrationConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegistrationConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RegistrationConfig):
            return True

        return self.to_dict() != other.to_dict()
