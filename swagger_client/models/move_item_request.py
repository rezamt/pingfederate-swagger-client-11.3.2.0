# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class MoveItemRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'location': 'str',
        'move_to_id': 'str'
    }

    attribute_map = {
        'location': 'location',
        'move_to_id': 'moveToId'
    }

    def __init__(self, location=None, move_to_id=None, _configuration=None):  # noqa: E501
        """MoveItemRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._location = None
        self._move_to_id = None
        self.discriminator = None

        self.location = location
        if move_to_id is not None:
            self.move_to_id = move_to_id

    @property
    def location(self):
        """Gets the location of this MoveItemRequest.  # noqa: E501

        Enumeration for where to move the item.  # noqa: E501

        :return: The location of this MoveItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this MoveItemRequest.

        Enumeration for where to move the item.  # noqa: E501

        :param location: The location of this MoveItemRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501
        allowed_values = ["START", "END", "BEFORE", "AFTER"]  # noqa: E501
        if (self._configuration.client_side_validation and
                location not in allowed_values):
            raise ValueError(
                "Invalid value for `location` ({0}), must be one of {1}"  # noqa: E501
                .format(location, allowed_values)
            )

        self._location = location

    @property
    def move_to_id(self):
        """Gets the move_to_id of this MoveItemRequest.  # noqa: E501

        When moving an item relative to another, this value indicates the target move-to ID.  # noqa: E501

        :return: The move_to_id of this MoveItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._move_to_id

    @move_to_id.setter
    def move_to_id(self, move_to_id):
        """Sets the move_to_id of this MoveItemRequest.

        When moving an item relative to another, this value indicates the target move-to ID.  # noqa: E501

        :param move_to_id: The move_to_id of this MoveItemRequest.  # noqa: E501
        :type: str
        """

        self._move_to_id = move_to_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MoveItemRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MoveItemRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MoveItemRequest):
            return True

        return self.to_dict() != other.to_dict()
