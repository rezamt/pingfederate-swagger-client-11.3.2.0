# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FragmentPolicyAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute_rules': 'AttributeRules',
        'fragment': 'ResourceLink',
        'fragment_mapping': 'AttributeMapping'
    }

    attribute_map = {
        'attribute_rules': 'attributeRules',
        'fragment': 'fragment',
        'fragment_mapping': 'fragmentMapping'
    }

    def __init__(self, attribute_rules=None, fragment=None, fragment_mapping=None, _configuration=None):  # noqa: E501
        """FragmentPolicyAction - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._attribute_rules = None
        self._fragment = None
        self._fragment_mapping = None
        self.discriminator = None

        if attribute_rules is not None:
            self.attribute_rules = attribute_rules
        self.fragment = fragment
        if fragment_mapping is not None:
            self.fragment_mapping = fragment_mapping

    @property
    def attribute_rules(self):
        """Gets the attribute_rules of this FragmentPolicyAction.  # noqa: E501

        The authentication policy rules.  # noqa: E501

        :return: The attribute_rules of this FragmentPolicyAction.  # noqa: E501
        :rtype: AttributeRules
        """
        return self._attribute_rules

    @attribute_rules.setter
    def attribute_rules(self, attribute_rules):
        """Sets the attribute_rules of this FragmentPolicyAction.

        The authentication policy rules.  # noqa: E501

        :param attribute_rules: The attribute_rules of this FragmentPolicyAction.  # noqa: E501
        :type: AttributeRules
        """

        self._attribute_rules = attribute_rules

    @property
    def fragment(self):
        """Gets the fragment of this FragmentPolicyAction.  # noqa: E501

        Reference to the associated authentication fragment.  # noqa: E501

        :return: The fragment of this FragmentPolicyAction.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._fragment

    @fragment.setter
    def fragment(self, fragment):
        """Sets the fragment of this FragmentPolicyAction.

        Reference to the associated authentication fragment.  # noqa: E501

        :param fragment: The fragment of this FragmentPolicyAction.  # noqa: E501
        :type: ResourceLink
        """
        if self._configuration.client_side_validation and fragment is None:
            raise ValueError("Invalid value for `fragment`, must not be `None`")  # noqa: E501

        self._fragment = fragment

    @property
    def fragment_mapping(self):
        """Gets the fragment_mapping of this FragmentPolicyAction.  # noqa: E501

        The fragment mapping for attributes to be passed into the authentication fragment.  # noqa: E501

        :return: The fragment_mapping of this FragmentPolicyAction.  # noqa: E501
        :rtype: AttributeMapping
        """
        return self._fragment_mapping

    @fragment_mapping.setter
    def fragment_mapping(self, fragment_mapping):
        """Sets the fragment_mapping of this FragmentPolicyAction.

        The fragment mapping for attributes to be passed into the authentication fragment.  # noqa: E501

        :param fragment_mapping: The fragment_mapping of this FragmentPolicyAction.  # noqa: E501
        :type: AttributeMapping
        """

        self._fragment_mapping = fragment_mapping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FragmentPolicyAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FragmentPolicyAction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FragmentPolicyAction):
            return True

        return self.to_dict() != other.to_dict()
