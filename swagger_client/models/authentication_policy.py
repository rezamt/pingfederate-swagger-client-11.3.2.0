# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AuthenticationPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fail_if_no_selection': 'bool',
        'authn_selection_trees': 'list[AuthenticationPolicyTree]',
        'default_authentication_sources': 'list[AuthenticationSource]',
        'tracked_http_parameters': 'list[str]'
    }

    attribute_map = {
        'fail_if_no_selection': 'failIfNoSelection',
        'authn_selection_trees': 'authnSelectionTrees',
        'default_authentication_sources': 'defaultAuthenticationSources',
        'tracked_http_parameters': 'trackedHttpParameters'
    }

    def __init__(self, fail_if_no_selection=None, authn_selection_trees=None, default_authentication_sources=None, tracked_http_parameters=None, _configuration=None):  # noqa: E501
        """AuthenticationPolicy - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._fail_if_no_selection = None
        self._authn_selection_trees = None
        self._default_authentication_sources = None
        self._tracked_http_parameters = None
        self.discriminator = None

        if fail_if_no_selection is not None:
            self.fail_if_no_selection = fail_if_no_selection
        if authn_selection_trees is not None:
            self.authn_selection_trees = authn_selection_trees
        if default_authentication_sources is not None:
            self.default_authentication_sources = default_authentication_sources
        if tracked_http_parameters is not None:
            self.tracked_http_parameters = tracked_http_parameters

    @property
    def fail_if_no_selection(self):
        """Gets the fail_if_no_selection of this AuthenticationPolicy.  # noqa: E501

        Fail if policy finds no authentication source.  # noqa: E501

        :return: The fail_if_no_selection of this AuthenticationPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._fail_if_no_selection

    @fail_if_no_selection.setter
    def fail_if_no_selection(self, fail_if_no_selection):
        """Sets the fail_if_no_selection of this AuthenticationPolicy.

        Fail if policy finds no authentication source.  # noqa: E501

        :param fail_if_no_selection: The fail_if_no_selection of this AuthenticationPolicy.  # noqa: E501
        :type: bool
        """

        self._fail_if_no_selection = fail_if_no_selection

    @property
    def authn_selection_trees(self):
        """Gets the authn_selection_trees of this AuthenticationPolicy.  # noqa: E501

        The list of authentication policy trees.  # noqa: E501

        :return: The authn_selection_trees of this AuthenticationPolicy.  # noqa: E501
        :rtype: list[AuthenticationPolicyTree]
        """
        return self._authn_selection_trees

    @authn_selection_trees.setter
    def authn_selection_trees(self, authn_selection_trees):
        """Sets the authn_selection_trees of this AuthenticationPolicy.

        The list of authentication policy trees.  # noqa: E501

        :param authn_selection_trees: The authn_selection_trees of this AuthenticationPolicy.  # noqa: E501
        :type: list[AuthenticationPolicyTree]
        """

        self._authn_selection_trees = authn_selection_trees

    @property
    def default_authentication_sources(self):
        """Gets the default_authentication_sources of this AuthenticationPolicy.  # noqa: E501

        The default authentication sources.  # noqa: E501

        :return: The default_authentication_sources of this AuthenticationPolicy.  # noqa: E501
        :rtype: list[AuthenticationSource]
        """
        return self._default_authentication_sources

    @default_authentication_sources.setter
    def default_authentication_sources(self, default_authentication_sources):
        """Sets the default_authentication_sources of this AuthenticationPolicy.

        The default authentication sources.  # noqa: E501

        :param default_authentication_sources: The default_authentication_sources of this AuthenticationPolicy.  # noqa: E501
        :type: list[AuthenticationSource]
        """

        self._default_authentication_sources = default_authentication_sources

    @property
    def tracked_http_parameters(self):
        """Gets the tracked_http_parameters of this AuthenticationPolicy.  # noqa: E501

        The HTTP request parameters to track and make available to authentication sources, selectors, and contract mappings throughout the authentication policy.  # noqa: E501

        :return: The tracked_http_parameters of this AuthenticationPolicy.  # noqa: E501
        :rtype: list[str]
        """
        return self._tracked_http_parameters

    @tracked_http_parameters.setter
    def tracked_http_parameters(self, tracked_http_parameters):
        """Sets the tracked_http_parameters of this AuthenticationPolicy.

        The HTTP request parameters to track and make available to authentication sources, selectors, and contract mappings throughout the authentication policy.  # noqa: E501

        :param tracked_http_parameters: The tracked_http_parameters of this AuthenticationPolicy.  # noqa: E501
        :type: list[str]
        """

        self._tracked_http_parameters = tracked_http_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthenticationPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthenticationPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthenticationPolicy):
            return True

        return self.to_dict() != other.to_dict()
