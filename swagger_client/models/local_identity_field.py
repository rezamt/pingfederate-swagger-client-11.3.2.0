# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LocalIdentityField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'label': 'str',
        'registration_page_field': 'bool',
        'profile_page_field': 'bool',
        'attributes': 'dict(str, bool)'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'label': 'label',
        'registration_page_field': 'registrationPageField',
        'profile_page_field': 'profilePageField',
        'attributes': 'attributes'
    }

    discriminator_value_class_map = {
        'CheckboxLocalIdentityField': 'CheckboxLocalIdentityField',
        'DateLocalIdentityField': 'DateLocalIdentityField',
        'CheckboxGroupLocalIdentityField': 'CheckboxGroupLocalIdentityField',
        'HiddenLocalIdentityField': 'HiddenLocalIdentityField',
        'TextLocalIdentityField': 'TextLocalIdentityField',
        'BaseDefaultValueLocalIdentityField': 'BaseDefaultValueLocalIdentityField',
        'EmailLocalIdentityField': 'EmailLocalIdentityField',
        'PhoneLocalIdentityField': 'PhoneLocalIdentityField',
        'BaseSelectionLocalIdentityField': 'BaseSelectionLocalIdentityField',
        'DropDownLocalIdentityField': 'DropDownLocalIdentityField'
    }

    def __init__(self, type=None, id=None, label=None, registration_page_field=None, profile_page_field=None, attributes=None, _configuration=None):  # noqa: E501
        """LocalIdentityField - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._id = None
        self._label = None
        self._registration_page_field = None
        self._profile_page_field = None
        self._attributes = None
        self.discriminator = 'type'

        self.type = type
        self.id = id
        self.label = label
        if registration_page_field is not None:
            self.registration_page_field = registration_page_field
        if profile_page_field is not None:
            self.profile_page_field = profile_page_field
        if attributes is not None:
            self.attributes = attributes

    @property
    def type(self):
        """Gets the type of this LocalIdentityField.  # noqa: E501

        The type of the local identity field.  # noqa: E501

        :return: The type of this LocalIdentityField.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LocalIdentityField.

        The type of the local identity field.  # noqa: E501

        :param type: The type of this LocalIdentityField.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["CHECKBOX", "CHECKBOX_GROUP", "DATE", "DROP_DOWN", "EMAIL", "PHONE", "TEXT", "HIDDEN"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this LocalIdentityField.  # noqa: E501

        Id of the local identity field.  # noqa: E501

        :return: The id of this LocalIdentityField.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LocalIdentityField.

        Id of the local identity field.  # noqa: E501

        :param id: The id of this LocalIdentityField.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def label(self):
        """Gets the label of this LocalIdentityField.  # noqa: E501

        Label of the local identity field.  # noqa: E501

        :return: The label of this LocalIdentityField.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this LocalIdentityField.

        Label of the local identity field.  # noqa: E501

        :param label: The label of this LocalIdentityField.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def registration_page_field(self):
        """Gets the registration_page_field of this LocalIdentityField.  # noqa: E501

        Whether this is a registration page field or not.  # noqa: E501

        :return: The registration_page_field of this LocalIdentityField.  # noqa: E501
        :rtype: bool
        """
        return self._registration_page_field

    @registration_page_field.setter
    def registration_page_field(self, registration_page_field):
        """Sets the registration_page_field of this LocalIdentityField.

        Whether this is a registration page field or not.  # noqa: E501

        :param registration_page_field: The registration_page_field of this LocalIdentityField.  # noqa: E501
        :type: bool
        """

        self._registration_page_field = registration_page_field

    @property
    def profile_page_field(self):
        """Gets the profile_page_field of this LocalIdentityField.  # noqa: E501

        Whether this is a profile page field or not.  # noqa: E501

        :return: The profile_page_field of this LocalIdentityField.  # noqa: E501
        :rtype: bool
        """
        return self._profile_page_field

    @profile_page_field.setter
    def profile_page_field(self, profile_page_field):
        """Sets the profile_page_field of this LocalIdentityField.

        Whether this is a profile page field or not.  # noqa: E501

        :param profile_page_field: The profile_page_field of this LocalIdentityField.  # noqa: E501
        :type: bool
        """

        self._profile_page_field = profile_page_field

    @property
    def attributes(self):
        """Gets the attributes of this LocalIdentityField.  # noqa: E501

        Attributes of the local identity field.  # noqa: E501

        :return: The attributes of this LocalIdentityField.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this LocalIdentityField.

        Attributes of the local identity field.  # noqa: E501

        :param attributes: The attributes of this LocalIdentityField.  # noqa: E501
        :type: dict(str, bool)
        """

        self._attributes = attributes

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocalIdentityField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocalIdentityField):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LocalIdentityField):
            return True

        return self.to_dict() != other.to_dict()
