# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AtmAccessControlSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inherited': 'bool',
        'restrict_clients': 'bool',
        'allowed_clients': 'list[ResourceLink]'
    }

    attribute_map = {
        'inherited': 'inherited',
        'restrict_clients': 'restrictClients',
        'allowed_clients': 'allowedClients'
    }

    def __init__(self, inherited=None, restrict_clients=None, allowed_clients=None, _configuration=None):  # noqa: E501
        """AtmAccessControlSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._inherited = None
        self._restrict_clients = None
        self._allowed_clients = None
        self.discriminator = None

        if inherited is not None:
            self.inherited = inherited
        if restrict_clients is not None:
            self.restrict_clients = restrict_clients
        if allowed_clients is not None:
            self.allowed_clients = allowed_clients

    @property
    def inherited(self):
        """Gets the inherited of this AtmAccessControlSettings.  # noqa: E501

        If this token manager has a parent, this flag determines whether access control settings are inherited from the parent. When set to true, the other fields in this model become read-only. The default value is false.  # noqa: E501

        :return: The inherited of this AtmAccessControlSettings.  # noqa: E501
        :rtype: bool
        """
        return self._inherited

    @inherited.setter
    def inherited(self, inherited):
        """Sets the inherited of this AtmAccessControlSettings.

        If this token manager has a parent, this flag determines whether access control settings are inherited from the parent. When set to true, the other fields in this model become read-only. The default value is false.  # noqa: E501

        :param inherited: The inherited of this AtmAccessControlSettings.  # noqa: E501
        :type: bool
        """

        self._inherited = inherited

    @property
    def restrict_clients(self):
        """Gets the restrict_clients of this AtmAccessControlSettings.  # noqa: E501

        Determines whether access to this token manager is restricted to specific OAuth clients. If false, the 'allowedClients' field is ignored. The default value is false.  # noqa: E501

        :return: The restrict_clients of this AtmAccessControlSettings.  # noqa: E501
        :rtype: bool
        """
        return self._restrict_clients

    @restrict_clients.setter
    def restrict_clients(self, restrict_clients):
        """Sets the restrict_clients of this AtmAccessControlSettings.

        Determines whether access to this token manager is restricted to specific OAuth clients. If false, the 'allowedClients' field is ignored. The default value is false.  # noqa: E501

        :param restrict_clients: The restrict_clients of this AtmAccessControlSettings.  # noqa: E501
        :type: bool
        """

        self._restrict_clients = restrict_clients

    @property
    def allowed_clients(self):
        """Gets the allowed_clients of this AtmAccessControlSettings.  # noqa: E501

        If 'restrictClients' is true, this field defines the list of OAuth clients that are allowed to access the token manager.  # noqa: E501

        :return: The allowed_clients of this AtmAccessControlSettings.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._allowed_clients

    @allowed_clients.setter
    def allowed_clients(self, allowed_clients):
        """Sets the allowed_clients of this AtmAccessControlSettings.

        If 'restrictClients' is true, this field defines the list of OAuth clients that are allowed to access the token manager.  # noqa: E501

        :param allowed_clients: The allowed_clients of this AtmAccessControlSettings.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._allowed_clients = allowed_clients

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AtmAccessControlSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AtmAccessControlSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AtmAccessControlSettings):
            return True

        return self.to_dict() != other.to_dict()
