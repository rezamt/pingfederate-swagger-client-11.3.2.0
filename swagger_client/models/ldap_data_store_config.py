# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LdapDataStoreConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_dn': 'str',
        'create_pattern': 'str',
        'object_class': 'str',
        'auxiliary_object_classes': 'list[str]',
        'data_store_mapping': 'dict(str, DataStoreAttribute)'
    }

    attribute_map = {
        'base_dn': 'baseDn',
        'create_pattern': 'createPattern',
        'object_class': 'objectClass',
        'auxiliary_object_classes': 'auxiliaryObjectClasses',
        'data_store_mapping': 'dataStoreMapping'
    }

    def __init__(self, base_dn=None, create_pattern=None, object_class=None, auxiliary_object_classes=None, data_store_mapping=None, _configuration=None):  # noqa: E501
        """LdapDataStoreConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._base_dn = None
        self._create_pattern = None
        self._object_class = None
        self._auxiliary_object_classes = None
        self._data_store_mapping = None
        self.discriminator = None

        self.base_dn = base_dn
        self.create_pattern = create_pattern
        self.object_class = object_class
        if auxiliary_object_classes is not None:
            self.auxiliary_object_classes = auxiliary_object_classes
        self.data_store_mapping = data_store_mapping

    @property
    def base_dn(self):
        """Gets the base_dn of this LdapDataStoreConfig.  # noqa: E501

        The base DN to search from. If not specified, the search will start at the LDAP's root.  # noqa: E501

        :return: The base_dn of this LdapDataStoreConfig.  # noqa: E501
        :rtype: str
        """
        return self._base_dn

    @base_dn.setter
    def base_dn(self, base_dn):
        """Sets the base_dn of this LdapDataStoreConfig.

        The base DN to search from. If not specified, the search will start at the LDAP's root.  # noqa: E501

        :param base_dn: The base_dn of this LdapDataStoreConfig.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and base_dn is None:
            raise ValueError("Invalid value for `base_dn`, must not be `None`")  # noqa: E501

        self._base_dn = base_dn

    @property
    def create_pattern(self):
        """Gets the create_pattern of this LdapDataStoreConfig.  # noqa: E501

        The Relative DN Pattern that will be used to create objects in the directory.  # noqa: E501

        :return: The create_pattern of this LdapDataStoreConfig.  # noqa: E501
        :rtype: str
        """
        return self._create_pattern

    @create_pattern.setter
    def create_pattern(self, create_pattern):
        """Sets the create_pattern of this LdapDataStoreConfig.

        The Relative DN Pattern that will be used to create objects in the directory.  # noqa: E501

        :param create_pattern: The create_pattern of this LdapDataStoreConfig.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and create_pattern is None:
            raise ValueError("Invalid value for `create_pattern`, must not be `None`")  # noqa: E501

        self._create_pattern = create_pattern

    @property
    def object_class(self):
        """Gets the object_class of this LdapDataStoreConfig.  # noqa: E501

        The Object Class used by the new objects stored in the LDAP data store.  # noqa: E501

        :return: The object_class of this LdapDataStoreConfig.  # noqa: E501
        :rtype: str
        """
        return self._object_class

    @object_class.setter
    def object_class(self, object_class):
        """Sets the object_class of this LdapDataStoreConfig.

        The Object Class used by the new objects stored in the LDAP data store.  # noqa: E501

        :param object_class: The object_class of this LdapDataStoreConfig.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and object_class is None:
            raise ValueError("Invalid value for `object_class`, must not be `None`")  # noqa: E501

        self._object_class = object_class

    @property
    def auxiliary_object_classes(self):
        """Gets the auxiliary_object_classes of this LdapDataStoreConfig.  # noqa: E501

        The Auxiliary Object Classes used by the new objects stored in the LDAP data store.  # noqa: E501

        :return: The auxiliary_object_classes of this LdapDataStoreConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._auxiliary_object_classes

    @auxiliary_object_classes.setter
    def auxiliary_object_classes(self, auxiliary_object_classes):
        """Sets the auxiliary_object_classes of this LdapDataStoreConfig.

        The Auxiliary Object Classes used by the new objects stored in the LDAP data store.  # noqa: E501

        :param auxiliary_object_classes: The auxiliary_object_classes of this LdapDataStoreConfig.  # noqa: E501
        :type: list[str]
        """

        self._auxiliary_object_classes = auxiliary_object_classes

    @property
    def data_store_mapping(self):
        """Gets the data_store_mapping of this LdapDataStoreConfig.  # noqa: E501

        The data store mapping.  # noqa: E501

        :return: The data_store_mapping of this LdapDataStoreConfig.  # noqa: E501
        :rtype: dict(str, DataStoreAttribute)
        """
        return self._data_store_mapping

    @data_store_mapping.setter
    def data_store_mapping(self, data_store_mapping):
        """Sets the data_store_mapping of this LdapDataStoreConfig.

        The data store mapping.  # noqa: E501

        :param data_store_mapping: The data_store_mapping of this LdapDataStoreConfig.  # noqa: E501
        :type: dict(str, DataStoreAttribute)
        """
        if self._configuration.client_side_validation and data_store_mapping is None:
            raise ValueError("Invalid value for `data_store_mapping`, must not be `None`")  # noqa: E501

        self._data_store_mapping = data_store_mapping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LdapDataStoreConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LdapDataStoreConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LdapDataStoreConfig):
            return True

        return self.to_dict() != other.to_dict()
