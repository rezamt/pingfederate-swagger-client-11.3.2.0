# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CertificateExpirationNotificationSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_address': 'str',
        'initial_warning_period': 'int',
        'final_warning_period': 'int',
        'notification_publisher_ref': 'ResourceLink',
        'notification_mode': 'str'
    }

    attribute_map = {
        'email_address': 'emailAddress',
        'initial_warning_period': 'initialWarningPeriod',
        'final_warning_period': 'finalWarningPeriod',
        'notification_publisher_ref': 'notificationPublisherRef',
        'notification_mode': 'notificationMode'
    }

    def __init__(self, email_address=None, initial_warning_period=None, final_warning_period=None, notification_publisher_ref=None, notification_mode=None, _configuration=None):  # noqa: E501
        """CertificateExpirationNotificationSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._email_address = None
        self._initial_warning_period = None
        self._final_warning_period = None
        self._notification_publisher_ref = None
        self._notification_mode = None
        self.discriminator = None

        self.email_address = email_address
        if initial_warning_period is not None:
            self.initial_warning_period = initial_warning_period
        self.final_warning_period = final_warning_period
        if notification_publisher_ref is not None:
            self.notification_publisher_ref = notification_publisher_ref
        if notification_mode is not None:
            self.notification_mode = notification_mode

    @property
    def email_address(self):
        """Gets the email_address of this CertificateExpirationNotificationSettings.  # noqa: E501

        Email address where notifications are sent.  # noqa: E501

        :return: The email_address of this CertificateExpirationNotificationSettings.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this CertificateExpirationNotificationSettings.

        Email address where notifications are sent.  # noqa: E501

        :param email_address: The email_address of this CertificateExpirationNotificationSettings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and email_address is None:
            raise ValueError("Invalid value for `email_address`, must not be `None`")  # noqa: E501

        self._email_address = email_address

    @property
    def initial_warning_period(self):
        """Gets the initial_warning_period of this CertificateExpirationNotificationSettings.  # noqa: E501

        Time before certificate expiration when initial warning is sent (in days).  # noqa: E501

        :return: The initial_warning_period of this CertificateExpirationNotificationSettings.  # noqa: E501
        :rtype: int
        """
        return self._initial_warning_period

    @initial_warning_period.setter
    def initial_warning_period(self, initial_warning_period):
        """Sets the initial_warning_period of this CertificateExpirationNotificationSettings.

        Time before certificate expiration when initial warning is sent (in days).  # noqa: E501

        :param initial_warning_period: The initial_warning_period of this CertificateExpirationNotificationSettings.  # noqa: E501
        :type: int
        """

        self._initial_warning_period = initial_warning_period

    @property
    def final_warning_period(self):
        """Gets the final_warning_period of this CertificateExpirationNotificationSettings.  # noqa: E501

        Time before certificate expiration when final warning is sent (in days).  # noqa: E501

        :return: The final_warning_period of this CertificateExpirationNotificationSettings.  # noqa: E501
        :rtype: int
        """
        return self._final_warning_period

    @final_warning_period.setter
    def final_warning_period(self, final_warning_period):
        """Sets the final_warning_period of this CertificateExpirationNotificationSettings.

        Time before certificate expiration when final warning is sent (in days).  # noqa: E501

        :param final_warning_period: The final_warning_period of this CertificateExpirationNotificationSettings.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and final_warning_period is None:
            raise ValueError("Invalid value for `final_warning_period`, must not be `None`")  # noqa: E501

        self._final_warning_period = final_warning_period

    @property
    def notification_publisher_ref(self):
        """Gets the notification_publisher_ref of this CertificateExpirationNotificationSettings.  # noqa: E501

        Reference to the associated notification publisher.  # noqa: E501

        :return: The notification_publisher_ref of this CertificateExpirationNotificationSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._notification_publisher_ref

    @notification_publisher_ref.setter
    def notification_publisher_ref(self, notification_publisher_ref):
        """Sets the notification_publisher_ref of this CertificateExpirationNotificationSettings.

        Reference to the associated notification publisher.  # noqa: E501

        :param notification_publisher_ref: The notification_publisher_ref of this CertificateExpirationNotificationSettings.  # noqa: E501
        :type: ResourceLink
        """

        self._notification_publisher_ref = notification_publisher_ref

    @property
    def notification_mode(self):
        """Gets the notification_mode of this CertificateExpirationNotificationSettings.  # noqa: E501

        The mode of notification. Set to NOTIFICATION_PUBLISHER to enable email notifications and server log messages. Set to LOGGING_ONLY to enable server log messages. Defaults to NOTIFICATION_PUBLISHER.  # noqa: E501

        :return: The notification_mode of this CertificateExpirationNotificationSettings.  # noqa: E501
        :rtype: str
        """
        return self._notification_mode

    @notification_mode.setter
    def notification_mode(self, notification_mode):
        """Sets the notification_mode of this CertificateExpirationNotificationSettings.

        The mode of notification. Set to NOTIFICATION_PUBLISHER to enable email notifications and server log messages. Set to LOGGING_ONLY to enable server log messages. Defaults to NOTIFICATION_PUBLISHER.  # noqa: E501

        :param notification_mode: The notification_mode of this CertificateExpirationNotificationSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["NOTIFICATION_PUBLISHER", "LOGGING_ONLY"]  # noqa: E501
        if (self._configuration.client_side_validation and
                notification_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `notification_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(notification_mode, allowed_values)
            )

        self._notification_mode = notification_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateExpirationNotificationSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateExpirationNotificationSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CertificateExpirationNotificationSettings):
            return True

        return self.to_dict() != other.to_dict()
