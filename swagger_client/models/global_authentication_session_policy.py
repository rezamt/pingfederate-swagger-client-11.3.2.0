# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GlobalAuthenticationSessionPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable_sessions': 'bool',
        'persistent_sessions': 'bool',
        'hash_unique_user_key_attribute': 'bool',
        'idle_timeout_mins': 'int',
        'idle_timeout_display_unit': 'str',
        'max_timeout_mins': 'int',
        'max_timeout_display_unit': 'str'
    }

    attribute_map = {
        'enable_sessions': 'enableSessions',
        'persistent_sessions': 'persistentSessions',
        'hash_unique_user_key_attribute': 'hashUniqueUserKeyAttribute',
        'idle_timeout_mins': 'idleTimeoutMins',
        'idle_timeout_display_unit': 'idleTimeoutDisplayUnit',
        'max_timeout_mins': 'maxTimeoutMins',
        'max_timeout_display_unit': 'maxTimeoutDisplayUnit'
    }

    def __init__(self, enable_sessions=None, persistent_sessions=None, hash_unique_user_key_attribute=None, idle_timeout_mins=None, idle_timeout_display_unit=None, max_timeout_mins=None, max_timeout_display_unit=None, _configuration=None):  # noqa: E501
        """GlobalAuthenticationSessionPolicy - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enable_sessions = None
        self._persistent_sessions = None
        self._hash_unique_user_key_attribute = None
        self._idle_timeout_mins = None
        self._idle_timeout_display_unit = None
        self._max_timeout_mins = None
        self._max_timeout_display_unit = None
        self.discriminator = None

        self.enable_sessions = enable_sessions
        if persistent_sessions is not None:
            self.persistent_sessions = persistent_sessions
        if hash_unique_user_key_attribute is not None:
            self.hash_unique_user_key_attribute = hash_unique_user_key_attribute
        if idle_timeout_mins is not None:
            self.idle_timeout_mins = idle_timeout_mins
        if idle_timeout_display_unit is not None:
            self.idle_timeout_display_unit = idle_timeout_display_unit
        if max_timeout_mins is not None:
            self.max_timeout_mins = max_timeout_mins
        if max_timeout_display_unit is not None:
            self.max_timeout_display_unit = max_timeout_display_unit

    @property
    def enable_sessions(self):
        """Gets the enable_sessions of this GlobalAuthenticationSessionPolicy.  # noqa: E501

        Determines whether authentication sessions are enabled globally.  # noqa: E501

        :return: The enable_sessions of this GlobalAuthenticationSessionPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._enable_sessions

    @enable_sessions.setter
    def enable_sessions(self, enable_sessions):
        """Sets the enable_sessions of this GlobalAuthenticationSessionPolicy.

        Determines whether authentication sessions are enabled globally.  # noqa: E501

        :param enable_sessions: The enable_sessions of this GlobalAuthenticationSessionPolicy.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and enable_sessions is None:
            raise ValueError("Invalid value for `enable_sessions`, must not be `None`")  # noqa: E501

        self._enable_sessions = enable_sessions

    @property
    def persistent_sessions(self):
        """Gets the persistent_sessions of this GlobalAuthenticationSessionPolicy.  # noqa: E501

        Determines whether authentication sessions are persistent by default. Persistent sessions are linked to a persistent cookie and stored in a data store. This field is ignored if enableSessions is false.  # noqa: E501

        :return: The persistent_sessions of this GlobalAuthenticationSessionPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._persistent_sessions

    @persistent_sessions.setter
    def persistent_sessions(self, persistent_sessions):
        """Sets the persistent_sessions of this GlobalAuthenticationSessionPolicy.

        Determines whether authentication sessions are persistent by default. Persistent sessions are linked to a persistent cookie and stored in a data store. This field is ignored if enableSessions is false.  # noqa: E501

        :param persistent_sessions: The persistent_sessions of this GlobalAuthenticationSessionPolicy.  # noqa: E501
        :type: bool
        """

        self._persistent_sessions = persistent_sessions

    @property
    def hash_unique_user_key_attribute(self):
        """Gets the hash_unique_user_key_attribute of this GlobalAuthenticationSessionPolicy.  # noqa: E501

        Determines whether to hash the value of the unique user key attribute.  # noqa: E501

        :return: The hash_unique_user_key_attribute of this GlobalAuthenticationSessionPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._hash_unique_user_key_attribute

    @hash_unique_user_key_attribute.setter
    def hash_unique_user_key_attribute(self, hash_unique_user_key_attribute):
        """Sets the hash_unique_user_key_attribute of this GlobalAuthenticationSessionPolicy.

        Determines whether to hash the value of the unique user key attribute.  # noqa: E501

        :param hash_unique_user_key_attribute: The hash_unique_user_key_attribute of this GlobalAuthenticationSessionPolicy.  # noqa: E501
        :type: bool
        """

        self._hash_unique_user_key_attribute = hash_unique_user_key_attribute

    @property
    def idle_timeout_mins(self):
        """Gets the idle_timeout_mins of this GlobalAuthenticationSessionPolicy.  # noqa: E501

        The idle timeout period, in minutes. If set to -1, the idle timeout will be set to the maximum timeout. The default is 60.  # noqa: E501

        :return: The idle_timeout_mins of this GlobalAuthenticationSessionPolicy.  # noqa: E501
        :rtype: int
        """
        return self._idle_timeout_mins

    @idle_timeout_mins.setter
    def idle_timeout_mins(self, idle_timeout_mins):
        """Sets the idle_timeout_mins of this GlobalAuthenticationSessionPolicy.

        The idle timeout period, in minutes. If set to -1, the idle timeout will be set to the maximum timeout. The default is 60.  # noqa: E501

        :param idle_timeout_mins: The idle_timeout_mins of this GlobalAuthenticationSessionPolicy.  # noqa: E501
        :type: int
        """

        self._idle_timeout_mins = idle_timeout_mins

    @property
    def idle_timeout_display_unit(self):
        """Gets the idle_timeout_display_unit of this GlobalAuthenticationSessionPolicy.  # noqa: E501

        The display unit for the idle timeout period in the PingFederate administrative console. When the display unit is HOURS or DAYS, the timeout value in minutes must correspond to a whole number value for the specified unit.  # noqa: E501

        :return: The idle_timeout_display_unit of this GlobalAuthenticationSessionPolicy.  # noqa: E501
        :rtype: str
        """
        return self._idle_timeout_display_unit

    @idle_timeout_display_unit.setter
    def idle_timeout_display_unit(self, idle_timeout_display_unit):
        """Sets the idle_timeout_display_unit of this GlobalAuthenticationSessionPolicy.

        The display unit for the idle timeout period in the PingFederate administrative console. When the display unit is HOURS or DAYS, the timeout value in minutes must correspond to a whole number value for the specified unit.  # noqa: E501

        :param idle_timeout_display_unit: The idle_timeout_display_unit of this GlobalAuthenticationSessionPolicy.  # noqa: E501
        :type: str
        """
        allowed_values = ["MINUTES", "HOURS", "DAYS"]  # noqa: E501
        if (self._configuration.client_side_validation and
                idle_timeout_display_unit not in allowed_values):
            raise ValueError(
                "Invalid value for `idle_timeout_display_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(idle_timeout_display_unit, allowed_values)
            )

        self._idle_timeout_display_unit = idle_timeout_display_unit

    @property
    def max_timeout_mins(self):
        """Gets the max_timeout_mins of this GlobalAuthenticationSessionPolicy.  # noqa: E501

        The maximum timeout period, in minutes. If set to -1, sessions do not expire. The default is 480.  # noqa: E501

        :return: The max_timeout_mins of this GlobalAuthenticationSessionPolicy.  # noqa: E501
        :rtype: int
        """
        return self._max_timeout_mins

    @max_timeout_mins.setter
    def max_timeout_mins(self, max_timeout_mins):
        """Sets the max_timeout_mins of this GlobalAuthenticationSessionPolicy.

        The maximum timeout period, in minutes. If set to -1, sessions do not expire. The default is 480.  # noqa: E501

        :param max_timeout_mins: The max_timeout_mins of this GlobalAuthenticationSessionPolicy.  # noqa: E501
        :type: int
        """

        self._max_timeout_mins = max_timeout_mins

    @property
    def max_timeout_display_unit(self):
        """Gets the max_timeout_display_unit of this GlobalAuthenticationSessionPolicy.  # noqa: E501

        The display unit for the maximum timeout period in the PingFederate administrative console. When the display unit is HOURS or DAYS, the timeout value in minutes must correspond to a whole number value for the specified unit.  # noqa: E501

        :return: The max_timeout_display_unit of this GlobalAuthenticationSessionPolicy.  # noqa: E501
        :rtype: str
        """
        return self._max_timeout_display_unit

    @max_timeout_display_unit.setter
    def max_timeout_display_unit(self, max_timeout_display_unit):
        """Sets the max_timeout_display_unit of this GlobalAuthenticationSessionPolicy.

        The display unit for the maximum timeout period in the PingFederate administrative console. When the display unit is HOURS or DAYS, the timeout value in minutes must correspond to a whole number value for the specified unit.  # noqa: E501

        :param max_timeout_display_unit: The max_timeout_display_unit of this GlobalAuthenticationSessionPolicy.  # noqa: E501
        :type: str
        """
        allowed_values = ["MINUTES", "HOURS", "DAYS"]  # noqa: E501
        if (self._configuration.client_side_validation and
                max_timeout_display_unit not in allowed_values):
            raise ValueError(
                "Invalid value for `max_timeout_display_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(max_timeout_display_unit, allowed_values)
            )

        self._max_timeout_display_unit = max_timeout_display_unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GlobalAuthenticationSessionPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlobalAuthenticationSessionPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GlobalAuthenticationSessionPolicy):
            return True

        return self.to_dict() != other.to_dict()
