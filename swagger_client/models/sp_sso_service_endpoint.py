# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SpSsoServiceEndpoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'binding': 'str',
        'url': 'str',
        'is_default': 'bool',
        'index': 'int'
    }

    attribute_map = {
        'binding': 'binding',
        'url': 'url',
        'is_default': 'isDefault',
        'index': 'index'
    }

    def __init__(self, binding=None, url=None, is_default=None, index=None, _configuration=None):  # noqa: E501
        """SpSsoServiceEndpoint - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._binding = None
        self._url = None
        self._is_default = None
        self._index = None
        self.discriminator = None

        self.binding = binding
        self.url = url
        if is_default is not None:
            self.is_default = is_default
        self.index = index

    @property
    def binding(self):
        """Gets the binding of this SpSsoServiceEndpoint.  # noqa: E501

        The binding of this endpoint, if applicable - usually only required for SAML 2.0 endpoints.  Supported bindings are Artifact and POST.  # noqa: E501

        :return: The binding of this SpSsoServiceEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._binding

    @binding.setter
    def binding(self, binding):
        """Sets the binding of this SpSsoServiceEndpoint.

        The binding of this endpoint, if applicable - usually only required for SAML 2.0 endpoints.  Supported bindings are Artifact and POST.  # noqa: E501

        :param binding: The binding of this SpSsoServiceEndpoint.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and binding is None:
            raise ValueError("Invalid value for `binding`, must not be `None`")  # noqa: E501
        allowed_values = ["ARTIFACT", "POST", "REDIRECT", "SOAP"]  # noqa: E501
        if (self._configuration.client_side_validation and
                binding not in allowed_values):
            raise ValueError(
                "Invalid value for `binding` ({0}), must be one of {1}"  # noqa: E501
                .format(binding, allowed_values)
            )

        self._binding = binding

    @property
    def url(self):
        """Gets the url of this SpSsoServiceEndpoint.  # noqa: E501

        The absolute or relative URL of the endpoint. A relative URL can be specified if a base URL for the connection has been defined.  # noqa: E501

        :return: The url of this SpSsoServiceEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SpSsoServiceEndpoint.

        The absolute or relative URL of the endpoint. A relative URL can be specified if a base URL for the connection has been defined.  # noqa: E501

        :param url: The url of this SpSsoServiceEndpoint.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def is_default(self):
        """Gets the is_default of this SpSsoServiceEndpoint.  # noqa: E501

        Whether or not this endpoint is the default endpoint. Defaults to false.  # noqa: E501

        :return: The is_default of this SpSsoServiceEndpoint.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this SpSsoServiceEndpoint.

        Whether or not this endpoint is the default endpoint. Defaults to false.  # noqa: E501

        :param is_default: The is_default of this SpSsoServiceEndpoint.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def index(self):
        """Gets the index of this SpSsoServiceEndpoint.  # noqa: E501

        The priority of the endpoint.  # noqa: E501

        :return: The index of this SpSsoServiceEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this SpSsoServiceEndpoint.

        The priority of the endpoint.  # noqa: E501

        :param index: The index of this SpSsoServiceEndpoint.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501

        self._index = index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpSsoServiceEndpoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpSsoServiceEndpoint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpSsoServiceEndpoint):
            return True

        return self.to_dict() != other.to_dict()
