# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AttributeRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute_source': 'SourceTypeIdKey',
        'attribute_name': 'str',
        'condition': 'str',
        'expected_value': 'str',
        'expression': 'str',
        'result': 'str'
    }

    attribute_map = {
        'attribute_source': 'attributeSource',
        'attribute_name': 'attributeName',
        'condition': 'condition',
        'expected_value': 'expectedValue',
        'expression': 'expression',
        'result': 'result'
    }

    def __init__(self, attribute_source=None, attribute_name=None, condition=None, expected_value=None, expression=None, result=None, _configuration=None):  # noqa: E501
        """AttributeRule - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._attribute_source = None
        self._attribute_name = None
        self._condition = None
        self._expected_value = None
        self._expression = None
        self._result = None
        self.discriminator = None

        if attribute_source is not None:
            self.attribute_source = attribute_source
        if attribute_name is not None:
            self.attribute_name = attribute_name
        if condition is not None:
            self.condition = condition
        if expected_value is not None:
            self.expected_value = expected_value
        if expression is not None:
            self.expression = expression
        self.result = result

    @property
    def attribute_source(self):
        """Gets the attribute_source of this AttributeRule.  # noqa: E501

        The source of the attribute, if the attribute source is not provided then it is defaulted to be the previous authentication source.  # noqa: E501

        :return: The attribute_source of this AttributeRule.  # noqa: E501
        :rtype: SourceTypeIdKey
        """
        return self._attribute_source

    @attribute_source.setter
    def attribute_source(self, attribute_source):
        """Sets the attribute_source of this AttributeRule.

        The source of the attribute, if the attribute source is not provided then it is defaulted to be the previous authentication source.  # noqa: E501

        :param attribute_source: The attribute_source of this AttributeRule.  # noqa: E501
        :type: SourceTypeIdKey
        """

        self._attribute_source = attribute_source

    @property
    def attribute_name(self):
        """Gets the attribute_name of this AttributeRule.  # noqa: E501

        The name of the attribute to use in this attribute rule. This field is required if the Attribute Source type is not 'EXPRESSION'.  # noqa: E501

        :return: The attribute_name of this AttributeRule.  # noqa: E501
        :rtype: str
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name):
        """Sets the attribute_name of this AttributeRule.

        The name of the attribute to use in this attribute rule. This field is required if the Attribute Source type is not 'EXPRESSION'.  # noqa: E501

        :param attribute_name: The attribute_name of this AttributeRule.  # noqa: E501
        :type: str
        """

        self._attribute_name = attribute_name

    @property
    def condition(self):
        """Gets the condition of this AttributeRule.  # noqa: E501

        The condition that will be applied to the attribute's expected value. This field is required if the Attribute Source type is not 'EXPRESSION'.  # noqa: E501

        :return: The condition of this AttributeRule.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this AttributeRule.

        The condition that will be applied to the attribute's expected value. This field is required if the Attribute Source type is not 'EXPRESSION'.  # noqa: E501

        :param condition: The condition of this AttributeRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["EQUALS", "EQUALS_CASE_INSENSITIVE", "EQUALS_DN", "NOT_EQUAL", "NOT_EQUAL_CASE_INSENSITIVE", "NOT_EQUAL_DN", "MULTIVALUE_CONTAINS", "MULTIVALUE_CONTAINS_CASE_INSENSITIVE", "MULTIVALUE_CONTAINS_DN", "MULTIVALUE_DOES_NOT_CONTAIN", "MULTIVALUE_DOES_NOT_CONTAIN_CASE_INSENSITIVE", "MULTIVALUE_DOES_NOT_CONTAIN_DN"]  # noqa: E501
        if (self._configuration.client_side_validation and
                condition not in allowed_values):
            raise ValueError(
                "Invalid value for `condition` ({0}), must be one of {1}"  # noqa: E501
                .format(condition, allowed_values)
            )

        self._condition = condition

    @property
    def expected_value(self):
        """Gets the expected_value of this AttributeRule.  # noqa: E501

        The expected value of this attribute rule. This field is required if the Attribute Source type is not 'EXPRESSION'.  # noqa: E501

        :return: The expected_value of this AttributeRule.  # noqa: E501
        :rtype: str
        """
        return self._expected_value

    @expected_value.setter
    def expected_value(self, expected_value):
        """Sets the expected_value of this AttributeRule.

        The expected value of this attribute rule. This field is required if the Attribute Source type is not 'EXPRESSION'.  # noqa: E501

        :param expected_value: The expected_value of this AttributeRule.  # noqa: E501
        :type: str
        """

        self._expected_value = expected_value

    @property
    def expression(self):
        """Gets the expression of this AttributeRule.  # noqa: E501

        The expression of this attribute rule. This field is required if the Attribute Source type is 'EXPRESSION'.  # noqa: E501

        :return: The expression of this AttributeRule.  # noqa: E501
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this AttributeRule.

        The expression of this attribute rule. This field is required if the Attribute Source type is 'EXPRESSION'.  # noqa: E501

        :param expression: The expression of this AttributeRule.  # noqa: E501
        :type: str
        """

        self._expression = expression

    @property
    def result(self):
        """Gets the result of this AttributeRule.  # noqa: E501

        The result of this attribute rule.  # noqa: E501

        :return: The result of this AttributeRule.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this AttributeRule.

        The result of this attribute rule.  # noqa: E501

        :param result: The result of this AttributeRule.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttributeRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttributeRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AttributeRule):
            return True

        return self.to_dict() != other.to_dict()
