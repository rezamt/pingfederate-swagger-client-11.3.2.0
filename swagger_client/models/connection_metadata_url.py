# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ConnectionMetadataUrl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata_url_ref': 'ResourceLink',
        'enable_auto_metadata_update': 'bool'
    }

    attribute_map = {
        'metadata_url_ref': 'metadataUrlRef',
        'enable_auto_metadata_update': 'enableAutoMetadataUpdate'
    }

    def __init__(self, metadata_url_ref=None, enable_auto_metadata_update=None, _configuration=None):  # noqa: E501
        """ConnectionMetadataUrl - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._metadata_url_ref = None
        self._enable_auto_metadata_update = None
        self.discriminator = None

        self.metadata_url_ref = metadata_url_ref
        if enable_auto_metadata_update is not None:
            self.enable_auto_metadata_update = enable_auto_metadata_update

    @property
    def metadata_url_ref(self):
        """Gets the metadata_url_ref of this ConnectionMetadataUrl.  # noqa: E501

        ID of the saved Metadata URL.  # noqa: E501

        :return: The metadata_url_ref of this ConnectionMetadataUrl.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._metadata_url_ref

    @metadata_url_ref.setter
    def metadata_url_ref(self, metadata_url_ref):
        """Sets the metadata_url_ref of this ConnectionMetadataUrl.

        ID of the saved Metadata URL.  # noqa: E501

        :param metadata_url_ref: The metadata_url_ref of this ConnectionMetadataUrl.  # noqa: E501
        :type: ResourceLink
        """
        if self._configuration.client_side_validation and metadata_url_ref is None:
            raise ValueError("Invalid value for `metadata_url_ref`, must not be `None`")  # noqa: E501

        self._metadata_url_ref = metadata_url_ref

    @property
    def enable_auto_metadata_update(self):
        """Gets the enable_auto_metadata_update of this ConnectionMetadataUrl.  # noqa: E501

        Specifies whether the metadata of the connection will be automatically reloaded. The default value is true.  # noqa: E501

        :return: The enable_auto_metadata_update of this ConnectionMetadataUrl.  # noqa: E501
        :rtype: bool
        """
        return self._enable_auto_metadata_update

    @enable_auto_metadata_update.setter
    def enable_auto_metadata_update(self, enable_auto_metadata_update):
        """Sets the enable_auto_metadata_update of this ConnectionMetadataUrl.

        Specifies whether the metadata of the connection will be automatically reloaded. The default value is true.  # noqa: E501

        :param enable_auto_metadata_update: The enable_auto_metadata_update of this ConnectionMetadataUrl.  # noqa: E501
        :type: bool
        """

        self._enable_auto_metadata_update = enable_auto_metadata_update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectionMetadataUrl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectionMetadataUrl):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConnectionMetadataUrl):
            return True

        return self.to_dict() != other.to_dict()
