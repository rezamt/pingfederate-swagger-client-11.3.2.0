# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LocalIdentityProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'apc_id': 'ResourceLink',
        'auth_sources': 'list[LocalIdentityAuthSource]',
        'auth_source_update_policy': 'LocalIdentityAuthSourceUpdatePolicy',
        'registration_enabled': 'bool',
        'registration_config': 'RegistrationConfig',
        'profile_config': 'ProfileConfig',
        'field_config': 'FieldConfig',
        'email_verification_config': 'EmailVerificationConfig',
        'data_store_config': 'DataStoreConfig',
        'profile_enabled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'apc_id': 'apcId',
        'auth_sources': 'authSources',
        'auth_source_update_policy': 'authSourceUpdatePolicy',
        'registration_enabled': 'registrationEnabled',
        'registration_config': 'registrationConfig',
        'profile_config': 'profileConfig',
        'field_config': 'fieldConfig',
        'email_verification_config': 'emailVerificationConfig',
        'data_store_config': 'dataStoreConfig',
        'profile_enabled': 'profileEnabled'
    }

    def __init__(self, id=None, name=None, apc_id=None, auth_sources=None, auth_source_update_policy=None, registration_enabled=None, registration_config=None, profile_config=None, field_config=None, email_verification_config=None, data_store_config=None, profile_enabled=None, _configuration=None):  # noqa: E501
        """LocalIdentityProfile - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._apc_id = None
        self._auth_sources = None
        self._auth_source_update_policy = None
        self._registration_enabled = None
        self._registration_config = None
        self._profile_config = None
        self._field_config = None
        self._email_verification_config = None
        self._data_store_config = None
        self._profile_enabled = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.apc_id = apc_id
        if auth_sources is not None:
            self.auth_sources = auth_sources
        if auth_source_update_policy is not None:
            self.auth_source_update_policy = auth_source_update_policy
        if registration_enabled is not None:
            self.registration_enabled = registration_enabled
        if registration_config is not None:
            self.registration_config = registration_config
        if profile_config is not None:
            self.profile_config = profile_config
        if field_config is not None:
            self.field_config = field_config
        if email_verification_config is not None:
            self.email_verification_config = email_verification_config
        if data_store_config is not None:
            self.data_store_config = data_store_config
        if profile_enabled is not None:
            self.profile_enabled = profile_enabled

    @property
    def id(self):
        """Gets the id of this LocalIdentityProfile.  # noqa: E501

        The persistent, unique ID for the local identity profile. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified.  # noqa: E501

        :return: The id of this LocalIdentityProfile.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LocalIdentityProfile.

        The persistent, unique ID for the local identity profile. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified.  # noqa: E501

        :param id: The id of this LocalIdentityProfile.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this LocalIdentityProfile.  # noqa: E501

        The local identity profile name. Name is unique.  # noqa: E501

        :return: The name of this LocalIdentityProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LocalIdentityProfile.

        The local identity profile name. Name is unique.  # noqa: E501

        :param name: The name of this LocalIdentityProfile.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def apc_id(self):
        """Gets the apc_id of this LocalIdentityProfile.  # noqa: E501

        The reference to the authentication policy contract to use for this local identity profile.  # noqa: E501

        :return: The apc_id of this LocalIdentityProfile.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._apc_id

    @apc_id.setter
    def apc_id(self, apc_id):
        """Sets the apc_id of this LocalIdentityProfile.

        The reference to the authentication policy contract to use for this local identity profile.  # noqa: E501

        :param apc_id: The apc_id of this LocalIdentityProfile.  # noqa: E501
        :type: ResourceLink
        """
        if self._configuration.client_side_validation and apc_id is None:
            raise ValueError("Invalid value for `apc_id`, must not be `None`")  # noqa: E501

        self._apc_id = apc_id

    @property
    def auth_sources(self):
        """Gets the auth_sources of this LocalIdentityProfile.  # noqa: E501

        The local identity authentication sources. Sources are unique.  # noqa: E501

        :return: The auth_sources of this LocalIdentityProfile.  # noqa: E501
        :rtype: list[LocalIdentityAuthSource]
        """
        return self._auth_sources

    @auth_sources.setter
    def auth_sources(self, auth_sources):
        """Sets the auth_sources of this LocalIdentityProfile.

        The local identity authentication sources. Sources are unique.  # noqa: E501

        :param auth_sources: The auth_sources of this LocalIdentityProfile.  # noqa: E501
        :type: list[LocalIdentityAuthSource]
        """

        self._auth_sources = auth_sources

    @property
    def auth_source_update_policy(self):
        """Gets the auth_source_update_policy of this LocalIdentityProfile.  # noqa: E501

        The attribute update policy for authentication sources.  # noqa: E501

        :return: The auth_source_update_policy of this LocalIdentityProfile.  # noqa: E501
        :rtype: LocalIdentityAuthSourceUpdatePolicy
        """
        return self._auth_source_update_policy

    @auth_source_update_policy.setter
    def auth_source_update_policy(self, auth_source_update_policy):
        """Sets the auth_source_update_policy of this LocalIdentityProfile.

        The attribute update policy for authentication sources.  # noqa: E501

        :param auth_source_update_policy: The auth_source_update_policy of this LocalIdentityProfile.  # noqa: E501
        :type: LocalIdentityAuthSourceUpdatePolicy
        """

        self._auth_source_update_policy = auth_source_update_policy

    @property
    def registration_enabled(self):
        """Gets the registration_enabled of this LocalIdentityProfile.  # noqa: E501

        Whether the registration configuration is enabled or not.  # noqa: E501

        :return: The registration_enabled of this LocalIdentityProfile.  # noqa: E501
        :rtype: bool
        """
        return self._registration_enabled

    @registration_enabled.setter
    def registration_enabled(self, registration_enabled):
        """Sets the registration_enabled of this LocalIdentityProfile.

        Whether the registration configuration is enabled or not.  # noqa: E501

        :param registration_enabled: The registration_enabled of this LocalIdentityProfile.  # noqa: E501
        :type: bool
        """

        self._registration_enabled = registration_enabled

    @property
    def registration_config(self):
        """Gets the registration_config of this LocalIdentityProfile.  # noqa: E501

        The local identity profile registration configuration.  # noqa: E501

        :return: The registration_config of this LocalIdentityProfile.  # noqa: E501
        :rtype: RegistrationConfig
        """
        return self._registration_config

    @registration_config.setter
    def registration_config(self, registration_config):
        """Sets the registration_config of this LocalIdentityProfile.

        The local identity profile registration configuration.  # noqa: E501

        :param registration_config: The registration_config of this LocalIdentityProfile.  # noqa: E501
        :type: RegistrationConfig
        """

        self._registration_config = registration_config

    @property
    def profile_config(self):
        """Gets the profile_config of this LocalIdentityProfile.  # noqa: E501

        The local identity profile management configuration.  # noqa: E501

        :return: The profile_config of this LocalIdentityProfile.  # noqa: E501
        :rtype: ProfileConfig
        """
        return self._profile_config

    @profile_config.setter
    def profile_config(self, profile_config):
        """Sets the profile_config of this LocalIdentityProfile.

        The local identity profile management configuration.  # noqa: E501

        :param profile_config: The profile_config of this LocalIdentityProfile.  # noqa: E501
        :type: ProfileConfig
        """

        self._profile_config = profile_config

    @property
    def field_config(self):
        """Gets the field_config of this LocalIdentityProfile.  # noqa: E501

        The local identity profile field configuration.  # noqa: E501

        :return: The field_config of this LocalIdentityProfile.  # noqa: E501
        :rtype: FieldConfig
        """
        return self._field_config

    @field_config.setter
    def field_config(self, field_config):
        """Sets the field_config of this LocalIdentityProfile.

        The local identity profile field configuration.  # noqa: E501

        :param field_config: The field_config of this LocalIdentityProfile.  # noqa: E501
        :type: FieldConfig
        """

        self._field_config = field_config

    @property
    def email_verification_config(self):
        """Gets the email_verification_config of this LocalIdentityProfile.  # noqa: E501

        The local identity email verification configuration.  # noqa: E501

        :return: The email_verification_config of this LocalIdentityProfile.  # noqa: E501
        :rtype: EmailVerificationConfig
        """
        return self._email_verification_config

    @email_verification_config.setter
    def email_verification_config(self, email_verification_config):
        """Sets the email_verification_config of this LocalIdentityProfile.

        The local identity email verification configuration.  # noqa: E501

        :param email_verification_config: The email_verification_config of this LocalIdentityProfile.  # noqa: E501
        :type: EmailVerificationConfig
        """

        self._email_verification_config = email_verification_config

    @property
    def data_store_config(self):
        """Gets the data_store_config of this LocalIdentityProfile.  # noqa: E501

        The local identity profile data store configuration.  # noqa: E501

        :return: The data_store_config of this LocalIdentityProfile.  # noqa: E501
        :rtype: DataStoreConfig
        """
        return self._data_store_config

    @data_store_config.setter
    def data_store_config(self, data_store_config):
        """Sets the data_store_config of this LocalIdentityProfile.

        The local identity profile data store configuration.  # noqa: E501

        :param data_store_config: The data_store_config of this LocalIdentityProfile.  # noqa: E501
        :type: DataStoreConfig
        """

        self._data_store_config = data_store_config

    @property
    def profile_enabled(self):
        """Gets the profile_enabled of this LocalIdentityProfile.  # noqa: E501

        Whether the profile configuration is enabled or not.  # noqa: E501

        :return: The profile_enabled of this LocalIdentityProfile.  # noqa: E501
        :rtype: bool
        """
        return self._profile_enabled

    @profile_enabled.setter
    def profile_enabled(self, profile_enabled):
        """Sets the profile_enabled of this LocalIdentityProfile.

        Whether the profile configuration is enabled or not.  # noqa: E501

        :param profile_enabled: The profile_enabled of this LocalIdentityProfile.  # noqa: E501
        :type: bool
        """

        self._profile_enabled = profile_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocalIdentityProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocalIdentityProfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LocalIdentityProfile):
            return True

        return self.to_dict() != other.to_dict()
