# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IdpOAuthGrantAttributeMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token_manager_mappings': 'list[AccessTokenManagerMapping]',
        'idp_o_auth_attribute_contract': 'IdpOAuthAttributeContract'
    }

    attribute_map = {
        'access_token_manager_mappings': 'accessTokenManagerMappings',
        'idp_o_auth_attribute_contract': 'idpOAuthAttributeContract'
    }

    def __init__(self, access_token_manager_mappings=None, idp_o_auth_attribute_contract=None, _configuration=None):  # noqa: E501
        """IdpOAuthGrantAttributeMapping - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_token_manager_mappings = None
        self._idp_o_auth_attribute_contract = None
        self.discriminator = None

        if access_token_manager_mappings is not None:
            self.access_token_manager_mappings = access_token_manager_mappings
        if idp_o_auth_attribute_contract is not None:
            self.idp_o_auth_attribute_contract = idp_o_auth_attribute_contract

    @property
    def access_token_manager_mappings(self):
        """Gets the access_token_manager_mappings of this IdpOAuthGrantAttributeMapping.  # noqa: E501

        A mapping in a connection that defines how access tokens are created.  # noqa: E501

        :return: The access_token_manager_mappings of this IdpOAuthGrantAttributeMapping.  # noqa: E501
        :rtype: list[AccessTokenManagerMapping]
        """
        return self._access_token_manager_mappings

    @access_token_manager_mappings.setter
    def access_token_manager_mappings(self, access_token_manager_mappings):
        """Sets the access_token_manager_mappings of this IdpOAuthGrantAttributeMapping.

        A mapping in a connection that defines how access tokens are created.  # noqa: E501

        :param access_token_manager_mappings: The access_token_manager_mappings of this IdpOAuthGrantAttributeMapping.  # noqa: E501
        :type: list[AccessTokenManagerMapping]
        """

        self._access_token_manager_mappings = access_token_manager_mappings

    @property
    def idp_o_auth_attribute_contract(self):
        """Gets the idp_o_auth_attribute_contract of this IdpOAuthGrantAttributeMapping.  # noqa: E501

        A set of user attributes that the IdP sends in the OAuth Assertion Grant.  # noqa: E501

        :return: The idp_o_auth_attribute_contract of this IdpOAuthGrantAttributeMapping.  # noqa: E501
        :rtype: IdpOAuthAttributeContract
        """
        return self._idp_o_auth_attribute_contract

    @idp_o_auth_attribute_contract.setter
    def idp_o_auth_attribute_contract(self, idp_o_auth_attribute_contract):
        """Sets the idp_o_auth_attribute_contract of this IdpOAuthGrantAttributeMapping.

        A set of user attributes that the IdP sends in the OAuth Assertion Grant.  # noqa: E501

        :param idp_o_auth_attribute_contract: The idp_o_auth_attribute_contract of this IdpOAuthGrantAttributeMapping.  # noqa: E501
        :type: IdpOAuthAttributeContract
        """

        self._idp_o_auth_attribute_contract = idp_o_auth_attribute_contract

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdpOAuthGrantAttributeMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdpOAuthGrantAttributeMapping):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IdpOAuthGrantAttributeMapping):
            return True

        return self.to_dict() != other.to_dict()
