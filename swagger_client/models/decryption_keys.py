# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DecryptionKeys(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'primary_key_ref': 'ResourceLink',
        'secondary_key_pair_ref': 'ResourceLink'
    }

    attribute_map = {
        'primary_key_ref': 'primaryKeyRef',
        'secondary_key_pair_ref': 'secondaryKeyPairRef'
    }

    def __init__(self, primary_key_ref=None, secondary_key_pair_ref=None, _configuration=None):  # noqa: E501
        """DecryptionKeys - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._primary_key_ref = None
        self._secondary_key_pair_ref = None
        self.discriminator = None

        if primary_key_ref is not None:
            self.primary_key_ref = primary_key_ref
        if secondary_key_pair_ref is not None:
            self.secondary_key_pair_ref = secondary_key_pair_ref

    @property
    def primary_key_ref(self):
        """Gets the primary_key_ref of this DecryptionKeys.  # noqa: E501

        The ID of the primary decryption key pair. It is also known as the alias and can be found by viewing the corresponding certificate under 'Signing & Decryption Keys & Certificates' in the PingFederate Administrative Console.  # noqa: E501

        :return: The primary_key_ref of this DecryptionKeys.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._primary_key_ref

    @primary_key_ref.setter
    def primary_key_ref(self, primary_key_ref):
        """Sets the primary_key_ref of this DecryptionKeys.

        The ID of the primary decryption key pair. It is also known as the alias and can be found by viewing the corresponding certificate under 'Signing & Decryption Keys & Certificates' in the PingFederate Administrative Console.  # noqa: E501

        :param primary_key_ref: The primary_key_ref of this DecryptionKeys.  # noqa: E501
        :type: ResourceLink
        """

        self._primary_key_ref = primary_key_ref

    @property
    def secondary_key_pair_ref(self):
        """Gets the secondary_key_pair_ref of this DecryptionKeys.  # noqa: E501

        The ID of the secondary key pair used to decrypt message content received from the partner.  # noqa: E501

        :return: The secondary_key_pair_ref of this DecryptionKeys.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._secondary_key_pair_ref

    @secondary_key_pair_ref.setter
    def secondary_key_pair_ref(self, secondary_key_pair_ref):
        """Sets the secondary_key_pair_ref of this DecryptionKeys.

        The ID of the secondary key pair used to decrypt message content received from the partner.  # noqa: E501

        :param secondary_key_pair_ref: The secondary_key_pair_ref of this DecryptionKeys.  # noqa: E501
        :type: ResourceLink
        """

        self._secondary_key_pair_ref = secondary_key_pair_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DecryptionKeys, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DecryptionKeys):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DecryptionKeys):
            return True

        return self.to_dict() != other.to_dict()
