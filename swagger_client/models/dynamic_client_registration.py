# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DynamicClientRegistration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'initial_access_token_scope': 'str',
        'restrict_common_scopes': 'bool',
        'restricted_common_scopes': 'list[str]',
        'allowed_exclusive_scopes': 'list[str]',
        'allowed_authorization_detail_types': 'list[str]',
        'enforce_replay_prevention': 'bool',
        'require_signed_requests': 'bool',
        'default_access_token_manager_ref': 'ResourceLink',
        'restrict_to_default_access_token_manager': 'bool',
        'persistent_grant_expiration_type': 'str',
        'persistent_grant_expiration_time': 'int',
        'persistent_grant_expiration_time_unit': 'str',
        'persistent_grant_idle_timeout_type': 'str',
        'persistent_grant_idle_timeout': 'int',
        'persistent_grant_idle_timeout_time_unit': 'str',
        'client_cert_issuer_type': 'str',
        'client_cert_issuer_ref': 'ResourceLink',
        'refresh_rolling': 'str',
        'refresh_token_rolling_interval_type': 'str',
        'refresh_token_rolling_interval': 'int',
        'oidc_policy': 'ClientRegistrationOIDCPolicy',
        'policy_refs': 'list[ResourceLink]',
        'device_flow_setting_type': 'str',
        'user_authorization_url_override': 'str',
        'pending_authorization_timeout_override': 'int',
        'device_polling_interval_override': 'int',
        'bypass_activation_code_confirmation_override': 'bool',
        'require_proof_key_for_code_exchange': 'bool',
        'ciba_polling_interval': 'int',
        'ciba_require_signed_requests': 'bool',
        'request_policy_ref': 'ResourceLink',
        'token_exchange_processor_policy_ref': 'ResourceLink',
        'rotate_client_secret': 'bool',
        'rotate_registration_access_token': 'bool',
        'allow_client_delete': 'bool',
        'disable_registration_access_tokens': 'bool',
        'refresh_token_rolling_grace_period_type': 'str',
        'refresh_token_rolling_grace_period': 'int',
        'retain_client_secret': 'bool',
        'client_secret_retention_period_type': 'str',
        'client_secret_retention_period_override': 'int',
        'require_jwt_secured_authorization_response_mode': 'bool'
    }

    attribute_map = {
        'initial_access_token_scope': 'initialAccessTokenScope',
        'restrict_common_scopes': 'restrictCommonScopes',
        'restricted_common_scopes': 'restrictedCommonScopes',
        'allowed_exclusive_scopes': 'allowedExclusiveScopes',
        'allowed_authorization_detail_types': 'allowedAuthorizationDetailTypes',
        'enforce_replay_prevention': 'enforceReplayPrevention',
        'require_signed_requests': 'requireSignedRequests',
        'default_access_token_manager_ref': 'defaultAccessTokenManagerRef',
        'restrict_to_default_access_token_manager': 'restrictToDefaultAccessTokenManager',
        'persistent_grant_expiration_type': 'persistentGrantExpirationType',
        'persistent_grant_expiration_time': 'persistentGrantExpirationTime',
        'persistent_grant_expiration_time_unit': 'persistentGrantExpirationTimeUnit',
        'persistent_grant_idle_timeout_type': 'persistentGrantIdleTimeoutType',
        'persistent_grant_idle_timeout': 'persistentGrantIdleTimeout',
        'persistent_grant_idle_timeout_time_unit': 'persistentGrantIdleTimeoutTimeUnit',
        'client_cert_issuer_type': 'clientCertIssuerType',
        'client_cert_issuer_ref': 'clientCertIssuerRef',
        'refresh_rolling': 'refreshRolling',
        'refresh_token_rolling_interval_type': 'refreshTokenRollingIntervalType',
        'refresh_token_rolling_interval': 'refreshTokenRollingInterval',
        'oidc_policy': 'oidcPolicy',
        'policy_refs': 'policyRefs',
        'device_flow_setting_type': 'deviceFlowSettingType',
        'user_authorization_url_override': 'userAuthorizationUrlOverride',
        'pending_authorization_timeout_override': 'pendingAuthorizationTimeoutOverride',
        'device_polling_interval_override': 'devicePollingIntervalOverride',
        'bypass_activation_code_confirmation_override': 'bypassActivationCodeConfirmationOverride',
        'require_proof_key_for_code_exchange': 'requireProofKeyForCodeExchange',
        'ciba_polling_interval': 'cibaPollingInterval',
        'ciba_require_signed_requests': 'cibaRequireSignedRequests',
        'request_policy_ref': 'requestPolicyRef',
        'token_exchange_processor_policy_ref': 'tokenExchangeProcessorPolicyRef',
        'rotate_client_secret': 'rotateClientSecret',
        'rotate_registration_access_token': 'rotateRegistrationAccessToken',
        'allow_client_delete': 'allowClientDelete',
        'disable_registration_access_tokens': 'disableRegistrationAccessTokens',
        'refresh_token_rolling_grace_period_type': 'refreshTokenRollingGracePeriodType',
        'refresh_token_rolling_grace_period': 'refreshTokenRollingGracePeriod',
        'retain_client_secret': 'retainClientSecret',
        'client_secret_retention_period_type': 'clientSecretRetentionPeriodType',
        'client_secret_retention_period_override': 'clientSecretRetentionPeriodOverride',
        'require_jwt_secured_authorization_response_mode': 'requireJwtSecuredAuthorizationResponseMode'
    }

    def __init__(self, initial_access_token_scope=None, restrict_common_scopes=None, restricted_common_scopes=None, allowed_exclusive_scopes=None, allowed_authorization_detail_types=None, enforce_replay_prevention=None, require_signed_requests=None, default_access_token_manager_ref=None, restrict_to_default_access_token_manager=None, persistent_grant_expiration_type=None, persistent_grant_expiration_time=None, persistent_grant_expiration_time_unit=None, persistent_grant_idle_timeout_type=None, persistent_grant_idle_timeout=None, persistent_grant_idle_timeout_time_unit=None, client_cert_issuer_type=None, client_cert_issuer_ref=None, refresh_rolling=None, refresh_token_rolling_interval_type=None, refresh_token_rolling_interval=None, oidc_policy=None, policy_refs=None, device_flow_setting_type=None, user_authorization_url_override=None, pending_authorization_timeout_override=None, device_polling_interval_override=None, bypass_activation_code_confirmation_override=None, require_proof_key_for_code_exchange=None, ciba_polling_interval=None, ciba_require_signed_requests=None, request_policy_ref=None, token_exchange_processor_policy_ref=None, rotate_client_secret=None, rotate_registration_access_token=None, allow_client_delete=None, disable_registration_access_tokens=None, refresh_token_rolling_grace_period_type=None, refresh_token_rolling_grace_period=None, retain_client_secret=None, client_secret_retention_period_type=None, client_secret_retention_period_override=None, require_jwt_secured_authorization_response_mode=None, _configuration=None):  # noqa: E501
        """DynamicClientRegistration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._initial_access_token_scope = None
        self._restrict_common_scopes = None
        self._restricted_common_scopes = None
        self._allowed_exclusive_scopes = None
        self._allowed_authorization_detail_types = None
        self._enforce_replay_prevention = None
        self._require_signed_requests = None
        self._default_access_token_manager_ref = None
        self._restrict_to_default_access_token_manager = None
        self._persistent_grant_expiration_type = None
        self._persistent_grant_expiration_time = None
        self._persistent_grant_expiration_time_unit = None
        self._persistent_grant_idle_timeout_type = None
        self._persistent_grant_idle_timeout = None
        self._persistent_grant_idle_timeout_time_unit = None
        self._client_cert_issuer_type = None
        self._client_cert_issuer_ref = None
        self._refresh_rolling = None
        self._refresh_token_rolling_interval_type = None
        self._refresh_token_rolling_interval = None
        self._oidc_policy = None
        self._policy_refs = None
        self._device_flow_setting_type = None
        self._user_authorization_url_override = None
        self._pending_authorization_timeout_override = None
        self._device_polling_interval_override = None
        self._bypass_activation_code_confirmation_override = None
        self._require_proof_key_for_code_exchange = None
        self._ciba_polling_interval = None
        self._ciba_require_signed_requests = None
        self._request_policy_ref = None
        self._token_exchange_processor_policy_ref = None
        self._rotate_client_secret = None
        self._rotate_registration_access_token = None
        self._allow_client_delete = None
        self._disable_registration_access_tokens = None
        self._refresh_token_rolling_grace_period_type = None
        self._refresh_token_rolling_grace_period = None
        self._retain_client_secret = None
        self._client_secret_retention_period_type = None
        self._client_secret_retention_period_override = None
        self._require_jwt_secured_authorization_response_mode = None
        self.discriminator = None

        if initial_access_token_scope is not None:
            self.initial_access_token_scope = initial_access_token_scope
        if restrict_common_scopes is not None:
            self.restrict_common_scopes = restrict_common_scopes
        if restricted_common_scopes is not None:
            self.restricted_common_scopes = restricted_common_scopes
        if allowed_exclusive_scopes is not None:
            self.allowed_exclusive_scopes = allowed_exclusive_scopes
        if allowed_authorization_detail_types is not None:
            self.allowed_authorization_detail_types = allowed_authorization_detail_types
        if enforce_replay_prevention is not None:
            self.enforce_replay_prevention = enforce_replay_prevention
        if require_signed_requests is not None:
            self.require_signed_requests = require_signed_requests
        if default_access_token_manager_ref is not None:
            self.default_access_token_manager_ref = default_access_token_manager_ref
        if restrict_to_default_access_token_manager is not None:
            self.restrict_to_default_access_token_manager = restrict_to_default_access_token_manager
        if persistent_grant_expiration_type is not None:
            self.persistent_grant_expiration_type = persistent_grant_expiration_type
        if persistent_grant_expiration_time is not None:
            self.persistent_grant_expiration_time = persistent_grant_expiration_time
        if persistent_grant_expiration_time_unit is not None:
            self.persistent_grant_expiration_time_unit = persistent_grant_expiration_time_unit
        if persistent_grant_idle_timeout_type is not None:
            self.persistent_grant_idle_timeout_type = persistent_grant_idle_timeout_type
        if persistent_grant_idle_timeout is not None:
            self.persistent_grant_idle_timeout = persistent_grant_idle_timeout
        if persistent_grant_idle_timeout_time_unit is not None:
            self.persistent_grant_idle_timeout_time_unit = persistent_grant_idle_timeout_time_unit
        if client_cert_issuer_type is not None:
            self.client_cert_issuer_type = client_cert_issuer_type
        if client_cert_issuer_ref is not None:
            self.client_cert_issuer_ref = client_cert_issuer_ref
        if refresh_rolling is not None:
            self.refresh_rolling = refresh_rolling
        if refresh_token_rolling_interval_type is not None:
            self.refresh_token_rolling_interval_type = refresh_token_rolling_interval_type
        if refresh_token_rolling_interval is not None:
            self.refresh_token_rolling_interval = refresh_token_rolling_interval
        if oidc_policy is not None:
            self.oidc_policy = oidc_policy
        if policy_refs is not None:
            self.policy_refs = policy_refs
        if device_flow_setting_type is not None:
            self.device_flow_setting_type = device_flow_setting_type
        if user_authorization_url_override is not None:
            self.user_authorization_url_override = user_authorization_url_override
        if pending_authorization_timeout_override is not None:
            self.pending_authorization_timeout_override = pending_authorization_timeout_override
        if device_polling_interval_override is not None:
            self.device_polling_interval_override = device_polling_interval_override
        if bypass_activation_code_confirmation_override is not None:
            self.bypass_activation_code_confirmation_override = bypass_activation_code_confirmation_override
        if require_proof_key_for_code_exchange is not None:
            self.require_proof_key_for_code_exchange = require_proof_key_for_code_exchange
        if ciba_polling_interval is not None:
            self.ciba_polling_interval = ciba_polling_interval
        if ciba_require_signed_requests is not None:
            self.ciba_require_signed_requests = ciba_require_signed_requests
        if request_policy_ref is not None:
            self.request_policy_ref = request_policy_ref
        if token_exchange_processor_policy_ref is not None:
            self.token_exchange_processor_policy_ref = token_exchange_processor_policy_ref
        if rotate_client_secret is not None:
            self.rotate_client_secret = rotate_client_secret
        if rotate_registration_access_token is not None:
            self.rotate_registration_access_token = rotate_registration_access_token
        if allow_client_delete is not None:
            self.allow_client_delete = allow_client_delete
        if disable_registration_access_tokens is not None:
            self.disable_registration_access_tokens = disable_registration_access_tokens
        if refresh_token_rolling_grace_period_type is not None:
            self.refresh_token_rolling_grace_period_type = refresh_token_rolling_grace_period_type
        if refresh_token_rolling_grace_period is not None:
            self.refresh_token_rolling_grace_period = refresh_token_rolling_grace_period
        if retain_client_secret is not None:
            self.retain_client_secret = retain_client_secret
        if client_secret_retention_period_type is not None:
            self.client_secret_retention_period_type = client_secret_retention_period_type
        if client_secret_retention_period_override is not None:
            self.client_secret_retention_period_override = client_secret_retention_period_override
        if require_jwt_secured_authorization_response_mode is not None:
            self.require_jwt_secured_authorization_response_mode = require_jwt_secured_authorization_response_mode

    @property
    def initial_access_token_scope(self):
        """Gets the initial_access_token_scope of this DynamicClientRegistration.  # noqa: E501

        The initial access token to prevent unwanted client registrations.  # noqa: E501

        :return: The initial_access_token_scope of this DynamicClientRegistration.  # noqa: E501
        :rtype: str
        """
        return self._initial_access_token_scope

    @initial_access_token_scope.setter
    def initial_access_token_scope(self, initial_access_token_scope):
        """Sets the initial_access_token_scope of this DynamicClientRegistration.

        The initial access token to prevent unwanted client registrations.  # noqa: E501

        :param initial_access_token_scope: The initial_access_token_scope of this DynamicClientRegistration.  # noqa: E501
        :type: str
        """

        self._initial_access_token_scope = initial_access_token_scope

    @property
    def restrict_common_scopes(self):
        """Gets the restrict_common_scopes of this DynamicClientRegistration.  # noqa: E501

        Restrict common scopes.  # noqa: E501

        :return: The restrict_common_scopes of this DynamicClientRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._restrict_common_scopes

    @restrict_common_scopes.setter
    def restrict_common_scopes(self, restrict_common_scopes):
        """Sets the restrict_common_scopes of this DynamicClientRegistration.

        Restrict common scopes.  # noqa: E501

        :param restrict_common_scopes: The restrict_common_scopes of this DynamicClientRegistration.  # noqa: E501
        :type: bool
        """

        self._restrict_common_scopes = restrict_common_scopes

    @property
    def restricted_common_scopes(self):
        """Gets the restricted_common_scopes of this DynamicClientRegistration.  # noqa: E501

        The common scopes to restrict.  # noqa: E501

        :return: The restricted_common_scopes of this DynamicClientRegistration.  # noqa: E501
        :rtype: list[str]
        """
        return self._restricted_common_scopes

    @restricted_common_scopes.setter
    def restricted_common_scopes(self, restricted_common_scopes):
        """Sets the restricted_common_scopes of this DynamicClientRegistration.

        The common scopes to restrict.  # noqa: E501

        :param restricted_common_scopes: The restricted_common_scopes of this DynamicClientRegistration.  # noqa: E501
        :type: list[str]
        """

        self._restricted_common_scopes = restricted_common_scopes

    @property
    def allowed_exclusive_scopes(self):
        """Gets the allowed_exclusive_scopes of this DynamicClientRegistration.  # noqa: E501

        The exclusive scopes to allow.  # noqa: E501

        :return: The allowed_exclusive_scopes of this DynamicClientRegistration.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_exclusive_scopes

    @allowed_exclusive_scopes.setter
    def allowed_exclusive_scopes(self, allowed_exclusive_scopes):
        """Sets the allowed_exclusive_scopes of this DynamicClientRegistration.

        The exclusive scopes to allow.  # noqa: E501

        :param allowed_exclusive_scopes: The allowed_exclusive_scopes of this DynamicClientRegistration.  # noqa: E501
        :type: list[str]
        """

        self._allowed_exclusive_scopes = allowed_exclusive_scopes

    @property
    def allowed_authorization_detail_types(self):
        """Gets the allowed_authorization_detail_types of this DynamicClientRegistration.  # noqa: E501

        The authorization detail types to allow.  # noqa: E501

        :return: The allowed_authorization_detail_types of this DynamicClientRegistration.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_authorization_detail_types

    @allowed_authorization_detail_types.setter
    def allowed_authorization_detail_types(self, allowed_authorization_detail_types):
        """Sets the allowed_authorization_detail_types of this DynamicClientRegistration.

        The authorization detail types to allow.  # noqa: E501

        :param allowed_authorization_detail_types: The allowed_authorization_detail_types of this DynamicClientRegistration.  # noqa: E501
        :type: list[str]
        """

        self._allowed_authorization_detail_types = allowed_authorization_detail_types

    @property
    def enforce_replay_prevention(self):
        """Gets the enforce_replay_prevention of this DynamicClientRegistration.  # noqa: E501

        Enforce replay prevention.  # noqa: E501

        :return: The enforce_replay_prevention of this DynamicClientRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_replay_prevention

    @enforce_replay_prevention.setter
    def enforce_replay_prevention(self, enforce_replay_prevention):
        """Sets the enforce_replay_prevention of this DynamicClientRegistration.

        Enforce replay prevention.  # noqa: E501

        :param enforce_replay_prevention: The enforce_replay_prevention of this DynamicClientRegistration.  # noqa: E501
        :type: bool
        """

        self._enforce_replay_prevention = enforce_replay_prevention

    @property
    def require_signed_requests(self):
        """Gets the require_signed_requests of this DynamicClientRegistration.  # noqa: E501

        Require signed requests.  # noqa: E501

        :return: The require_signed_requests of this DynamicClientRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._require_signed_requests

    @require_signed_requests.setter
    def require_signed_requests(self, require_signed_requests):
        """Sets the require_signed_requests of this DynamicClientRegistration.

        Require signed requests.  # noqa: E501

        :param require_signed_requests: The require_signed_requests of this DynamicClientRegistration.  # noqa: E501
        :type: bool
        """

        self._require_signed_requests = require_signed_requests

    @property
    def default_access_token_manager_ref(self):
        """Gets the default_access_token_manager_ref of this DynamicClientRegistration.  # noqa: E501

        The default access token manager for this client.  # noqa: E501

        :return: The default_access_token_manager_ref of this DynamicClientRegistration.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._default_access_token_manager_ref

    @default_access_token_manager_ref.setter
    def default_access_token_manager_ref(self, default_access_token_manager_ref):
        """Sets the default_access_token_manager_ref of this DynamicClientRegistration.

        The default access token manager for this client.  # noqa: E501

        :param default_access_token_manager_ref: The default_access_token_manager_ref of this DynamicClientRegistration.  # noqa: E501
        :type: ResourceLink
        """

        self._default_access_token_manager_ref = default_access_token_manager_ref

    @property
    def restrict_to_default_access_token_manager(self):
        """Gets the restrict_to_default_access_token_manager of this DynamicClientRegistration.  # noqa: E501

        Determines whether the client is restricted to using only its default access token manager. The default is false.  # noqa: E501

        :return: The restrict_to_default_access_token_manager of this DynamicClientRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._restrict_to_default_access_token_manager

    @restrict_to_default_access_token_manager.setter
    def restrict_to_default_access_token_manager(self, restrict_to_default_access_token_manager):
        """Sets the restrict_to_default_access_token_manager of this DynamicClientRegistration.

        Determines whether the client is restricted to using only its default access token manager. The default is false.  # noqa: E501

        :param restrict_to_default_access_token_manager: The restrict_to_default_access_token_manager of this DynamicClientRegistration.  # noqa: E501
        :type: bool
        """

        self._restrict_to_default_access_token_manager = restrict_to_default_access_token_manager

    @property
    def persistent_grant_expiration_type(self):
        """Gets the persistent_grant_expiration_type of this DynamicClientRegistration.  # noqa: E501

        Allows an administrator to override the Persistent Grant Lifetime set globally for the OAuth AS. Defaults to SERVER_DEFAULT.  # noqa: E501

        :return: The persistent_grant_expiration_type of this DynamicClientRegistration.  # noqa: E501
        :rtype: str
        """
        return self._persistent_grant_expiration_type

    @persistent_grant_expiration_type.setter
    def persistent_grant_expiration_type(self, persistent_grant_expiration_type):
        """Sets the persistent_grant_expiration_type of this DynamicClientRegistration.

        Allows an administrator to override the Persistent Grant Lifetime set globally for the OAuth AS. Defaults to SERVER_DEFAULT.  # noqa: E501

        :param persistent_grant_expiration_type: The persistent_grant_expiration_type of this DynamicClientRegistration.  # noqa: E501
        :type: str
        """
        allowed_values = ["INDEFINITE_EXPIRY", "SERVER_DEFAULT", "OVERRIDE_SERVER_DEFAULT"]  # noqa: E501
        if (self._configuration.client_side_validation and
                persistent_grant_expiration_type not in allowed_values):
            raise ValueError(
                "Invalid value for `persistent_grant_expiration_type` ({0}), must be one of {1}"  # noqa: E501
                .format(persistent_grant_expiration_type, allowed_values)
            )

        self._persistent_grant_expiration_type = persistent_grant_expiration_type

    @property
    def persistent_grant_expiration_time(self):
        """Gets the persistent_grant_expiration_time of this DynamicClientRegistration.  # noqa: E501

        The persistent grant expiration time.  # noqa: E501

        :return: The persistent_grant_expiration_time of this DynamicClientRegistration.  # noqa: E501
        :rtype: int
        """
        return self._persistent_grant_expiration_time

    @persistent_grant_expiration_time.setter
    def persistent_grant_expiration_time(self, persistent_grant_expiration_time):
        """Sets the persistent_grant_expiration_time of this DynamicClientRegistration.

        The persistent grant expiration time.  # noqa: E501

        :param persistent_grant_expiration_time: The persistent_grant_expiration_time of this DynamicClientRegistration.  # noqa: E501
        :type: int
        """

        self._persistent_grant_expiration_time = persistent_grant_expiration_time

    @property
    def persistent_grant_expiration_time_unit(self):
        """Gets the persistent_grant_expiration_time_unit of this DynamicClientRegistration.  # noqa: E501

        The persistent grant expiration time unit.  # noqa: E501

        :return: The persistent_grant_expiration_time_unit of this DynamicClientRegistration.  # noqa: E501
        :rtype: str
        """
        return self._persistent_grant_expiration_time_unit

    @persistent_grant_expiration_time_unit.setter
    def persistent_grant_expiration_time_unit(self, persistent_grant_expiration_time_unit):
        """Sets the persistent_grant_expiration_time_unit of this DynamicClientRegistration.

        The persistent grant expiration time unit.  # noqa: E501

        :param persistent_grant_expiration_time_unit: The persistent_grant_expiration_time_unit of this DynamicClientRegistration.  # noqa: E501
        :type: str
        """
        allowed_values = ["MINUTES", "DAYS", "HOURS"]  # noqa: E501
        if (self._configuration.client_side_validation and
                persistent_grant_expiration_time_unit not in allowed_values):
            raise ValueError(
                "Invalid value for `persistent_grant_expiration_time_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(persistent_grant_expiration_time_unit, allowed_values)
            )

        self._persistent_grant_expiration_time_unit = persistent_grant_expiration_time_unit

    @property
    def persistent_grant_idle_timeout_type(self):
        """Gets the persistent_grant_idle_timeout_type of this DynamicClientRegistration.  # noqa: E501

        Allows an administrator to override the Persistent Grant Idle Timeout set globally for the OAuth AS. Defaults to SERVER_DEFAULT.  # noqa: E501

        :return: The persistent_grant_idle_timeout_type of this DynamicClientRegistration.  # noqa: E501
        :rtype: str
        """
        return self._persistent_grant_idle_timeout_type

    @persistent_grant_idle_timeout_type.setter
    def persistent_grant_idle_timeout_type(self, persistent_grant_idle_timeout_type):
        """Sets the persistent_grant_idle_timeout_type of this DynamicClientRegistration.

        Allows an administrator to override the Persistent Grant Idle Timeout set globally for the OAuth AS. Defaults to SERVER_DEFAULT.  # noqa: E501

        :param persistent_grant_idle_timeout_type: The persistent_grant_idle_timeout_type of this DynamicClientRegistration.  # noqa: E501
        :type: str
        """
        allowed_values = ["INDEFINITE_EXPIRY", "SERVER_DEFAULT", "OVERRIDE_SERVER_DEFAULT"]  # noqa: E501
        if (self._configuration.client_side_validation and
                persistent_grant_idle_timeout_type not in allowed_values):
            raise ValueError(
                "Invalid value for `persistent_grant_idle_timeout_type` ({0}), must be one of {1}"  # noqa: E501
                .format(persistent_grant_idle_timeout_type, allowed_values)
            )

        self._persistent_grant_idle_timeout_type = persistent_grant_idle_timeout_type

    @property
    def persistent_grant_idle_timeout(self):
        """Gets the persistent_grant_idle_timeout of this DynamicClientRegistration.  # noqa: E501

        The persistent grant idle timeout.  # noqa: E501

        :return: The persistent_grant_idle_timeout of this DynamicClientRegistration.  # noqa: E501
        :rtype: int
        """
        return self._persistent_grant_idle_timeout

    @persistent_grant_idle_timeout.setter
    def persistent_grant_idle_timeout(self, persistent_grant_idle_timeout):
        """Sets the persistent_grant_idle_timeout of this DynamicClientRegistration.

        The persistent grant idle timeout.  # noqa: E501

        :param persistent_grant_idle_timeout: The persistent_grant_idle_timeout of this DynamicClientRegistration.  # noqa: E501
        :type: int
        """

        self._persistent_grant_idle_timeout = persistent_grant_idle_timeout

    @property
    def persistent_grant_idle_timeout_time_unit(self):
        """Gets the persistent_grant_idle_timeout_time_unit of this DynamicClientRegistration.  # noqa: E501

        The persistent grant idle timeout time unit.  # noqa: E501

        :return: The persistent_grant_idle_timeout_time_unit of this DynamicClientRegistration.  # noqa: E501
        :rtype: str
        """
        return self._persistent_grant_idle_timeout_time_unit

    @persistent_grant_idle_timeout_time_unit.setter
    def persistent_grant_idle_timeout_time_unit(self, persistent_grant_idle_timeout_time_unit):
        """Sets the persistent_grant_idle_timeout_time_unit of this DynamicClientRegistration.

        The persistent grant idle timeout time unit.  # noqa: E501

        :param persistent_grant_idle_timeout_time_unit: The persistent_grant_idle_timeout_time_unit of this DynamicClientRegistration.  # noqa: E501
        :type: str
        """
        allowed_values = ["MINUTES", "DAYS", "HOURS"]  # noqa: E501
        if (self._configuration.client_side_validation and
                persistent_grant_idle_timeout_time_unit not in allowed_values):
            raise ValueError(
                "Invalid value for `persistent_grant_idle_timeout_time_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(persistent_grant_idle_timeout_time_unit, allowed_values)
            )

        self._persistent_grant_idle_timeout_time_unit = persistent_grant_idle_timeout_time_unit

    @property
    def client_cert_issuer_type(self):
        """Gets the client_cert_issuer_type of this DynamicClientRegistration.  # noqa: E501

        Client TLS Certificate Issuer Type.  # noqa: E501

        :return: The client_cert_issuer_type of this DynamicClientRegistration.  # noqa: E501
        :rtype: str
        """
        return self._client_cert_issuer_type

    @client_cert_issuer_type.setter
    def client_cert_issuer_type(self, client_cert_issuer_type):
        """Sets the client_cert_issuer_type of this DynamicClientRegistration.

        Client TLS Certificate Issuer Type.  # noqa: E501

        :param client_cert_issuer_type: The client_cert_issuer_type of this DynamicClientRegistration.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "TRUST_ANY", "CERTIFICATE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                client_cert_issuer_type not in allowed_values):
            raise ValueError(
                "Invalid value for `client_cert_issuer_type` ({0}), must be one of {1}"  # noqa: E501
                .format(client_cert_issuer_type, allowed_values)
            )

        self._client_cert_issuer_type = client_cert_issuer_type

    @property
    def client_cert_issuer_ref(self):
        """Gets the client_cert_issuer_ref of this DynamicClientRegistration.  # noqa: E501

        Client TLS Certificate Issuer DN.  # noqa: E501

        :return: The client_cert_issuer_ref of this DynamicClientRegistration.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._client_cert_issuer_ref

    @client_cert_issuer_ref.setter
    def client_cert_issuer_ref(self, client_cert_issuer_ref):
        """Sets the client_cert_issuer_ref of this DynamicClientRegistration.

        Client TLS Certificate Issuer DN.  # noqa: E501

        :param client_cert_issuer_ref: The client_cert_issuer_ref of this DynamicClientRegistration.  # noqa: E501
        :type: ResourceLink
        """

        self._client_cert_issuer_ref = client_cert_issuer_ref

    @property
    def refresh_rolling(self):
        """Gets the refresh_rolling of this DynamicClientRegistration.  # noqa: E501

        Use ROLL or DONT_ROLL to override the Roll Refresh Token Values setting on the Authorization Server Settings. SERVER_DEFAULT will default to the Roll Refresh Token Values setting on the Authorization Server Setting screen. Defaults to SERVER_DEFAULT.  # noqa: E501

        :return: The refresh_rolling of this DynamicClientRegistration.  # noqa: E501
        :rtype: str
        """
        return self._refresh_rolling

    @refresh_rolling.setter
    def refresh_rolling(self, refresh_rolling):
        """Sets the refresh_rolling of this DynamicClientRegistration.

        Use ROLL or DONT_ROLL to override the Roll Refresh Token Values setting on the Authorization Server Settings. SERVER_DEFAULT will default to the Roll Refresh Token Values setting on the Authorization Server Setting screen. Defaults to SERVER_DEFAULT.  # noqa: E501

        :param refresh_rolling: The refresh_rolling of this DynamicClientRegistration.  # noqa: E501
        :type: str
        """
        allowed_values = ["SERVER_DEFAULT", "DONT_ROLL", "ROLL"]  # noqa: E501
        if (self._configuration.client_side_validation and
                refresh_rolling not in allowed_values):
            raise ValueError(
                "Invalid value for `refresh_rolling` ({0}), must be one of {1}"  # noqa: E501
                .format(refresh_rolling, allowed_values)
            )

        self._refresh_rolling = refresh_rolling

    @property
    def refresh_token_rolling_interval_type(self):
        """Gets the refresh_token_rolling_interval_type of this DynamicClientRegistration.  # noqa: E501

        Use OVERRIDE_SERVER_DEFAULT to override the Refresh Token Rolling Interval value on the Authorization Server Settings. SERVER_DEFAULT will default to the Refresh Token Rolling Interval value on the Authorization Server Setting. Defaults to SERVER_DEFAULT.  # noqa: E501

        :return: The refresh_token_rolling_interval_type of this DynamicClientRegistration.  # noqa: E501
        :rtype: str
        """
        return self._refresh_token_rolling_interval_type

    @refresh_token_rolling_interval_type.setter
    def refresh_token_rolling_interval_type(self, refresh_token_rolling_interval_type):
        """Sets the refresh_token_rolling_interval_type of this DynamicClientRegistration.

        Use OVERRIDE_SERVER_DEFAULT to override the Refresh Token Rolling Interval value on the Authorization Server Settings. SERVER_DEFAULT will default to the Refresh Token Rolling Interval value on the Authorization Server Setting. Defaults to SERVER_DEFAULT.  # noqa: E501

        :param refresh_token_rolling_interval_type: The refresh_token_rolling_interval_type of this DynamicClientRegistration.  # noqa: E501
        :type: str
        """
        allowed_values = ["SERVER_DEFAULT", "OVERRIDE_SERVER_DEFAULT"]  # noqa: E501
        if (self._configuration.client_side_validation and
                refresh_token_rolling_interval_type not in allowed_values):
            raise ValueError(
                "Invalid value for `refresh_token_rolling_interval_type` ({0}), must be one of {1}"  # noqa: E501
                .format(refresh_token_rolling_interval_type, allowed_values)
            )

        self._refresh_token_rolling_interval_type = refresh_token_rolling_interval_type

    @property
    def refresh_token_rolling_interval(self):
        """Gets the refresh_token_rolling_interval of this DynamicClientRegistration.  # noqa: E501

        The minimum interval to roll refresh tokens, in hours. This value will override the Refresh Token Rolling Interval Value on the Authorization Server Settings.  # noqa: E501

        :return: The refresh_token_rolling_interval of this DynamicClientRegistration.  # noqa: E501
        :rtype: int
        """
        return self._refresh_token_rolling_interval

    @refresh_token_rolling_interval.setter
    def refresh_token_rolling_interval(self, refresh_token_rolling_interval):
        """Sets the refresh_token_rolling_interval of this DynamicClientRegistration.

        The minimum interval to roll refresh tokens, in hours. This value will override the Refresh Token Rolling Interval Value on the Authorization Server Settings.  # noqa: E501

        :param refresh_token_rolling_interval: The refresh_token_rolling_interval of this DynamicClientRegistration.  # noqa: E501
        :type: int
        """

        self._refresh_token_rolling_interval = refresh_token_rolling_interval

    @property
    def oidc_policy(self):
        """Gets the oidc_policy of this DynamicClientRegistration.  # noqa: E501

        Open ID Connect Policy settings.  This is included in the message only when OIDC is enabled.  # noqa: E501

        :return: The oidc_policy of this DynamicClientRegistration.  # noqa: E501
        :rtype: ClientRegistrationOIDCPolicy
        """
        return self._oidc_policy

    @oidc_policy.setter
    def oidc_policy(self, oidc_policy):
        """Sets the oidc_policy of this DynamicClientRegistration.

        Open ID Connect Policy settings.  This is included in the message only when OIDC is enabled.  # noqa: E501

        :param oidc_policy: The oidc_policy of this DynamicClientRegistration.  # noqa: E501
        :type: ClientRegistrationOIDCPolicy
        """

        self._oidc_policy = oidc_policy

    @property
    def policy_refs(self):
        """Gets the policy_refs of this DynamicClientRegistration.  # noqa: E501

        The client registration policies.  # noqa: E501

        :return: The policy_refs of this DynamicClientRegistration.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._policy_refs

    @policy_refs.setter
    def policy_refs(self, policy_refs):
        """Sets the policy_refs of this DynamicClientRegistration.

        The client registration policies.  # noqa: E501

        :param policy_refs: The policy_refs of this DynamicClientRegistration.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._policy_refs = policy_refs

    @property
    def device_flow_setting_type(self):
        """Gets the device_flow_setting_type of this DynamicClientRegistration.  # noqa: E501

        Allows an administrator to override the Device Authorization Settings set globally for the OAuth AS. Defaults to SERVER_DEFAULT.  # noqa: E501

        :return: The device_flow_setting_type of this DynamicClientRegistration.  # noqa: E501
        :rtype: str
        """
        return self._device_flow_setting_type

    @device_flow_setting_type.setter
    def device_flow_setting_type(self, device_flow_setting_type):
        """Sets the device_flow_setting_type of this DynamicClientRegistration.

        Allows an administrator to override the Device Authorization Settings set globally for the OAuth AS. Defaults to SERVER_DEFAULT.  # noqa: E501

        :param device_flow_setting_type: The device_flow_setting_type of this DynamicClientRegistration.  # noqa: E501
        :type: str
        """
        allowed_values = ["SERVER_DEFAULT", "OVERRIDE_SERVER_DEFAULT"]  # noqa: E501
        if (self._configuration.client_side_validation and
                device_flow_setting_type not in allowed_values):
            raise ValueError(
                "Invalid value for `device_flow_setting_type` ({0}), must be one of {1}"  # noqa: E501
                .format(device_flow_setting_type, allowed_values)
            )

        self._device_flow_setting_type = device_flow_setting_type

    @property
    def user_authorization_url_override(self):
        """Gets the user_authorization_url_override of this DynamicClientRegistration.  # noqa: E501

        The URL is used as 'verification_url' and 'verification_url_complete' values in a Device Authorization request.  # noqa: E501

        :return: The user_authorization_url_override of this DynamicClientRegistration.  # noqa: E501
        :rtype: str
        """
        return self._user_authorization_url_override

    @user_authorization_url_override.setter
    def user_authorization_url_override(self, user_authorization_url_override):
        """Sets the user_authorization_url_override of this DynamicClientRegistration.

        The URL is used as 'verification_url' and 'verification_url_complete' values in a Device Authorization request.  # noqa: E501

        :param user_authorization_url_override: The user_authorization_url_override of this DynamicClientRegistration.  # noqa: E501
        :type: str
        """

        self._user_authorization_url_override = user_authorization_url_override

    @property
    def pending_authorization_timeout_override(self):
        """Gets the pending_authorization_timeout_override of this DynamicClientRegistration.  # noqa: E501

        The 'device_code' and 'user_code' timeout, in seconds.  # noqa: E501

        :return: The pending_authorization_timeout_override of this DynamicClientRegistration.  # noqa: E501
        :rtype: int
        """
        return self._pending_authorization_timeout_override

    @pending_authorization_timeout_override.setter
    def pending_authorization_timeout_override(self, pending_authorization_timeout_override):
        """Sets the pending_authorization_timeout_override of this DynamicClientRegistration.

        The 'device_code' and 'user_code' timeout, in seconds.  # noqa: E501

        :param pending_authorization_timeout_override: The pending_authorization_timeout_override of this DynamicClientRegistration.  # noqa: E501
        :type: int
        """

        self._pending_authorization_timeout_override = pending_authorization_timeout_override

    @property
    def device_polling_interval_override(self):
        """Gets the device_polling_interval_override of this DynamicClientRegistration.  # noqa: E501

        The amount of time client should wait between polling requests, in seconds.  # noqa: E501

        :return: The device_polling_interval_override of this DynamicClientRegistration.  # noqa: E501
        :rtype: int
        """
        return self._device_polling_interval_override

    @device_polling_interval_override.setter
    def device_polling_interval_override(self, device_polling_interval_override):
        """Sets the device_polling_interval_override of this DynamicClientRegistration.

        The amount of time client should wait between polling requests, in seconds.  # noqa: E501

        :param device_polling_interval_override: The device_polling_interval_override of this DynamicClientRegistration.  # noqa: E501
        :type: int
        """

        self._device_polling_interval_override = device_polling_interval_override

    @property
    def bypass_activation_code_confirmation_override(self):
        """Gets the bypass_activation_code_confirmation_override of this DynamicClientRegistration.  # noqa: E501

        Indicates if the Activation Code Confirmation page should be bypassed if 'verification_url_complete' is used by the end user to authorize a device.  # noqa: E501

        :return: The bypass_activation_code_confirmation_override of this DynamicClientRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._bypass_activation_code_confirmation_override

    @bypass_activation_code_confirmation_override.setter
    def bypass_activation_code_confirmation_override(self, bypass_activation_code_confirmation_override):
        """Sets the bypass_activation_code_confirmation_override of this DynamicClientRegistration.

        Indicates if the Activation Code Confirmation page should be bypassed if 'verification_url_complete' is used by the end user to authorize a device.  # noqa: E501

        :param bypass_activation_code_confirmation_override: The bypass_activation_code_confirmation_override of this DynamicClientRegistration.  # noqa: E501
        :type: bool
        """

        self._bypass_activation_code_confirmation_override = bypass_activation_code_confirmation_override

    @property
    def require_proof_key_for_code_exchange(self):
        """Gets the require_proof_key_for_code_exchange of this DynamicClientRegistration.  # noqa: E501

        Determines whether Proof Key for Code Exchange (PKCE) is required for the dynamically created client.  # noqa: E501

        :return: The require_proof_key_for_code_exchange of this DynamicClientRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._require_proof_key_for_code_exchange

    @require_proof_key_for_code_exchange.setter
    def require_proof_key_for_code_exchange(self, require_proof_key_for_code_exchange):
        """Sets the require_proof_key_for_code_exchange of this DynamicClientRegistration.

        Determines whether Proof Key for Code Exchange (PKCE) is required for the dynamically created client.  # noqa: E501

        :param require_proof_key_for_code_exchange: The require_proof_key_for_code_exchange of this DynamicClientRegistration.  # noqa: E501
        :type: bool
        """

        self._require_proof_key_for_code_exchange = require_proof_key_for_code_exchange

    @property
    def ciba_polling_interval(self):
        """Gets the ciba_polling_interval of this DynamicClientRegistration.  # noqa: E501

        The minimum amount of time in seconds that the Client must wait between polling requests to the token endpoint. The default is 3 seconds.  # noqa: E501

        :return: The ciba_polling_interval of this DynamicClientRegistration.  # noqa: E501
        :rtype: int
        """
        return self._ciba_polling_interval

    @ciba_polling_interval.setter
    def ciba_polling_interval(self, ciba_polling_interval):
        """Sets the ciba_polling_interval of this DynamicClientRegistration.

        The minimum amount of time in seconds that the Client must wait between polling requests to the token endpoint. The default is 3 seconds.  # noqa: E501

        :param ciba_polling_interval: The ciba_polling_interval of this DynamicClientRegistration.  # noqa: E501
        :type: int
        """

        self._ciba_polling_interval = ciba_polling_interval

    @property
    def ciba_require_signed_requests(self):
        """Gets the ciba_require_signed_requests of this DynamicClientRegistration.  # noqa: E501

        Determines whether CIBA signed requests are required for this client.  # noqa: E501

        :return: The ciba_require_signed_requests of this DynamicClientRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._ciba_require_signed_requests

    @ciba_require_signed_requests.setter
    def ciba_require_signed_requests(self, ciba_require_signed_requests):
        """Sets the ciba_require_signed_requests of this DynamicClientRegistration.

        Determines whether CIBA signed requests are required for this client.  # noqa: E501

        :param ciba_require_signed_requests: The ciba_require_signed_requests of this DynamicClientRegistration.  # noqa: E501
        :type: bool
        """

        self._ciba_require_signed_requests = ciba_require_signed_requests

    @property
    def request_policy_ref(self):
        """Gets the request_policy_ref of this DynamicClientRegistration.  # noqa: E501

        The CIBA request policy.  # noqa: E501

        :return: The request_policy_ref of this DynamicClientRegistration.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._request_policy_ref

    @request_policy_ref.setter
    def request_policy_ref(self, request_policy_ref):
        """Sets the request_policy_ref of this DynamicClientRegistration.

        The CIBA request policy.  # noqa: E501

        :param request_policy_ref: The request_policy_ref of this DynamicClientRegistration.  # noqa: E501
        :type: ResourceLink
        """

        self._request_policy_ref = request_policy_ref

    @property
    def token_exchange_processor_policy_ref(self):
        """Gets the token_exchange_processor_policy_ref of this DynamicClientRegistration.  # noqa: E501

        The Token Exchange Processor policy.  # noqa: E501

        :return: The token_exchange_processor_policy_ref of this DynamicClientRegistration.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._token_exchange_processor_policy_ref

    @token_exchange_processor_policy_ref.setter
    def token_exchange_processor_policy_ref(self, token_exchange_processor_policy_ref):
        """Sets the token_exchange_processor_policy_ref of this DynamicClientRegistration.

        The Token Exchange Processor policy.  # noqa: E501

        :param token_exchange_processor_policy_ref: The token_exchange_processor_policy_ref of this DynamicClientRegistration.  # noqa: E501
        :type: ResourceLink
        """

        self._token_exchange_processor_policy_ref = token_exchange_processor_policy_ref

    @property
    def rotate_client_secret(self):
        """Gets the rotate_client_secret of this DynamicClientRegistration.  # noqa: E501

        Rotate registration access token on dynamic client management requests.  # noqa: E501

        :return: The rotate_client_secret of this DynamicClientRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._rotate_client_secret

    @rotate_client_secret.setter
    def rotate_client_secret(self, rotate_client_secret):
        """Sets the rotate_client_secret of this DynamicClientRegistration.

        Rotate registration access token on dynamic client management requests.  # noqa: E501

        :param rotate_client_secret: The rotate_client_secret of this DynamicClientRegistration.  # noqa: E501
        :type: bool
        """

        self._rotate_client_secret = rotate_client_secret

    @property
    def rotate_registration_access_token(self):
        """Gets the rotate_registration_access_token of this DynamicClientRegistration.  # noqa: E501

        Rotate client secret on dynamic client management requests.  # noqa: E501

        :return: The rotate_registration_access_token of this DynamicClientRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._rotate_registration_access_token

    @rotate_registration_access_token.setter
    def rotate_registration_access_token(self, rotate_registration_access_token):
        """Sets the rotate_registration_access_token of this DynamicClientRegistration.

        Rotate client secret on dynamic client management requests.  # noqa: E501

        :param rotate_registration_access_token: The rotate_registration_access_token of this DynamicClientRegistration.  # noqa: E501
        :type: bool
        """

        self._rotate_registration_access_token = rotate_registration_access_token

    @property
    def allow_client_delete(self):
        """Gets the allow_client_delete of this DynamicClientRegistration.  # noqa: E501

        Allow client deletion from dynamic client management.  # noqa: E501

        :return: The allow_client_delete of this DynamicClientRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._allow_client_delete

    @allow_client_delete.setter
    def allow_client_delete(self, allow_client_delete):
        """Sets the allow_client_delete of this DynamicClientRegistration.

        Allow client deletion from dynamic client management.  # noqa: E501

        :param allow_client_delete: The allow_client_delete of this DynamicClientRegistration.  # noqa: E501
        :type: bool
        """

        self._allow_client_delete = allow_client_delete

    @property
    def disable_registration_access_tokens(self):
        """Gets the disable_registration_access_tokens of this DynamicClientRegistration.  # noqa: E501

        Disable registration access tokens. Local standards may mandate different registration access token requirements. If applicable, implement custom validation and enforcement rules using the DynamicClientRegistrationPlugin interface from the PingFederate SDK, configure the client registration policies (policyRefs), and set this property (disableRegistrationAccessTokens) to true. CAUTION: When the disableRegistrationAccessTokens property is set to true, all clients, not just the ones created using the Dynamic Client Registration protocol, are vulnerable to unrestricted retrievals, updates (including modifications to the client authentication scheme and redirect URIs), and deletes at the /as/clients.oauth2 endpoint unless one or more client registration policies are in place to protect against unauthorized attempts.  # noqa: E501

        :return: The disable_registration_access_tokens of this DynamicClientRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._disable_registration_access_tokens

    @disable_registration_access_tokens.setter
    def disable_registration_access_tokens(self, disable_registration_access_tokens):
        """Sets the disable_registration_access_tokens of this DynamicClientRegistration.

        Disable registration access tokens. Local standards may mandate different registration access token requirements. If applicable, implement custom validation and enforcement rules using the DynamicClientRegistrationPlugin interface from the PingFederate SDK, configure the client registration policies (policyRefs), and set this property (disableRegistrationAccessTokens) to true. CAUTION: When the disableRegistrationAccessTokens property is set to true, all clients, not just the ones created using the Dynamic Client Registration protocol, are vulnerable to unrestricted retrievals, updates (including modifications to the client authentication scheme and redirect URIs), and deletes at the /as/clients.oauth2 endpoint unless one or more client registration policies are in place to protect against unauthorized attempts.  # noqa: E501

        :param disable_registration_access_tokens: The disable_registration_access_tokens of this DynamicClientRegistration.  # noqa: E501
        :type: bool
        """

        self._disable_registration_access_tokens = disable_registration_access_tokens

    @property
    def refresh_token_rolling_grace_period_type(self):
        """Gets the refresh_token_rolling_grace_period_type of this DynamicClientRegistration.  # noqa: E501

        When specified, it overrides the global Refresh Token Grace Period defined in the Authorization Server Settings. The default value is SERVER_DEFAULT  # noqa: E501

        :return: The refresh_token_rolling_grace_period_type of this DynamicClientRegistration.  # noqa: E501
        :rtype: str
        """
        return self._refresh_token_rolling_grace_period_type

    @refresh_token_rolling_grace_period_type.setter
    def refresh_token_rolling_grace_period_type(self, refresh_token_rolling_grace_period_type):
        """Sets the refresh_token_rolling_grace_period_type of this DynamicClientRegistration.

        When specified, it overrides the global Refresh Token Grace Period defined in the Authorization Server Settings. The default value is SERVER_DEFAULT  # noqa: E501

        :param refresh_token_rolling_grace_period_type: The refresh_token_rolling_grace_period_type of this DynamicClientRegistration.  # noqa: E501
        :type: str
        """
        allowed_values = ["SERVER_DEFAULT", "OVERRIDE_SERVER_DEFAULT"]  # noqa: E501
        if (self._configuration.client_side_validation and
                refresh_token_rolling_grace_period_type not in allowed_values):
            raise ValueError(
                "Invalid value for `refresh_token_rolling_grace_period_type` ({0}), must be one of {1}"  # noqa: E501
                .format(refresh_token_rolling_grace_period_type, allowed_values)
            )

        self._refresh_token_rolling_grace_period_type = refresh_token_rolling_grace_period_type

    @property
    def refresh_token_rolling_grace_period(self):
        """Gets the refresh_token_rolling_grace_period of this DynamicClientRegistration.  # noqa: E501

        The grace period that a rolled refresh token remains valid in seconds.  # noqa: E501

        :return: The refresh_token_rolling_grace_period of this DynamicClientRegistration.  # noqa: E501
        :rtype: int
        """
        return self._refresh_token_rolling_grace_period

    @refresh_token_rolling_grace_period.setter
    def refresh_token_rolling_grace_period(self, refresh_token_rolling_grace_period):
        """Sets the refresh_token_rolling_grace_period of this DynamicClientRegistration.

        The grace period that a rolled refresh token remains valid in seconds.  # noqa: E501

        :param refresh_token_rolling_grace_period: The refresh_token_rolling_grace_period of this DynamicClientRegistration.  # noqa: E501
        :type: int
        """

        self._refresh_token_rolling_grace_period = refresh_token_rolling_grace_period

    @property
    def retain_client_secret(self):
        """Gets the retain_client_secret of this DynamicClientRegistration.  # noqa: E501

        Temporarily retain the old client secret on client secret change.  # noqa: E501

        :return: The retain_client_secret of this DynamicClientRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._retain_client_secret

    @retain_client_secret.setter
    def retain_client_secret(self, retain_client_secret):
        """Sets the retain_client_secret of this DynamicClientRegistration.

        Temporarily retain the old client secret on client secret change.  # noqa: E501

        :param retain_client_secret: The retain_client_secret of this DynamicClientRegistration.  # noqa: E501
        :type: bool
        """

        self._retain_client_secret = retain_client_secret

    @property
    def client_secret_retention_period_type(self):
        """Gets the client_secret_retention_period_type of this DynamicClientRegistration.  # noqa: E501

        Use OVERRIDE_SERVER_DEFAULT to override the Client Secret Retention Period value on the Authorization Server Settings. SERVER_DEFAULT will default to the Client Secret Retention Period value on the Authorization Server Setting. Defaults to SERVER_DEFAULT.  # noqa: E501

        :return: The client_secret_retention_period_type of this DynamicClientRegistration.  # noqa: E501
        :rtype: str
        """
        return self._client_secret_retention_period_type

    @client_secret_retention_period_type.setter
    def client_secret_retention_period_type(self, client_secret_retention_period_type):
        """Sets the client_secret_retention_period_type of this DynamicClientRegistration.

        Use OVERRIDE_SERVER_DEFAULT to override the Client Secret Retention Period value on the Authorization Server Settings. SERVER_DEFAULT will default to the Client Secret Retention Period value on the Authorization Server Setting. Defaults to SERVER_DEFAULT.  # noqa: E501

        :param client_secret_retention_period_type: The client_secret_retention_period_type of this DynamicClientRegistration.  # noqa: E501
        :type: str
        """

        self._client_secret_retention_period_type = client_secret_retention_period_type

    @property
    def client_secret_retention_period_override(self):
        """Gets the client_secret_retention_period_override of this DynamicClientRegistration.  # noqa: E501

        The length of time in minutes that client secrets will be retained as secondary secrets after secret change. The default value is 0, which will disable secondary client secret retention. This value will override the Client Secret Retention Period value on the Authorization Server Settings.  # noqa: E501

        :return: The client_secret_retention_period_override of this DynamicClientRegistration.  # noqa: E501
        :rtype: int
        """
        return self._client_secret_retention_period_override

    @client_secret_retention_period_override.setter
    def client_secret_retention_period_override(self, client_secret_retention_period_override):
        """Sets the client_secret_retention_period_override of this DynamicClientRegistration.

        The length of time in minutes that client secrets will be retained as secondary secrets after secret change. The default value is 0, which will disable secondary client secret retention. This value will override the Client Secret Retention Period value on the Authorization Server Settings.  # noqa: E501

        :param client_secret_retention_period_override: The client_secret_retention_period_override of this DynamicClientRegistration.  # noqa: E501
        :type: int
        """

        self._client_secret_retention_period_override = client_secret_retention_period_override

    @property
    def require_jwt_secured_authorization_response_mode(self):
        """Gets the require_jwt_secured_authorization_response_mode of this DynamicClientRegistration.  # noqa: E501

        Determines whether JWT Secured authorization response mode is required when initiating an authorization request. The default is false.  # noqa: E501

        :return: The require_jwt_secured_authorization_response_mode of this DynamicClientRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._require_jwt_secured_authorization_response_mode

    @require_jwt_secured_authorization_response_mode.setter
    def require_jwt_secured_authorization_response_mode(self, require_jwt_secured_authorization_response_mode):
        """Sets the require_jwt_secured_authorization_response_mode of this DynamicClientRegistration.

        Determines whether JWT Secured authorization response mode is required when initiating an authorization request. The default is false.  # noqa: E501

        :param require_jwt_secured_authorization_response_mode: The require_jwt_secured_authorization_response_mode of this DynamicClientRegistration.  # noqa: E501
        :type: bool
        """

        self._require_jwt_secured_authorization_response_mode = require_jwt_secured_authorization_response_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DynamicClientRegistration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DynamicClientRegistration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DynamicClientRegistration):
            return True

        return self.to_dict() != other.to_dict()
