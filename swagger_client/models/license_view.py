# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LicenseView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'max_connections': 'int',
        'used_connections': 'int',
        'tier': 'str',
        'issue_date': 'datetime',
        'expiration_date': 'datetime',
        'enforcement_type': 'str',
        'version': 'str',
        'product': 'str',
        'organization': 'str',
        'grace_period': 'int',
        'node_limit': 'int',
        'license_groups': 'list[ConnectionGroupLicenseView]',
        'oauth_enabled': 'bool',
        'ws_trust_enabled': 'bool',
        'provisioning_enabled': 'bool',
        'bridge_mode': 'bool',
        'features': 'list[LicenseFeatureView]'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'max_connections': 'maxConnections',
        'used_connections': 'usedConnections',
        'tier': 'tier',
        'issue_date': 'issueDate',
        'expiration_date': 'expirationDate',
        'enforcement_type': 'enforcementType',
        'version': 'version',
        'product': 'product',
        'organization': 'organization',
        'grace_period': 'gracePeriod',
        'node_limit': 'nodeLimit',
        'license_groups': 'licenseGroups',
        'oauth_enabled': 'oauthEnabled',
        'ws_trust_enabled': 'wsTrustEnabled',
        'provisioning_enabled': 'provisioningEnabled',
        'bridge_mode': 'bridgeMode',
        'features': 'features'
    }

    def __init__(self, name=None, id=None, max_connections=None, used_connections=None, tier=None, issue_date=None, expiration_date=None, enforcement_type=None, version=None, product=None, organization=None, grace_period=None, node_limit=None, license_groups=None, oauth_enabled=None, ws_trust_enabled=None, provisioning_enabled=None, bridge_mode=None, features=None, _configuration=None):  # noqa: E501
        """LicenseView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._id = None
        self._max_connections = None
        self._used_connections = None
        self._tier = None
        self._issue_date = None
        self._expiration_date = None
        self._enforcement_type = None
        self._version = None
        self._product = None
        self._organization = None
        self._grace_period = None
        self._node_limit = None
        self._license_groups = None
        self._oauth_enabled = None
        self._ws_trust_enabled = None
        self._provisioning_enabled = None
        self._bridge_mode = None
        self._features = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if max_connections is not None:
            self.max_connections = max_connections
        if used_connections is not None:
            self.used_connections = used_connections
        if tier is not None:
            self.tier = tier
        if issue_date is not None:
            self.issue_date = issue_date
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if enforcement_type is not None:
            self.enforcement_type = enforcement_type
        if version is not None:
            self.version = version
        if product is not None:
            self.product = product
        if organization is not None:
            self.organization = organization
        if grace_period is not None:
            self.grace_period = grace_period
        if node_limit is not None:
            self.node_limit = node_limit
        if license_groups is not None:
            self.license_groups = license_groups
        if oauth_enabled is not None:
            self.oauth_enabled = oauth_enabled
        if ws_trust_enabled is not None:
            self.ws_trust_enabled = ws_trust_enabled
        if provisioning_enabled is not None:
            self.provisioning_enabled = provisioning_enabled
        if bridge_mode is not None:
            self.bridge_mode = bridge_mode
        if features is not None:
            self.features = features

    @property
    def name(self):
        """Gets the name of this LicenseView.  # noqa: E501

        Name of the person the license was issued to.  # noqa: E501

        :return: The name of this LicenseView.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LicenseView.

        Name of the person the license was issued to.  # noqa: E501

        :param name: The name of this LicenseView.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this LicenseView.  # noqa: E501

        Unique identifier of a license.  # noqa: E501

        :return: The id of this LicenseView.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LicenseView.

        Unique identifier of a license.  # noqa: E501

        :param id: The id of this LicenseView.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def max_connections(self):
        """Gets the max_connections of this LicenseView.  # noqa: E501

        Maximum number of connections that can be created under this license (if applicable).  # noqa: E501

        :return: The max_connections of this LicenseView.  # noqa: E501
        :rtype: int
        """
        return self._max_connections

    @max_connections.setter
    def max_connections(self, max_connections):
        """Sets the max_connections of this LicenseView.

        Maximum number of connections that can be created under this license (if applicable).  # noqa: E501

        :param max_connections: The max_connections of this LicenseView.  # noqa: E501
        :type: int
        """

        self._max_connections = max_connections

    @property
    def used_connections(self):
        """Gets the used_connections of this LicenseView.  # noqa: E501

        Number of used connections under this license.  # noqa: E501

        :return: The used_connections of this LicenseView.  # noqa: E501
        :rtype: int
        """
        return self._used_connections

    @used_connections.setter
    def used_connections(self, used_connections):
        """Sets the used_connections of this LicenseView.

        Number of used connections under this license.  # noqa: E501

        :param used_connections: The used_connections of this LicenseView.  # noqa: E501
        :type: int
        """

        self._used_connections = used_connections

    @property
    def tier(self):
        """Gets the tier of this LicenseView.  # noqa: E501

        The tier value from the license file. The possible values are FREE, PERPETUAL or SUBSCRIPTION.  # noqa: E501

        :return: The tier of this LicenseView.  # noqa: E501
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this LicenseView.

        The tier value from the license file. The possible values are FREE, PERPETUAL or SUBSCRIPTION.  # noqa: E501

        :param tier: The tier of this LicenseView.  # noqa: E501
        :type: str
        """

        self._tier = tier

    @property
    def issue_date(self):
        """Gets the issue_date of this LicenseView.  # noqa: E501

        The issue date value from the license file.  # noqa: E501

        :return: The issue_date of this LicenseView.  # noqa: E501
        :rtype: datetime
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this LicenseView.

        The issue date value from the license file.  # noqa: E501

        :param issue_date: The issue_date of this LicenseView.  # noqa: E501
        :type: datetime
        """

        self._issue_date = issue_date

    @property
    def expiration_date(self):
        """Gets the expiration_date of this LicenseView.  # noqa: E501

        The expiration date value from the license file (if applicable).  # noqa: E501

        :return: The expiration_date of this LicenseView.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this LicenseView.

        The expiration date value from the license file (if applicable).  # noqa: E501

        :param expiration_date: The expiration_date of this LicenseView.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def enforcement_type(self):
        """Gets the enforcement_type of this LicenseView.  # noqa: E501

        The enforcement type is a 3-bit binary value, expressed as a decimal digit. The bits from left to right are: <br>1: Shutdown on expire <br>2: Notify on expire <br>4: Enforce minor version <br>if all three enforcements are active, the enforcement type will be 7 (1 + 2 + 4); if only the first two are active, you have an enforcement type of 3 (1 + 2).   # noqa: E501

        :return: The enforcement_type of this LicenseView.  # noqa: E501
        :rtype: str
        """
        return self._enforcement_type

    @enforcement_type.setter
    def enforcement_type(self, enforcement_type):
        """Sets the enforcement_type of this LicenseView.

        The enforcement type is a 3-bit binary value, expressed as a decimal digit. The bits from left to right are: <br>1: Shutdown on expire <br>2: Notify on expire <br>4: Enforce minor version <br>if all three enforcements are active, the enforcement type will be 7 (1 + 2 + 4); if only the first two are active, you have an enforcement type of 3 (1 + 2).   # noqa: E501

        :param enforcement_type: The enforcement_type of this LicenseView.  # noqa: E501
        :type: str
        """

        self._enforcement_type = enforcement_type

    @property
    def version(self):
        """Gets the version of this LicenseView.  # noqa: E501

        The Ping Identity product version from the license file.  # noqa: E501

        :return: The version of this LicenseView.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this LicenseView.

        The Ping Identity product version from the license file.  # noqa: E501

        :param version: The version of this LicenseView.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def product(self):
        """Gets the product of this LicenseView.  # noqa: E501

        The Ping Identity product value from the license file.  # noqa: E501

        :return: The product of this LicenseView.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this LicenseView.

        The Ping Identity product value from the license file.  # noqa: E501

        :param product: The product of this LicenseView.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def organization(self):
        """Gets the organization of this LicenseView.  # noqa: E501

        The organization value from the license file.  # noqa: E501

        :return: The organization of this LicenseView.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this LicenseView.

        The organization value from the license file.  # noqa: E501

        :param organization: The organization of this LicenseView.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def grace_period(self):
        """Gets the grace_period of this LicenseView.  # noqa: E501

        Number of days provided as grace period, past the expiration date (if applicable).  # noqa: E501

        :return: The grace_period of this LicenseView.  # noqa: E501
        :rtype: int
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period):
        """Sets the grace_period of this LicenseView.

        Number of days provided as grace period, past the expiration date (if applicable).  # noqa: E501

        :param grace_period: The grace_period of this LicenseView.  # noqa: E501
        :type: int
        """

        self._grace_period = grace_period

    @property
    def node_limit(self):
        """Gets the node_limit of this LicenseView.  # noqa: E501

        Maximum number of clustered nodes allowed under this license (if applicable).  # noqa: E501

        :return: The node_limit of this LicenseView.  # noqa: E501
        :rtype: int
        """
        return self._node_limit

    @node_limit.setter
    def node_limit(self, node_limit):
        """Sets the node_limit of this LicenseView.

        Maximum number of clustered nodes allowed under this license (if applicable).  # noqa: E501

        :param node_limit: The node_limit of this LicenseView.  # noqa: E501
        :type: int
        """

        self._node_limit = node_limit

    @property
    def license_groups(self):
        """Gets the license_groups of this LicenseView.  # noqa: E501

        License connection groups, if applicable.  # noqa: E501

        :return: The license_groups of this LicenseView.  # noqa: E501
        :rtype: list[ConnectionGroupLicenseView]
        """
        return self._license_groups

    @license_groups.setter
    def license_groups(self, license_groups):
        """Sets the license_groups of this LicenseView.

        License connection groups, if applicable.  # noqa: E501

        :param license_groups: The license_groups of this LicenseView.  # noqa: E501
        :type: list[ConnectionGroupLicenseView]
        """

        self._license_groups = license_groups

    @property
    def oauth_enabled(self):
        """Gets the oauth_enabled of this LicenseView.  # noqa: E501

        Indicates whether OAuth role is enabled for this license.  # noqa: E501

        :return: The oauth_enabled of this LicenseView.  # noqa: E501
        :rtype: bool
        """
        return self._oauth_enabled

    @oauth_enabled.setter
    def oauth_enabled(self, oauth_enabled):
        """Sets the oauth_enabled of this LicenseView.

        Indicates whether OAuth role is enabled for this license.  # noqa: E501

        :param oauth_enabled: The oauth_enabled of this LicenseView.  # noqa: E501
        :type: bool
        """

        self._oauth_enabled = oauth_enabled

    @property
    def ws_trust_enabled(self):
        """Gets the ws_trust_enabled of this LicenseView.  # noqa: E501

        Indicates whether WS-Trust role is enabled for this license.  # noqa: E501

        :return: The ws_trust_enabled of this LicenseView.  # noqa: E501
        :rtype: bool
        """
        return self._ws_trust_enabled

    @ws_trust_enabled.setter
    def ws_trust_enabled(self, ws_trust_enabled):
        """Sets the ws_trust_enabled of this LicenseView.

        Indicates whether WS-Trust role is enabled for this license.  # noqa: E501

        :param ws_trust_enabled: The ws_trust_enabled of this LicenseView.  # noqa: E501
        :type: bool
        """

        self._ws_trust_enabled = ws_trust_enabled

    @property
    def provisioning_enabled(self):
        """Gets the provisioning_enabled of this LicenseView.  # noqa: E501

        Indicates whether Provisioning role is enabled for this license.  # noqa: E501

        :return: The provisioning_enabled of this LicenseView.  # noqa: E501
        :rtype: bool
        """
        return self._provisioning_enabled

    @provisioning_enabled.setter
    def provisioning_enabled(self, provisioning_enabled):
        """Sets the provisioning_enabled of this LicenseView.

        Indicates whether Provisioning role is enabled for this license.  # noqa: E501

        :param provisioning_enabled: The provisioning_enabled of this LicenseView.  # noqa: E501
        :type: bool
        """

        self._provisioning_enabled = provisioning_enabled

    @property
    def bridge_mode(self):
        """Gets the bridge_mode of this LicenseView.  # noqa: E501

        Indicates whether this license is a bridge license or not.  # noqa: E501

        :return: The bridge_mode of this LicenseView.  # noqa: E501
        :rtype: bool
        """
        return self._bridge_mode

    @bridge_mode.setter
    def bridge_mode(self, bridge_mode):
        """Sets the bridge_mode of this LicenseView.

        Indicates whether this license is a bridge license or not.  # noqa: E501

        :param bridge_mode: The bridge_mode of this LicenseView.  # noqa: E501
        :type: bool
        """

        self._bridge_mode = bridge_mode

    @property
    def features(self):
        """Gets the features of this LicenseView.  # noqa: E501

        Other licence features, if applicable.  # noqa: E501

        :return: The features of this LicenseView.  # noqa: E501
        :rtype: list[LicenseFeatureView]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this LicenseView.

        Other licence features, if applicable.  # noqa: E501

        :param features: The features of this LicenseView.  # noqa: E501
        :type: list[LicenseFeatureView]
        """

        self._features = features

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicenseView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LicenseView):
            return True

        return self.to_dict() != other.to_dict()
