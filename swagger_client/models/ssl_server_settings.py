# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SslServerSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'runtime_server_cert_ref': 'ResourceLink',
        'admin_console_cert_ref': 'ResourceLink',
        'active_runtime_server_certs': 'list[ResourceLink]',
        'active_admin_console_certs': 'list[ResourceLink]'
    }

    attribute_map = {
        'runtime_server_cert_ref': 'runtimeServerCertRef',
        'admin_console_cert_ref': 'adminConsoleCertRef',
        'active_runtime_server_certs': 'activeRuntimeServerCerts',
        'active_admin_console_certs': 'activeAdminConsoleCerts'
    }

    def __init__(self, runtime_server_cert_ref=None, admin_console_cert_ref=None, active_runtime_server_certs=None, active_admin_console_certs=None, _configuration=None):  # noqa: E501
        """SslServerSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._runtime_server_cert_ref = None
        self._admin_console_cert_ref = None
        self._active_runtime_server_certs = None
        self._active_admin_console_certs = None
        self.discriminator = None

        self.runtime_server_cert_ref = runtime_server_cert_ref
        self.admin_console_cert_ref = admin_console_cert_ref
        if active_runtime_server_certs is not None:
            self.active_runtime_server_certs = active_runtime_server_certs
        if active_admin_console_certs is not None:
            self.active_admin_console_certs = active_admin_console_certs

    @property
    def runtime_server_cert_ref(self):
        """Gets the runtime_server_cert_ref of this SslServerSettings.  # noqa: E501

        Reference to the default SSL Server Certificate Key pair active for Runtime Server.  # noqa: E501

        :return: The runtime_server_cert_ref of this SslServerSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._runtime_server_cert_ref

    @runtime_server_cert_ref.setter
    def runtime_server_cert_ref(self, runtime_server_cert_ref):
        """Sets the runtime_server_cert_ref of this SslServerSettings.

        Reference to the default SSL Server Certificate Key pair active for Runtime Server.  # noqa: E501

        :param runtime_server_cert_ref: The runtime_server_cert_ref of this SslServerSettings.  # noqa: E501
        :type: ResourceLink
        """
        if self._configuration.client_side_validation and runtime_server_cert_ref is None:
            raise ValueError("Invalid value for `runtime_server_cert_ref`, must not be `None`")  # noqa: E501

        self._runtime_server_cert_ref = runtime_server_cert_ref

    @property
    def admin_console_cert_ref(self):
        """Gets the admin_console_cert_ref of this SslServerSettings.  # noqa: E501

        Reference to the default SSL Server Certificate Key pair active for PF Administrator Console.  # noqa: E501

        :return: The admin_console_cert_ref of this SslServerSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._admin_console_cert_ref

    @admin_console_cert_ref.setter
    def admin_console_cert_ref(self, admin_console_cert_ref):
        """Sets the admin_console_cert_ref of this SslServerSettings.

        Reference to the default SSL Server Certificate Key pair active for PF Administrator Console.  # noqa: E501

        :param admin_console_cert_ref: The admin_console_cert_ref of this SslServerSettings.  # noqa: E501
        :type: ResourceLink
        """
        if self._configuration.client_side_validation and admin_console_cert_ref is None:
            raise ValueError("Invalid value for `admin_console_cert_ref`, must not be `None`")  # noqa: E501

        self._admin_console_cert_ref = admin_console_cert_ref

    @property
    def active_runtime_server_certs(self):
        """Gets the active_runtime_server_certs of this SslServerSettings.  # noqa: E501

        The active SSL Server Certificate Key pairs for Runtime Server.  # noqa: E501

        :return: The active_runtime_server_certs of this SslServerSettings.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._active_runtime_server_certs

    @active_runtime_server_certs.setter
    def active_runtime_server_certs(self, active_runtime_server_certs):
        """Sets the active_runtime_server_certs of this SslServerSettings.

        The active SSL Server Certificate Key pairs for Runtime Server.  # noqa: E501

        :param active_runtime_server_certs: The active_runtime_server_certs of this SslServerSettings.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._active_runtime_server_certs = active_runtime_server_certs

    @property
    def active_admin_console_certs(self):
        """Gets the active_admin_console_certs of this SslServerSettings.  # noqa: E501

        The active SSL Server Certificate Key pairs for PF Administrator Console.  # noqa: E501

        :return: The active_admin_console_certs of this SslServerSettings.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._active_admin_console_certs

    @active_admin_console_certs.setter
    def active_admin_console_certs(self, active_admin_console_certs):
        """Sets the active_admin_console_certs of this SslServerSettings.

        The active SSL Server Certificate Key pairs for PF Administrator Console.  # noqa: E501

        :param active_admin_console_certs: The active_admin_console_certs of this SslServerSettings.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._active_admin_console_certs = active_admin_console_certs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SslServerSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SslServerSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SslServerSettings):
            return True

        return self.to_dict() != other.to_dict()
