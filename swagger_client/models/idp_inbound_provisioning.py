# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IdpInboundProvisioning(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_support': 'bool',
        'user_repository': 'InboundProvisioningUserRepository',
        'custom_schema': 'Schema',
        'users': 'Users',
        'groups': 'Groups',
        'action_on_delete': 'str'
    }

    attribute_map = {
        'group_support': 'groupSupport',
        'user_repository': 'userRepository',
        'custom_schema': 'customSchema',
        'users': 'users',
        'groups': 'groups',
        'action_on_delete': 'actionOnDelete'
    }

    def __init__(self, group_support=None, user_repository=None, custom_schema=None, users=None, groups=None, action_on_delete=None, _configuration=None):  # noqa: E501
        """IdpInboundProvisioning - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._group_support = None
        self._user_repository = None
        self._custom_schema = None
        self._users = None
        self._groups = None
        self._action_on_delete = None
        self.discriminator = None

        self.group_support = group_support
        self.user_repository = user_repository
        self.custom_schema = custom_schema
        self.users = users
        self.groups = groups
        if action_on_delete is not None:
            self.action_on_delete = action_on_delete

    @property
    def group_support(self):
        """Gets the group_support of this IdpInboundProvisioning.  # noqa: E501

        Specify support for provisioning of groups.  # noqa: E501

        :return: The group_support of this IdpInboundProvisioning.  # noqa: E501
        :rtype: bool
        """
        return self._group_support

    @group_support.setter
    def group_support(self, group_support):
        """Sets the group_support of this IdpInboundProvisioning.

        Specify support for provisioning of groups.  # noqa: E501

        :param group_support: The group_support of this IdpInboundProvisioning.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and group_support is None:
            raise ValueError("Invalid value for `group_support`, must not be `None`")  # noqa: E501

        self._group_support = group_support

    @property
    def user_repository(self):
        """Gets the user_repository of this IdpInboundProvisioning.  # noqa: E501

        The local repository for user accounts and groups requiring provisioning.  # noqa: E501

        :return: The user_repository of this IdpInboundProvisioning.  # noqa: E501
        :rtype: InboundProvisioningUserRepository
        """
        return self._user_repository

    @user_repository.setter
    def user_repository(self, user_repository):
        """Sets the user_repository of this IdpInboundProvisioning.

        The local repository for user accounts and groups requiring provisioning.  # noqa: E501

        :param user_repository: The user_repository of this IdpInboundProvisioning.  # noqa: E501
        :type: InboundProvisioningUserRepository
        """
        if self._configuration.client_side_validation and user_repository is None:
            raise ValueError("Invalid value for `user_repository`, must not be `None`")  # noqa: E501

        self._user_repository = user_repository

    @property
    def custom_schema(self):
        """Gets the custom_schema of this IdpInboundProvisioning.  # noqa: E501

        The Custom SCIM Attributes configuration.  # noqa: E501

        :return: The custom_schema of this IdpInboundProvisioning.  # noqa: E501
        :rtype: Schema
        """
        return self._custom_schema

    @custom_schema.setter
    def custom_schema(self, custom_schema):
        """Sets the custom_schema of this IdpInboundProvisioning.

        The Custom SCIM Attributes configuration.  # noqa: E501

        :param custom_schema: The custom_schema of this IdpInboundProvisioning.  # noqa: E501
        :type: Schema
        """
        if self._configuration.client_side_validation and custom_schema is None:
            raise ValueError("Invalid value for `custom_schema`, must not be `None`")  # noqa: E501

        self._custom_schema = custom_schema

    @property
    def users(self):
        """Gets the users of this IdpInboundProvisioning.  # noqa: E501

        User creation and read configuration.  # noqa: E501

        :return: The users of this IdpInboundProvisioning.  # noqa: E501
        :rtype: Users
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this IdpInboundProvisioning.

        User creation and read configuration.  # noqa: E501

        :param users: The users of this IdpInboundProvisioning.  # noqa: E501
        :type: Users
        """
        if self._configuration.client_side_validation and users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")  # noqa: E501

        self._users = users

    @property
    def groups(self):
        """Gets the groups of this IdpInboundProvisioning.  # noqa: E501

        Group creation and read configuration.  # noqa: E501

        :return: The groups of this IdpInboundProvisioning.  # noqa: E501
        :rtype: Groups
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this IdpInboundProvisioning.

        Group creation and read configuration.  # noqa: E501

        :param groups: The groups of this IdpInboundProvisioning.  # noqa: E501
        :type: Groups
        """
        if self._configuration.client_side_validation and groups is None:
            raise ValueError("Invalid value for `groups`, must not be `None`")  # noqa: E501

        self._groups = groups

    @property
    def action_on_delete(self):
        """Gets the action_on_delete of this IdpInboundProvisioning.  # noqa: E501

        Specify behavior of how SCIM DELETE requests are handled.  # noqa: E501

        :return: The action_on_delete of this IdpInboundProvisioning.  # noqa: E501
        :rtype: str
        """
        return self._action_on_delete

    @action_on_delete.setter
    def action_on_delete(self, action_on_delete):
        """Sets the action_on_delete of this IdpInboundProvisioning.

        Specify behavior of how SCIM DELETE requests are handled.  # noqa: E501

        :param action_on_delete: The action_on_delete of this IdpInboundProvisioning.  # noqa: E501
        :type: str
        """
        allowed_values = ["DISABLE_USER", "PERMANENTLY_DELETE_USER"]  # noqa: E501
        if (self._configuration.client_side_validation and
                action_on_delete not in allowed_values):
            raise ValueError(
                "Invalid value for `action_on_delete` ({0}), must be one of {1}"  # noqa: E501
                .format(action_on_delete, allowed_values)
            )

        self._action_on_delete = action_on_delete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdpInboundProvisioning, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdpInboundProvisioning):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IdpInboundProvisioning):
            return True

        return self.to_dict() != other.to_dict()
