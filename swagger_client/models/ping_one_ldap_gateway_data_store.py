# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PingOneLdapGatewayDataStore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'ldap_type': 'str',
        'ping_one_connection_ref': 'ResourceLink',
        'ping_one_environment_id': 'str',
        'ping_one_ldap_gateway_id': 'str',
        'use_ssl': 'bool',
        'binary_attributes': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'ldap_type': 'ldapType',
        'ping_one_connection_ref': 'pingOneConnectionRef',
        'ping_one_environment_id': 'pingOneEnvironmentId',
        'ping_one_ldap_gateway_id': 'pingOneLdapGatewayId',
        'use_ssl': 'useSsl',
        'binary_attributes': 'binaryAttributes'
    }

    def __init__(self, name=None, ldap_type=None, ping_one_connection_ref=None, ping_one_environment_id=None, ping_one_ldap_gateway_id=None, use_ssl=None, binary_attributes=None, _configuration=None):  # noqa: E501
        """PingOneLdapGatewayDataStore - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._ldap_type = None
        self._ping_one_connection_ref = None
        self._ping_one_environment_id = None
        self._ping_one_ldap_gateway_id = None
        self._use_ssl = None
        self._binary_attributes = None
        self.discriminator = None

        if name is not None:
            self.name = name
        self.ldap_type = ldap_type
        self.ping_one_connection_ref = ping_one_connection_ref
        self.ping_one_environment_id = ping_one_environment_id
        self.ping_one_ldap_gateway_id = ping_one_ldap_gateway_id
        if use_ssl is not None:
            self.use_ssl = use_ssl
        if binary_attributes is not None:
            self.binary_attributes = binary_attributes

    @property
    def name(self):
        """Gets the name of this PingOneLdapGatewayDataStore.  # noqa: E501

        The data store name with a unique value across all data sources. Omitting this attribute will set the value to a combination of the hostname(s) and the principal.  # noqa: E501

        :return: The name of this PingOneLdapGatewayDataStore.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PingOneLdapGatewayDataStore.

        The data store name with a unique value across all data sources. Omitting this attribute will set the value to a combination of the hostname(s) and the principal.  # noqa: E501

        :param name: The name of this PingOneLdapGatewayDataStore.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ldap_type(self):
        """Gets the ldap_type of this PingOneLdapGatewayDataStore.  # noqa: E501

        A type that allows PingFederate to configure many provisioning settings automatically. The value is validated against the LDAP gateway configuration in PingOne unless the header 'X-BypassExternalValidation' is set to true.  # noqa: E501

        :return: The ldap_type of this PingOneLdapGatewayDataStore.  # noqa: E501
        :rtype: str
        """
        return self._ldap_type

    @ldap_type.setter
    def ldap_type(self, ldap_type):
        """Sets the ldap_type of this PingOneLdapGatewayDataStore.

        A type that allows PingFederate to configure many provisioning settings automatically. The value is validated against the LDAP gateway configuration in PingOne unless the header 'X-BypassExternalValidation' is set to true.  # noqa: E501

        :param ldap_type: The ldap_type of this PingOneLdapGatewayDataStore.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ldap_type is None:
            raise ValueError("Invalid value for `ldap_type`, must not be `None`")  # noqa: E501
        allowed_values = ["ACTIVE_DIRECTORY", "ORACLE_DIRECTORY_SERVER", "ORACLE_UNIFIED_DIRECTORY", "UNBOUNDID_DS", "PING_DIRECTORY", "GENERIC"]  # noqa: E501
        if (self._configuration.client_side_validation and
                ldap_type not in allowed_values):
            raise ValueError(
                "Invalid value for `ldap_type` ({0}), must be one of {1}"  # noqa: E501
                .format(ldap_type, allowed_values)
            )

        self._ldap_type = ldap_type

    @property
    def ping_one_connection_ref(self):
        """Gets the ping_one_connection_ref of this PingOneLdapGatewayDataStore.  # noqa: E501

        Reference to the PingOne connection this gateway uses.  # noqa: E501

        :return: The ping_one_connection_ref of this PingOneLdapGatewayDataStore.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._ping_one_connection_ref

    @ping_one_connection_ref.setter
    def ping_one_connection_ref(self, ping_one_connection_ref):
        """Sets the ping_one_connection_ref of this PingOneLdapGatewayDataStore.

        Reference to the PingOne connection this gateway uses.  # noqa: E501

        :param ping_one_connection_ref: The ping_one_connection_ref of this PingOneLdapGatewayDataStore.  # noqa: E501
        :type: ResourceLink
        """
        if self._configuration.client_side_validation and ping_one_connection_ref is None:
            raise ValueError("Invalid value for `ping_one_connection_ref`, must not be `None`")  # noqa: E501

        self._ping_one_connection_ref = ping_one_connection_ref

    @property
    def ping_one_environment_id(self):
        """Gets the ping_one_environment_id of this PingOneLdapGatewayDataStore.  # noqa: E501

        The environment ID that the gateway belongs to.  # noqa: E501

        :return: The ping_one_environment_id of this PingOneLdapGatewayDataStore.  # noqa: E501
        :rtype: str
        """
        return self._ping_one_environment_id

    @ping_one_environment_id.setter
    def ping_one_environment_id(self, ping_one_environment_id):
        """Sets the ping_one_environment_id of this PingOneLdapGatewayDataStore.

        The environment ID that the gateway belongs to.  # noqa: E501

        :param ping_one_environment_id: The ping_one_environment_id of this PingOneLdapGatewayDataStore.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ping_one_environment_id is None:
            raise ValueError("Invalid value for `ping_one_environment_id`, must not be `None`")  # noqa: E501

        self._ping_one_environment_id = ping_one_environment_id

    @property
    def ping_one_ldap_gateway_id(self):
        """Gets the ping_one_ldap_gateway_id of this PingOneLdapGatewayDataStore.  # noqa: E501

        The ID of the PingOne LDAP Gateway this data store uses.  # noqa: E501

        :return: The ping_one_ldap_gateway_id of this PingOneLdapGatewayDataStore.  # noqa: E501
        :rtype: str
        """
        return self._ping_one_ldap_gateway_id

    @ping_one_ldap_gateway_id.setter
    def ping_one_ldap_gateway_id(self, ping_one_ldap_gateway_id):
        """Sets the ping_one_ldap_gateway_id of this PingOneLdapGatewayDataStore.

        The ID of the PingOne LDAP Gateway this data store uses.  # noqa: E501

        :param ping_one_ldap_gateway_id: The ping_one_ldap_gateway_id of this PingOneLdapGatewayDataStore.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ping_one_ldap_gateway_id is None:
            raise ValueError("Invalid value for `ping_one_ldap_gateway_id`, must not be `None`")  # noqa: E501

        self._ping_one_ldap_gateway_id = ping_one_ldap_gateway_id

    @property
    def use_ssl(self):
        """Gets the use_ssl of this PingOneLdapGatewayDataStore.  # noqa: E501

        Connects to the LDAP data store using secure SSL/TLS encryption (LDAPS). The default value is false. The value is validated against the LDAP gateway configuration in PingOne unless the header 'X-BypassExternalValidation' is set to true.  # noqa: E501

        :return: The use_ssl of this PingOneLdapGatewayDataStore.  # noqa: E501
        :rtype: bool
        """
        return self._use_ssl

    @use_ssl.setter
    def use_ssl(self, use_ssl):
        """Sets the use_ssl of this PingOneLdapGatewayDataStore.

        Connects to the LDAP data store using secure SSL/TLS encryption (LDAPS). The default value is false. The value is validated against the LDAP gateway configuration in PingOne unless the header 'X-BypassExternalValidation' is set to true.  # noqa: E501

        :param use_ssl: The use_ssl of this PingOneLdapGatewayDataStore.  # noqa: E501
        :type: bool
        """

        self._use_ssl = use_ssl

    @property
    def binary_attributes(self):
        """Gets the binary_attributes of this PingOneLdapGatewayDataStore.  # noqa: E501

        The list of LDAP attributes to be handled as binary data.  # noqa: E501

        :return: The binary_attributes of this PingOneLdapGatewayDataStore.  # noqa: E501
        :rtype: list[str]
        """
        return self._binary_attributes

    @binary_attributes.setter
    def binary_attributes(self, binary_attributes):
        """Sets the binary_attributes of this PingOneLdapGatewayDataStore.

        The list of LDAP attributes to be handled as binary data.  # noqa: E501

        :param binary_attributes: The binary_attributes of this PingOneLdapGatewayDataStore.  # noqa: E501
        :type: list[str]
        """

        self._binary_attributes = binary_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PingOneLdapGatewayDataStore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PingOneLdapGatewayDataStore):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PingOneLdapGatewayDataStore):
            return True

        return self.to_dict() != other.to_dict()
