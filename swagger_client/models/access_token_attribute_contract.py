# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AccessTokenAttributeContract(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'core_attributes': 'list[AccessTokenAttribute]',
        'extended_attributes': 'list[AccessTokenAttribute]',
        'inherited': 'bool',
        'default_subject_attribute': 'str'
    }

    attribute_map = {
        'core_attributes': 'coreAttributes',
        'extended_attributes': 'extendedAttributes',
        'inherited': 'inherited',
        'default_subject_attribute': 'defaultSubjectAttribute'
    }

    def __init__(self, core_attributes=None, extended_attributes=None, inherited=None, default_subject_attribute=None, _configuration=None):  # noqa: E501
        """AccessTokenAttributeContract - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._core_attributes = None
        self._extended_attributes = None
        self._inherited = None
        self._default_subject_attribute = None
        self.discriminator = None

        if core_attributes is not None:
            self.core_attributes = core_attributes
        if extended_attributes is not None:
            self.extended_attributes = extended_attributes
        if inherited is not None:
            self.inherited = inherited
        if default_subject_attribute is not None:
            self.default_subject_attribute = default_subject_attribute

    @property
    def core_attributes(self):
        """Gets the core_attributes of this AccessTokenAttributeContract.  # noqa: E501

        A list of core token attributes that are associated with the access token management plugin type. This field is read-only and is ignored on POST/PUT.  # noqa: E501

        :return: The core_attributes of this AccessTokenAttributeContract.  # noqa: E501
        :rtype: list[AccessTokenAttribute]
        """
        return self._core_attributes

    @core_attributes.setter
    def core_attributes(self, core_attributes):
        """Sets the core_attributes of this AccessTokenAttributeContract.

        A list of core token attributes that are associated with the access token management plugin type. This field is read-only and is ignored on POST/PUT.  # noqa: E501

        :param core_attributes: The core_attributes of this AccessTokenAttributeContract.  # noqa: E501
        :type: list[AccessTokenAttribute]
        """

        self._core_attributes = core_attributes

    @property
    def extended_attributes(self):
        """Gets the extended_attributes of this AccessTokenAttributeContract.  # noqa: E501

        A list of additional token attributes that are associated with this access token management plugin instance.  # noqa: E501

        :return: The extended_attributes of this AccessTokenAttributeContract.  # noqa: E501
        :rtype: list[AccessTokenAttribute]
        """
        return self._extended_attributes

    @extended_attributes.setter
    def extended_attributes(self, extended_attributes):
        """Sets the extended_attributes of this AccessTokenAttributeContract.

        A list of additional token attributes that are associated with this access token management plugin instance.  # noqa: E501

        :param extended_attributes: The extended_attributes of this AccessTokenAttributeContract.  # noqa: E501
        :type: list[AccessTokenAttribute]
        """

        self._extended_attributes = extended_attributes

    @property
    def inherited(self):
        """Gets the inherited of this AccessTokenAttributeContract.  # noqa: E501

        Whether this attribute contract is inherited from its parent instance. If true, the rest of the properties in this model become read-only. The default value is false.  # noqa: E501

        :return: The inherited of this AccessTokenAttributeContract.  # noqa: E501
        :rtype: bool
        """
        return self._inherited

    @inherited.setter
    def inherited(self, inherited):
        """Sets the inherited of this AccessTokenAttributeContract.

        Whether this attribute contract is inherited from its parent instance. If true, the rest of the properties in this model become read-only. The default value is false.  # noqa: E501

        :param inherited: The inherited of this AccessTokenAttributeContract.  # noqa: E501
        :type: bool
        """

        self._inherited = inherited

    @property
    def default_subject_attribute(self):
        """Gets the default_subject_attribute of this AccessTokenAttributeContract.  # noqa: E501

        Default subject attribute to use for audit logging when validating the access token. Blank value means to use USER_KEY attribute value after grant lookup.  # noqa: E501

        :return: The default_subject_attribute of this AccessTokenAttributeContract.  # noqa: E501
        :rtype: str
        """
        return self._default_subject_attribute

    @default_subject_attribute.setter
    def default_subject_attribute(self, default_subject_attribute):
        """Sets the default_subject_attribute of this AccessTokenAttributeContract.

        Default subject attribute to use for audit logging when validating the access token. Blank value means to use USER_KEY attribute value after grant lookup.  # noqa: E501

        :param default_subject_attribute: The default_subject_attribute of this AccessTokenAttributeContract.  # noqa: E501
        :type: str
        """

        self._default_subject_attribute = default_subject_attribute

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessTokenAttributeContract, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessTokenAttributeContract):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccessTokenAttributeContract):
            return True

        return self.to_dict() != other.to_dict()
