# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Channel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'channel_source': 'ChannelSource',
        'attribute_mapping': 'list[SaasAttributeMapping]',
        'name': 'str',
        'max_threads': 'int',
        'timeout': 'int'
    }

    attribute_map = {
        'active': 'active',
        'channel_source': 'channelSource',
        'attribute_mapping': 'attributeMapping',
        'name': 'name',
        'max_threads': 'maxThreads',
        'timeout': 'timeout'
    }

    def __init__(self, active=None, channel_source=None, attribute_mapping=None, name=None, max_threads=None, timeout=None, _configuration=None):  # noqa: E501
        """Channel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._active = None
        self._channel_source = None
        self._attribute_mapping = None
        self._name = None
        self._max_threads = None
        self._timeout = None
        self.discriminator = None

        self.active = active
        self.channel_source = channel_source
        self.attribute_mapping = attribute_mapping
        self.name = name
        self.max_threads = max_threads
        self.timeout = timeout

    @property
    def active(self):
        """Gets the active of this Channel.  # noqa: E501

        Indicates whether the channel is the active channel for this connection.  # noqa: E501

        :return: The active of this Channel.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Channel.

        Indicates whether the channel is the active channel for this connection.  # noqa: E501

        :param active: The active of this Channel.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def channel_source(self):
        """Gets the channel_source of this Channel.  # noqa: E501

        The LDAP settings that apply to the source user-data store.  # noqa: E501

        :return: The channel_source of this Channel.  # noqa: E501
        :rtype: ChannelSource
        """
        return self._channel_source

    @channel_source.setter
    def channel_source(self, channel_source):
        """Sets the channel_source of this Channel.

        The LDAP settings that apply to the source user-data store.  # noqa: E501

        :param channel_source: The channel_source of this Channel.  # noqa: E501
        :type: ChannelSource
        """
        if self._configuration.client_side_validation and channel_source is None:
            raise ValueError("Invalid value for `channel_source`, must not be `None`")  # noqa: E501

        self._channel_source = channel_source

    @property
    def attribute_mapping(self):
        """Gets the attribute_mapping of this Channel.  # noqa: E501

        The mapping of attributes from the local data store into Fields specified by the service provider.  # noqa: E501

        :return: The attribute_mapping of this Channel.  # noqa: E501
        :rtype: list[SaasAttributeMapping]
        """
        return self._attribute_mapping

    @attribute_mapping.setter
    def attribute_mapping(self, attribute_mapping):
        """Sets the attribute_mapping of this Channel.

        The mapping of attributes from the local data store into Fields specified by the service provider.  # noqa: E501

        :param attribute_mapping: The attribute_mapping of this Channel.  # noqa: E501
        :type: list[SaasAttributeMapping]
        """
        if self._configuration.client_side_validation and attribute_mapping is None:
            raise ValueError("Invalid value for `attribute_mapping`, must not be `None`")  # noqa: E501

        self._attribute_mapping = attribute_mapping

    @property
    def name(self):
        """Gets the name of this Channel.  # noqa: E501

        The name of the channel.  # noqa: E501

        :return: The name of this Channel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Channel.

        The name of the channel.  # noqa: E501

        :param name: The name of this Channel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def max_threads(self):
        """Gets the max_threads of this Channel.  # noqa: E501

        The number of processing threads. The default value is 1.  # noqa: E501

        :return: The max_threads of this Channel.  # noqa: E501
        :rtype: int
        """
        return self._max_threads

    @max_threads.setter
    def max_threads(self, max_threads):
        """Sets the max_threads of this Channel.

        The number of processing threads. The default value is 1.  # noqa: E501

        :param max_threads: The max_threads of this Channel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and max_threads is None:
            raise ValueError("Invalid value for `max_threads`, must not be `None`")  # noqa: E501

        self._max_threads = max_threads

    @property
    def timeout(self):
        """Gets the timeout of this Channel.  # noqa: E501

        Timeout, in seconds, for individual user and group provisioning operations on the target service provider. The default value is 60.  # noqa: E501

        :return: The timeout of this Channel.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this Channel.

        Timeout, in seconds, for individual user and group provisioning operations on the target service provider. The default value is 60.  # noqa: E501

        :param timeout: The timeout of this Channel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and timeout is None:
            raise ValueError("Invalid value for `timeout`, must not be `None`")  # noqa: E501

        self._timeout = timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Channel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Channel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Channel):
            return True

        return self.to_dict() != other.to_dict()
