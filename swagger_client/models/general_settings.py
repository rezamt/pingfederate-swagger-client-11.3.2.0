# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GeneralSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disable_automatic_connection_validation': 'bool',
        'idp_connection_transaction_logging_override': 'str',
        'sp_connection_transaction_logging_override': 'str',
        'datastore_validation_interval_secs': 'int',
        'request_header_for_correlation_id': 'str'
    }

    attribute_map = {
        'disable_automatic_connection_validation': 'disableAutomaticConnectionValidation',
        'idp_connection_transaction_logging_override': 'idpConnectionTransactionLoggingOverride',
        'sp_connection_transaction_logging_override': 'spConnectionTransactionLoggingOverride',
        'datastore_validation_interval_secs': 'datastoreValidationIntervalSecs',
        'request_header_for_correlation_id': 'requestHeaderForCorrelationId'
    }

    def __init__(self, disable_automatic_connection_validation=None, idp_connection_transaction_logging_override=None, sp_connection_transaction_logging_override=None, datastore_validation_interval_secs=None, request_header_for_correlation_id=None, _configuration=None):  # noqa: E501
        """GeneralSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._disable_automatic_connection_validation = None
        self._idp_connection_transaction_logging_override = None
        self._sp_connection_transaction_logging_override = None
        self._datastore_validation_interval_secs = None
        self._request_header_for_correlation_id = None
        self.discriminator = None

        if disable_automatic_connection_validation is not None:
            self.disable_automatic_connection_validation = disable_automatic_connection_validation
        if idp_connection_transaction_logging_override is not None:
            self.idp_connection_transaction_logging_override = idp_connection_transaction_logging_override
        if sp_connection_transaction_logging_override is not None:
            self.sp_connection_transaction_logging_override = sp_connection_transaction_logging_override
        if datastore_validation_interval_secs is not None:
            self.datastore_validation_interval_secs = datastore_validation_interval_secs
        if request_header_for_correlation_id is not None:
            self.request_header_for_correlation_id = request_header_for_correlation_id

    @property
    def disable_automatic_connection_validation(self):
        """Gets the disable_automatic_connection_validation of this GeneralSettings.  # noqa: E501

        Boolean that disables automatic connection validation when set to true. The default is false.  # noqa: E501

        :return: The disable_automatic_connection_validation of this GeneralSettings.  # noqa: E501
        :rtype: bool
        """
        return self._disable_automatic_connection_validation

    @disable_automatic_connection_validation.setter
    def disable_automatic_connection_validation(self, disable_automatic_connection_validation):
        """Sets the disable_automatic_connection_validation of this GeneralSettings.

        Boolean that disables automatic connection validation when set to true. The default is false.  # noqa: E501

        :param disable_automatic_connection_validation: The disable_automatic_connection_validation of this GeneralSettings.  # noqa: E501
        :type: bool
        """

        self._disable_automatic_connection_validation = disable_automatic_connection_validation

    @property
    def idp_connection_transaction_logging_override(self):
        """Gets the idp_connection_transaction_logging_override of this GeneralSettings.  # noqa: E501

        Determines the level of transaction logging for all identity provider connections. The default is DONT_OVERRIDE, in which case the logging level will be determined by each individual IdP connection  # noqa: E501

        :return: The idp_connection_transaction_logging_override of this GeneralSettings.  # noqa: E501
        :rtype: str
        """
        return self._idp_connection_transaction_logging_override

    @idp_connection_transaction_logging_override.setter
    def idp_connection_transaction_logging_override(self, idp_connection_transaction_logging_override):
        """Sets the idp_connection_transaction_logging_override of this GeneralSettings.

        Determines the level of transaction logging for all identity provider connections. The default is DONT_OVERRIDE, in which case the logging level will be determined by each individual IdP connection  # noqa: E501

        :param idp_connection_transaction_logging_override: The idp_connection_transaction_logging_override of this GeneralSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["DONT_OVERRIDE", "NONE", "FULL", "STANDARD", "ENHANCED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                idp_connection_transaction_logging_override not in allowed_values):
            raise ValueError(
                "Invalid value for `idp_connection_transaction_logging_override` ({0}), must be one of {1}"  # noqa: E501
                .format(idp_connection_transaction_logging_override, allowed_values)
            )

        self._idp_connection_transaction_logging_override = idp_connection_transaction_logging_override

    @property
    def sp_connection_transaction_logging_override(self):
        """Gets the sp_connection_transaction_logging_override of this GeneralSettings.  # noqa: E501

        Determines the level of transaction logging for all service provider connections. The default is DONT_OVERRIDE, in which case the logging level will be determined by each individual SP connection  # noqa: E501

        :return: The sp_connection_transaction_logging_override of this GeneralSettings.  # noqa: E501
        :rtype: str
        """
        return self._sp_connection_transaction_logging_override

    @sp_connection_transaction_logging_override.setter
    def sp_connection_transaction_logging_override(self, sp_connection_transaction_logging_override):
        """Sets the sp_connection_transaction_logging_override of this GeneralSettings.

        Determines the level of transaction logging for all service provider connections. The default is DONT_OVERRIDE, in which case the logging level will be determined by each individual SP connection  # noqa: E501

        :param sp_connection_transaction_logging_override: The sp_connection_transaction_logging_override of this GeneralSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["DONT_OVERRIDE", "NONE", "FULL", "STANDARD", "ENHANCED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                sp_connection_transaction_logging_override not in allowed_values):
            raise ValueError(
                "Invalid value for `sp_connection_transaction_logging_override` ({0}), must be one of {1}"  # noqa: E501
                .format(sp_connection_transaction_logging_override, allowed_values)
            )

        self._sp_connection_transaction_logging_override = sp_connection_transaction_logging_override

    @property
    def datastore_validation_interval_secs(self):
        """Gets the datastore_validation_interval_secs of this GeneralSettings.  # noqa: E501

        Determines how long (in seconds) the result of testing a datastore connection is cached. The default is 300.  # noqa: E501

        :return: The datastore_validation_interval_secs of this GeneralSettings.  # noqa: E501
        :rtype: int
        """
        return self._datastore_validation_interval_secs

    @datastore_validation_interval_secs.setter
    def datastore_validation_interval_secs(self, datastore_validation_interval_secs):
        """Sets the datastore_validation_interval_secs of this GeneralSettings.

        Determines how long (in seconds) the result of testing a datastore connection is cached. The default is 300.  # noqa: E501

        :param datastore_validation_interval_secs: The datastore_validation_interval_secs of this GeneralSettings.  # noqa: E501
        :type: int
        """

        self._datastore_validation_interval_secs = datastore_validation_interval_secs

    @property
    def request_header_for_correlation_id(self):
        """Gets the request_header_for_correlation_id of this GeneralSettings.  # noqa: E501

        HTTP request header for retrieving correlation ID.  # noqa: E501

        :return: The request_header_for_correlation_id of this GeneralSettings.  # noqa: E501
        :rtype: str
        """
        return self._request_header_for_correlation_id

    @request_header_for_correlation_id.setter
    def request_header_for_correlation_id(self, request_header_for_correlation_id):
        """Sets the request_header_for_correlation_id of this GeneralSettings.

        HTTP request header for retrieving correlation ID.  # noqa: E501

        :param request_header_for_correlation_id: The request_header_for_correlation_id of this GeneralSettings.  # noqa: E501
        :type: str
        """

        self._request_header_for_correlation_id = request_header_for_correlation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeneralSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeneralSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GeneralSettings):
            return True

        return self.to_dict() != other.to_dict()
