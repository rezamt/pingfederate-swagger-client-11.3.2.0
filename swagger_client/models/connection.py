# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Connection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'entity_id': 'str',
        'name': 'str',
        'modification_date': 'datetime',
        'creation_date': 'datetime',
        'active': 'bool',
        'base_url': 'str',
        'default_virtual_entity_id': 'str',
        'virtual_entity_ids': 'list[str]',
        'metadata_reload_settings': 'ConnectionMetadataUrl',
        'credentials': 'ConnectionCredentials',
        'contact_info': 'ContactInfo',
        'license_connection_group': 'str',
        'logging_mode': 'str',
        'additional_allowed_entities_configuration': 'AdditionalAllowedEntitiesConfiguration',
        'extended_properties': 'dict(str, ParameterValues)'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'entity_id': 'entityId',
        'name': 'name',
        'modification_date': 'modificationDate',
        'creation_date': 'creationDate',
        'active': 'active',
        'base_url': 'baseUrl',
        'default_virtual_entity_id': 'defaultVirtualEntityId',
        'virtual_entity_ids': 'virtualEntityIds',
        'metadata_reload_settings': 'metadataReloadSettings',
        'credentials': 'credentials',
        'contact_info': 'contactInfo',
        'license_connection_group': 'licenseConnectionGroup',
        'logging_mode': 'loggingMode',
        'additional_allowed_entities_configuration': 'additionalAllowedEntitiesConfiguration',
        'extended_properties': 'extendedProperties'
    }

    discriminator_value_class_map = {
        'SpConnection': 'SpConnection',
        'IdpConnection': 'IdpConnection'
    }

    def __init__(self, type=None, id=None, entity_id=None, name=None, modification_date=None, creation_date=None, active=None, base_url=None, default_virtual_entity_id=None, virtual_entity_ids=None, metadata_reload_settings=None, credentials=None, contact_info=None, license_connection_group=None, logging_mode=None, additional_allowed_entities_configuration=None, extended_properties=None, _configuration=None):  # noqa: E501
        """Connection - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._id = None
        self._entity_id = None
        self._name = None
        self._modification_date = None
        self._creation_date = None
        self._active = None
        self._base_url = None
        self._default_virtual_entity_id = None
        self._virtual_entity_ids = None
        self._metadata_reload_settings = None
        self._credentials = None
        self._contact_info = None
        self._license_connection_group = None
        self._logging_mode = None
        self._additional_allowed_entities_configuration = None
        self._extended_properties = None
        self.discriminator = 'type'

        if type is not None:
            self.type = type
        if id is not None:
            self.id = id
        self.entity_id = entity_id
        self.name = name
        if modification_date is not None:
            self.modification_date = modification_date
        if creation_date is not None:
            self.creation_date = creation_date
        if active is not None:
            self.active = active
        if base_url is not None:
            self.base_url = base_url
        if default_virtual_entity_id is not None:
            self.default_virtual_entity_id = default_virtual_entity_id
        if virtual_entity_ids is not None:
            self.virtual_entity_ids = virtual_entity_ids
        if metadata_reload_settings is not None:
            self.metadata_reload_settings = metadata_reload_settings
        if credentials is not None:
            self.credentials = credentials
        if contact_info is not None:
            self.contact_info = contact_info
        if license_connection_group is not None:
            self.license_connection_group = license_connection_group
        if logging_mode is not None:
            self.logging_mode = logging_mode
        if additional_allowed_entities_configuration is not None:
            self.additional_allowed_entities_configuration = additional_allowed_entities_configuration
        if extended_properties is not None:
            self.extended_properties = extended_properties

    @property
    def type(self):
        """Gets the type of this Connection.  # noqa: E501

        The type of this connection. Default is 'IDP'.  # noqa: E501

        :return: The type of this Connection.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Connection.

        The type of this connection. Default is 'IDP'.  # noqa: E501

        :param type: The type of this Connection.  # noqa: E501
        :type: str
        """
        allowed_values = ["IDP", "SP"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this Connection.  # noqa: E501

        The persistent, unique ID for the connection. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified.  # noqa: E501

        :return: The id of this Connection.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Connection.

        The persistent, unique ID for the connection. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified.  # noqa: E501

        :param id: The id of this Connection.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def entity_id(self):
        """Gets the entity_id of this Connection.  # noqa: E501

        The partner's entity ID (connection ID) or issuer value (for OIDC Connections).  # noqa: E501

        :return: The entity_id of this Connection.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this Connection.

        The partner's entity ID (connection ID) or issuer value (for OIDC Connections).  # noqa: E501

        :param entity_id: The entity_id of this Connection.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")  # noqa: E501

        self._entity_id = entity_id

    @property
    def name(self):
        """Gets the name of this Connection.  # noqa: E501

        The connection name.  # noqa: E501

        :return: The name of this Connection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Connection.

        The connection name.  # noqa: E501

        :param name: The name of this Connection.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def modification_date(self):
        """Gets the modification_date of this Connection.  # noqa: E501

        The time at which the connection was last changed. This property is read only and is ignored on PUT and POST requests.  # noqa: E501

        :return: The modification_date of this Connection.  # noqa: E501
        :rtype: datetime
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date):
        """Sets the modification_date of this Connection.

        The time at which the connection was last changed. This property is read only and is ignored on PUT and POST requests.  # noqa: E501

        :param modification_date: The modification_date of this Connection.  # noqa: E501
        :type: datetime
        """

        self._modification_date = modification_date

    @property
    def creation_date(self):
        """Gets the creation_date of this Connection.  # noqa: E501

        The time at which the connection was created. This property is read only and is ignored on PUT and POST requests.  # noqa: E501

        :return: The creation_date of this Connection.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Connection.

        The time at which the connection was created. This property is read only and is ignored on PUT and POST requests.  # noqa: E501

        :param creation_date: The creation_date of this Connection.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def active(self):
        """Gets the active of this Connection.  # noqa: E501

        Specifies whether the connection is active and ready to process incoming requests. The default value is false.  # noqa: E501

        :return: The active of this Connection.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Connection.

        Specifies whether the connection is active and ready to process incoming requests. The default value is false.  # noqa: E501

        :param active: The active of this Connection.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def base_url(self):
        """Gets the base_url of this Connection.  # noqa: E501

        The fully-qualified hostname and port on which your partner's federation deployment runs.  # noqa: E501

        :return: The base_url of this Connection.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this Connection.

        The fully-qualified hostname and port on which your partner's federation deployment runs.  # noqa: E501

        :param base_url: The base_url of this Connection.  # noqa: E501
        :type: str
        """

        self._base_url = base_url

    @property
    def default_virtual_entity_id(self):
        """Gets the default_virtual_entity_id of this Connection.  # noqa: E501

        The default alternate entity ID that identifies the local server to this partner. It is required when virtualEntityIds is not empty and must be included in that list.  # noqa: E501

        :return: The default_virtual_entity_id of this Connection.  # noqa: E501
        :rtype: str
        """
        return self._default_virtual_entity_id

    @default_virtual_entity_id.setter
    def default_virtual_entity_id(self, default_virtual_entity_id):
        """Sets the default_virtual_entity_id of this Connection.

        The default alternate entity ID that identifies the local server to this partner. It is required when virtualEntityIds is not empty and must be included in that list.  # noqa: E501

        :param default_virtual_entity_id: The default_virtual_entity_id of this Connection.  # noqa: E501
        :type: str
        """

        self._default_virtual_entity_id = default_virtual_entity_id

    @property
    def virtual_entity_ids(self):
        """Gets the virtual_entity_ids of this Connection.  # noqa: E501

        List of alternate entity IDs that identifies the local server to this partner.  # noqa: E501

        :return: The virtual_entity_ids of this Connection.  # noqa: E501
        :rtype: list[str]
        """
        return self._virtual_entity_ids

    @virtual_entity_ids.setter
    def virtual_entity_ids(self, virtual_entity_ids):
        """Sets the virtual_entity_ids of this Connection.

        List of alternate entity IDs that identifies the local server to this partner.  # noqa: E501

        :param virtual_entity_ids: The virtual_entity_ids of this Connection.  # noqa: E501
        :type: list[str]
        """

        self._virtual_entity_ids = virtual_entity_ids

    @property
    def metadata_reload_settings(self):
        """Gets the metadata_reload_settings of this Connection.  # noqa: E501

        Connection metadata automatic reload settings.  # noqa: E501

        :return: The metadata_reload_settings of this Connection.  # noqa: E501
        :rtype: ConnectionMetadataUrl
        """
        return self._metadata_reload_settings

    @metadata_reload_settings.setter
    def metadata_reload_settings(self, metadata_reload_settings):
        """Sets the metadata_reload_settings of this Connection.

        Connection metadata automatic reload settings.  # noqa: E501

        :param metadata_reload_settings: The metadata_reload_settings of this Connection.  # noqa: E501
        :type: ConnectionMetadataUrl
        """

        self._metadata_reload_settings = metadata_reload_settings

    @property
    def credentials(self):
        """Gets the credentials of this Connection.  # noqa: E501

        The certificates and settings for encryption, signing, and signature verification. It is required for  SAMLx.x and WS-Fed Connections.  # noqa: E501

        :return: The credentials of this Connection.  # noqa: E501
        :rtype: ConnectionCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this Connection.

        The certificates and settings for encryption, signing, and signature verification. It is required for  SAMLx.x and WS-Fed Connections.  # noqa: E501

        :param credentials: The credentials of this Connection.  # noqa: E501
        :type: ConnectionCredentials
        """

        self._credentials = credentials

    @property
    def contact_info(self):
        """Gets the contact_info of this Connection.  # noqa: E501

        The contact information for this partner.  # noqa: E501

        :return: The contact_info of this Connection.  # noqa: E501
        :rtype: ContactInfo
        """
        return self._contact_info

    @contact_info.setter
    def contact_info(self, contact_info):
        """Sets the contact_info of this Connection.

        The contact information for this partner.  # noqa: E501

        :param contact_info: The contact_info of this Connection.  # noqa: E501
        :type: ContactInfo
        """

        self._contact_info = contact_info

    @property
    def license_connection_group(self):
        """Gets the license_connection_group of this Connection.  # noqa: E501

        The license connection group. If your PingFederate license is based on connection groups, each connection must be assigned to a group before it can be used.  # noqa: E501

        :return: The license_connection_group of this Connection.  # noqa: E501
        :rtype: str
        """
        return self._license_connection_group

    @license_connection_group.setter
    def license_connection_group(self, license_connection_group):
        """Sets the license_connection_group of this Connection.

        The license connection group. If your PingFederate license is based on connection groups, each connection must be assigned to a group before it can be used.  # noqa: E501

        :param license_connection_group: The license_connection_group of this Connection.  # noqa: E501
        :type: str
        """

        self._license_connection_group = license_connection_group

    @property
    def logging_mode(self):
        """Gets the logging_mode of this Connection.  # noqa: E501

        The level of transaction logging applicable for this connection. Default is STANDARD.  # noqa: E501

        :return: The logging_mode of this Connection.  # noqa: E501
        :rtype: str
        """
        return self._logging_mode

    @logging_mode.setter
    def logging_mode(self, logging_mode):
        """Sets the logging_mode of this Connection.

        The level of transaction logging applicable for this connection. Default is STANDARD.  # noqa: E501

        :param logging_mode: The logging_mode of this Connection.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "STANDARD", "ENHANCED", "FULL"]  # noqa: E501
        if (self._configuration.client_side_validation and
                logging_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `logging_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(logging_mode, allowed_values)
            )

        self._logging_mode = logging_mode

    @property
    def additional_allowed_entities_configuration(self):
        """Gets the additional_allowed_entities_configuration of this Connection.  # noqa: E501

        Additional allowed entities or issuers configuration. Currently only used in OIDC IdP (RP) connection.  # noqa: E501

        :return: The additional_allowed_entities_configuration of this Connection.  # noqa: E501
        :rtype: AdditionalAllowedEntitiesConfiguration
        """
        return self._additional_allowed_entities_configuration

    @additional_allowed_entities_configuration.setter
    def additional_allowed_entities_configuration(self, additional_allowed_entities_configuration):
        """Sets the additional_allowed_entities_configuration of this Connection.

        Additional allowed entities or issuers configuration. Currently only used in OIDC IdP (RP) connection.  # noqa: E501

        :param additional_allowed_entities_configuration: The additional_allowed_entities_configuration of this Connection.  # noqa: E501
        :type: AdditionalAllowedEntitiesConfiguration
        """

        self._additional_allowed_entities_configuration = additional_allowed_entities_configuration

    @property
    def extended_properties(self):
        """Gets the extended_properties of this Connection.  # noqa: E501

        Extended Properties allows to store additional information for IdP/SP Connections. The names of these extended properties should be defined in /extendedProperties.  # noqa: E501

        :return: The extended_properties of this Connection.  # noqa: E501
        :rtype: dict(str, ParameterValues)
        """
        return self._extended_properties

    @extended_properties.setter
    def extended_properties(self, extended_properties):
        """Sets the extended_properties of this Connection.

        Extended Properties allows to store additional information for IdP/SP Connections. The names of these extended properties should be defined in /extendedProperties.  # noqa: E501

        :param extended_properties: The extended_properties of this Connection.  # noqa: E501
        :type: dict(str, ParameterValues)
        """

        self._extended_properties = extended_properties

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Connection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Connection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Connection):
            return True

        return self.to_dict() != other.to_dict()
