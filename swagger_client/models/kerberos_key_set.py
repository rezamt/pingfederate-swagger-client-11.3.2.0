# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class KerberosKeySet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'encrypted_key_set': 'str',
        'deactivated_at': 'datetime'
    }

    attribute_map = {
        'encrypted_key_set': 'encryptedKeySet',
        'deactivated_at': 'deactivatedAt'
    }

    def __init__(self, encrypted_key_set=None, deactivated_at=None, _configuration=None):  # noqa: E501
        """KerberosKeySet - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._encrypted_key_set = None
        self._deactivated_at = None
        self.discriminator = None

        self.encrypted_key_set = encrypted_key_set
        if deactivated_at is not None:
            self.deactivated_at = deactivated_at

    @property
    def encrypted_key_set(self):
        """Gets the encrypted_key_set of this KerberosKeySet.  # noqa: E501

        The encrypted key set.  # noqa: E501

        :return: The encrypted_key_set of this KerberosKeySet.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_key_set

    @encrypted_key_set.setter
    def encrypted_key_set(self, encrypted_key_set):
        """Sets the encrypted_key_set of this KerberosKeySet.

        The encrypted key set.  # noqa: E501

        :param encrypted_key_set: The encrypted_key_set of this KerberosKeySet.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and encrypted_key_set is None:
            raise ValueError("Invalid value for `encrypted_key_set`, must not be `None`")  # noqa: E501

        self._encrypted_key_set = encrypted_key_set

    @property
    def deactivated_at(self):
        """Gets the deactivated_at of this KerberosKeySet.  # noqa: E501

        Time at which the key set was deactivated due to password change. This field is not populated if the key set is active.  # noqa: E501

        :return: The deactivated_at of this KerberosKeySet.  # noqa: E501
        :rtype: datetime
        """
        return self._deactivated_at

    @deactivated_at.setter
    def deactivated_at(self, deactivated_at):
        """Sets the deactivated_at of this KerberosKeySet.

        Time at which the key set was deactivated due to password change. This field is not populated if the key set is active.  # noqa: E501

        :param deactivated_at: The deactivated_at of this KerberosKeySet.  # noqa: E501
        :type: datetime
        """

        self._deactivated_at = deactivated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KerberosKeySet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KerberosKeySet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KerberosKeySet):
            return True

        return self.to_dict() != other.to_dict()
