# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class KeyPairFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'file_data': 'str',
        'format': 'str',
        'password': 'str',
        'encrypted_password': 'str',
        'crypto_provider': 'str'
    }

    attribute_map = {
        'id': 'id',
        'file_data': 'fileData',
        'format': 'format',
        'password': 'password',
        'encrypted_password': 'encryptedPassword',
        'crypto_provider': 'cryptoProvider'
    }

    def __init__(self, id=None, file_data=None, format=None, password=None, encrypted_password=None, crypto_provider=None, _configuration=None):  # noqa: E501
        """KeyPairFile - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._file_data = None
        self._format = None
        self._password = None
        self._encrypted_password = None
        self._crypto_provider = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.file_data = file_data
        if format is not None:
            self.format = format
        self.password = password
        if encrypted_password is not None:
            self.encrypted_password = encrypted_password
        if crypto_provider is not None:
            self.crypto_provider = crypto_provider

    @property
    def id(self):
        """Gets the id of this KeyPairFile.  # noqa: E501

        The persistent, unique ID for the certificate. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified.  # noqa: E501

        :return: The id of this KeyPairFile.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this KeyPairFile.

        The persistent, unique ID for the certificate. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified.  # noqa: E501

        :param id: The id of this KeyPairFile.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def file_data(self):
        """Gets the file_data of this KeyPairFile.  # noqa: E501

        Base-64 encoded PKCS12 or PEM file data. In the case of PEM, the raw (non-base-64) data is also accepted. In BCFIPS mode, only PEM with PBES2 and AES or Triple DES encryption is accepted and 128-bit salt is required.  # noqa: E501

        :return: The file_data of this KeyPairFile.  # noqa: E501
        :rtype: str
        """
        return self._file_data

    @file_data.setter
    def file_data(self, file_data):
        """Sets the file_data of this KeyPairFile.

        Base-64 encoded PKCS12 or PEM file data. In the case of PEM, the raw (non-base-64) data is also accepted. In BCFIPS mode, only PEM with PBES2 and AES or Triple DES encryption is accepted and 128-bit salt is required.  # noqa: E501

        :param file_data: The file_data of this KeyPairFile.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and file_data is None:
            raise ValueError("Invalid value for `file_data`, must not be `None`")  # noqa: E501

        self._file_data = file_data

    @property
    def format(self):
        """Gets the format of this KeyPairFile.  # noqa: E501

        Key pair file format. If specified, this field will control what file format is expected, otherwise the format will be auto-detected. In BCFIPS mode, only PEM is supported.  # noqa: E501

        :return: The format of this KeyPairFile.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this KeyPairFile.

        Key pair file format. If specified, this field will control what file format is expected, otherwise the format will be auto-detected. In BCFIPS mode, only PEM is supported.  # noqa: E501

        :param format: The format of this KeyPairFile.  # noqa: E501
        :type: str
        """
        allowed_values = ["PKCS12", "PEM"]  # noqa: E501
        if (self._configuration.client_side_validation and
                format not in allowed_values):
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def password(self):
        """Gets the password of this KeyPairFile.  # noqa: E501

        Password for the file. In BCFIPS mode, the password must be at least 14 characters.  # noqa: E501

        :return: The password of this KeyPairFile.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this KeyPairFile.

        Password for the file. In BCFIPS mode, the password must be at least 14 characters.  # noqa: E501

        :param password: The password of this KeyPairFile.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def encrypted_password(self):
        """Gets the encrypted_password of this KeyPairFile.  # noqa: E501

        Encrypted password for the file. Only applicable for bulk export/import operations. For bulk import operation, either password or encrypted password must be set.  # noqa: E501

        :return: The encrypted_password of this KeyPairFile.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_password

    @encrypted_password.setter
    def encrypted_password(self, encrypted_password):
        """Sets the encrypted_password of this KeyPairFile.

        Encrypted password for the file. Only applicable for bulk export/import operations. For bulk import operation, either password or encrypted password must be set.  # noqa: E501

        :param encrypted_password: The encrypted_password of this KeyPairFile.  # noqa: E501
        :type: str
        """

        self._encrypted_password = encrypted_password

    @property
    def crypto_provider(self):
        """Gets the crypto_provider of this KeyPairFile.  # noqa: E501

        Cryptographic Provider. This is only applicable if Hybrid HSM mode is true.  # noqa: E501

        :return: The crypto_provider of this KeyPairFile.  # noqa: E501
        :rtype: str
        """
        return self._crypto_provider

    @crypto_provider.setter
    def crypto_provider(self, crypto_provider):
        """Sets the crypto_provider of this KeyPairFile.

        Cryptographic Provider. This is only applicable if Hybrid HSM mode is true.  # noqa: E501

        :param crypto_provider: The crypto_provider of this KeyPairFile.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOCAL", "HSM"]  # noqa: E501
        if (self._configuration.client_side_validation and
                crypto_provider not in allowed_values):
            raise ValueError(
                "Invalid value for `crypto_provider` ({0}), must be one of {1}"  # noqa: E501
                .format(crypto_provider, allowed_values)
            )

        self._crypto_provider = crypto_provider

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KeyPairFile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeyPairFile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KeyPairFile):
            return True

        return self.to_dict() != other.to_dict()
