# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GroupMembershipDetection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'member_of_group_attribute_name': 'str',
        'group_member_attribute_name': 'str'
    }

    attribute_map = {
        'member_of_group_attribute_name': 'memberOfGroupAttributeName',
        'group_member_attribute_name': 'groupMemberAttributeName'
    }

    def __init__(self, member_of_group_attribute_name=None, group_member_attribute_name=None, _configuration=None):  # noqa: E501
        """GroupMembershipDetection - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._member_of_group_attribute_name = None
        self._group_member_attribute_name = None
        self.discriminator = None

        if member_of_group_attribute_name is not None:
            self.member_of_group_attribute_name = member_of_group_attribute_name
        self.group_member_attribute_name = group_member_attribute_name

    @property
    def member_of_group_attribute_name(self):
        """Gets the member_of_group_attribute_name of this GroupMembershipDetection.  # noqa: E501

        The name of the attribute that indicates the entity is a member of a group, also known as member of attribute.  # noqa: E501

        :return: The member_of_group_attribute_name of this GroupMembershipDetection.  # noqa: E501
        :rtype: str
        """
        return self._member_of_group_attribute_name

    @member_of_group_attribute_name.setter
    def member_of_group_attribute_name(self, member_of_group_attribute_name):
        """Sets the member_of_group_attribute_name of this GroupMembershipDetection.

        The name of the attribute that indicates the entity is a member of a group, also known as member of attribute.  # noqa: E501

        :param member_of_group_attribute_name: The member_of_group_attribute_name of this GroupMembershipDetection.  # noqa: E501
        :type: str
        """

        self._member_of_group_attribute_name = member_of_group_attribute_name

    @property
    def group_member_attribute_name(self):
        """Gets the group_member_attribute_name of this GroupMembershipDetection.  # noqa: E501

        The name of the attribute that represents group members in a group, also known as group member attribute.  # noqa: E501

        :return: The group_member_attribute_name of this GroupMembershipDetection.  # noqa: E501
        :rtype: str
        """
        return self._group_member_attribute_name

    @group_member_attribute_name.setter
    def group_member_attribute_name(self, group_member_attribute_name):
        """Sets the group_member_attribute_name of this GroupMembershipDetection.

        The name of the attribute that represents group members in a group, also known as group member attribute.  # noqa: E501

        :param group_member_attribute_name: The group_member_attribute_name of this GroupMembershipDetection.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and group_member_attribute_name is None:
            raise ValueError("Invalid value for `group_member_attribute_name`, must not be `None`")  # noqa: E501

        self._group_member_attribute_name = group_member_attribute_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupMembershipDetection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupMembershipDetection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupMembershipDetection):
            return True

        return self.to_dict() != other.to_dict()
