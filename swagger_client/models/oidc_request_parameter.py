# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OIDCRequestParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'attribute_value': 'AttributeFulfillmentValue',
        'value': 'str',
        'application_endpoint_override': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'attribute_value': 'attributeValue',
        'value': 'value',
        'application_endpoint_override': 'applicationEndpointOverride'
    }

    def __init__(self, name=None, attribute_value=None, value=None, application_endpoint_override=None, _configuration=None):  # noqa: E501
        """OIDCRequestParameter - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._attribute_value = None
        self._value = None
        self._application_endpoint_override = None
        self.discriminator = None

        self.name = name
        self.attribute_value = attribute_value
        if value is not None:
            self.value = value
        self.application_endpoint_override = application_endpoint_override

    @property
    def name(self):
        """Gets the name of this OIDCRequestParameter.  # noqa: E501

        Request parameter name.  # noqa: E501

        :return: The name of this OIDCRequestParameter.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OIDCRequestParameter.

        Request parameter name.  # noqa: E501

        :param name: The name of this OIDCRequestParameter.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def attribute_value(self):
        """Gets the attribute_value of this OIDCRequestParameter.  # noqa: E501

        A request parameter attribute value with source type.  # noqa: E501

        :return: The attribute_value of this OIDCRequestParameter.  # noqa: E501
        :rtype: AttributeFulfillmentValue
        """
        return self._attribute_value

    @attribute_value.setter
    def attribute_value(self, attribute_value):
        """Sets the attribute_value of this OIDCRequestParameter.

        A request parameter attribute value with source type.  # noqa: E501

        :param attribute_value: The attribute_value of this OIDCRequestParameter.  # noqa: E501
        :type: AttributeFulfillmentValue
        """
        if self._configuration.client_side_validation and attribute_value is None:
            raise ValueError("Invalid value for `attribute_value`, must not be `None`")  # noqa: E501

        self._attribute_value = attribute_value

    @property
    def value(self):
        """Gets the value of this OIDCRequestParameter.  # noqa: E501

        A request parameter value. A parameter can have either a value or a attribute value but not both. Value set here will be converted to an attribute value of source type TEXT. An empty value will be converted to attribute value of source type NO_MAPPING.  # noqa: E501

        :return: The value of this OIDCRequestParameter.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this OIDCRequestParameter.

        A request parameter value. A parameter can have either a value or a attribute value but not both. Value set here will be converted to an attribute value of source type TEXT. An empty value will be converted to attribute value of source type NO_MAPPING.  # noqa: E501

        :param value: The value of this OIDCRequestParameter.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def application_endpoint_override(self):
        """Gets the application_endpoint_override of this OIDCRequestParameter.  # noqa: E501

        Indicates whether the parameter value can be overridden by an Application Endpoint parameter  # noqa: E501

        :return: The application_endpoint_override of this OIDCRequestParameter.  # noqa: E501
        :rtype: bool
        """
        return self._application_endpoint_override

    @application_endpoint_override.setter
    def application_endpoint_override(self, application_endpoint_override):
        """Sets the application_endpoint_override of this OIDCRequestParameter.

        Indicates whether the parameter value can be overridden by an Application Endpoint parameter  # noqa: E501

        :param application_endpoint_override: The application_endpoint_override of this OIDCRequestParameter.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and application_endpoint_override is None:
            raise ValueError("Invalid value for `application_endpoint_override`, must not be `None`")  # noqa: E501

        self._application_endpoint_override = application_endpoint_override

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OIDCRequestParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OIDCRequestParameter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OIDCRequestParameter):
            return True

        return self.to_dict() != other.to_dict()
