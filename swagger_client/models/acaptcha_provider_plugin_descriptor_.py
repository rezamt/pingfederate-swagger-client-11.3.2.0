# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ACAPTCHAProviderPluginDescriptor_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'class_name': 'str',
        'attribute_contract': 'list[str]',
        'supports_extended_contract': 'bool',
        'config_descriptor': 'PluginConfigDescriptor'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'class_name': 'className',
        'attribute_contract': 'attributeContract',
        'supports_extended_contract': 'supportsExtendedContract',
        'config_descriptor': 'configDescriptor'
    }

    def __init__(self, id=None, name=None, class_name=None, attribute_contract=None, supports_extended_contract=None, config_descriptor=None, _configuration=None):  # noqa: E501
        """ACAPTCHAProviderPluginDescriptor_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._class_name = None
        self._attribute_contract = None
        self._supports_extended_contract = None
        self._config_descriptor = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if class_name is not None:
            self.class_name = class_name
        if attribute_contract is not None:
            self.attribute_contract = attribute_contract
        if supports_extended_contract is not None:
            self.supports_extended_contract = supports_extended_contract
        if config_descriptor is not None:
            self.config_descriptor = config_descriptor

    @property
    def id(self):
        """Gets the id of this ACAPTCHAProviderPluginDescriptor_.  # noqa: E501

        Unique ID of the plugin.  # noqa: E501

        :return: The id of this ACAPTCHAProviderPluginDescriptor_.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ACAPTCHAProviderPluginDescriptor_.

        Unique ID of the plugin.  # noqa: E501

        :param id: The id of this ACAPTCHAProviderPluginDescriptor_.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ACAPTCHAProviderPluginDescriptor_.  # noqa: E501

        Friendly name for the plugin.  # noqa: E501

        :return: The name of this ACAPTCHAProviderPluginDescriptor_.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ACAPTCHAProviderPluginDescriptor_.

        Friendly name for the plugin.  # noqa: E501

        :param name: The name of this ACAPTCHAProviderPluginDescriptor_.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def class_name(self):
        """Gets the class_name of this ACAPTCHAProviderPluginDescriptor_.  # noqa: E501

        Full class name of the class that implements this plugin.  # noqa: E501

        :return: The class_name of this ACAPTCHAProviderPluginDescriptor_.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this ACAPTCHAProviderPluginDescriptor_.

        Full class name of the class that implements this plugin.  # noqa: E501

        :param class_name: The class_name of this ACAPTCHAProviderPluginDescriptor_.  # noqa: E501
        :type: str
        """

        self._class_name = class_name

    @property
    def attribute_contract(self):
        """Gets the attribute_contract of this ACAPTCHAProviderPluginDescriptor_.  # noqa: E501

        The attribute contract for this plugin.  # noqa: E501

        :return: The attribute_contract of this ACAPTCHAProviderPluginDescriptor_.  # noqa: E501
        :rtype: list[str]
        """
        return self._attribute_contract

    @attribute_contract.setter
    def attribute_contract(self, attribute_contract):
        """Sets the attribute_contract of this ACAPTCHAProviderPluginDescriptor_.

        The attribute contract for this plugin.  # noqa: E501

        :param attribute_contract: The attribute_contract of this ACAPTCHAProviderPluginDescriptor_.  # noqa: E501
        :type: list[str]
        """

        self._attribute_contract = attribute_contract

    @property
    def supports_extended_contract(self):
        """Gets the supports_extended_contract of this ACAPTCHAProviderPluginDescriptor_.  # noqa: E501

        Determines whether this plugin supports extending the attribute contract.  # noqa: E501

        :return: The supports_extended_contract of this ACAPTCHAProviderPluginDescriptor_.  # noqa: E501
        :rtype: bool
        """
        return self._supports_extended_contract

    @supports_extended_contract.setter
    def supports_extended_contract(self, supports_extended_contract):
        """Sets the supports_extended_contract of this ACAPTCHAProviderPluginDescriptor_.

        Determines whether this plugin supports extending the attribute contract.  # noqa: E501

        :param supports_extended_contract: The supports_extended_contract of this ACAPTCHAProviderPluginDescriptor_.  # noqa: E501
        :type: bool
        """

        self._supports_extended_contract = supports_extended_contract

    @property
    def config_descriptor(self):
        """Gets the config_descriptor of this ACAPTCHAProviderPluginDescriptor_.  # noqa: E501

        The descriptor which defines the configuration fields available for this plugin.  # noqa: E501

        :return: The config_descriptor of this ACAPTCHAProviderPluginDescriptor_.  # noqa: E501
        :rtype: PluginConfigDescriptor
        """
        return self._config_descriptor

    @config_descriptor.setter
    def config_descriptor(self, config_descriptor):
        """Sets the config_descriptor of this ACAPTCHAProviderPluginDescriptor_.

        The descriptor which defines the configuration fields available for this plugin.  # noqa: E501

        :param config_descriptor: The config_descriptor of this ACAPTCHAProviderPluginDescriptor_.  # noqa: E501
        :type: PluginConfigDescriptor
        """

        self._config_descriptor = config_descriptor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ACAPTCHAProviderPluginDescriptor_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ACAPTCHAProviderPluginDescriptor_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ACAPTCHAProviderPluginDescriptor_):
            return True

        return self.to_dict() != other.to_dict()
