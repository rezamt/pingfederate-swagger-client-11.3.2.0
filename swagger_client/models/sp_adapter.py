# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SpAdapter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute_contract': 'SpAdapterAttributeContract',
        'target_application_info': 'SpAdapterTargetApplicationInfo'
    }

    attribute_map = {
        'attribute_contract': 'attributeContract',
        'target_application_info': 'targetApplicationInfo'
    }

    def __init__(self, attribute_contract=None, target_application_info=None, _configuration=None):  # noqa: E501
        """SpAdapter - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._attribute_contract = None
        self._target_application_info = None
        self.discriminator = None

        if attribute_contract is not None:
            self.attribute_contract = attribute_contract
        if target_application_info is not None:
            self.target_application_info = target_application_info

    @property
    def attribute_contract(self):
        """Gets the attribute_contract of this SpAdapter.  # noqa: E501

        The list of attributes that the SP adapter provides.  # noqa: E501

        :return: The attribute_contract of this SpAdapter.  # noqa: E501
        :rtype: SpAdapterAttributeContract
        """
        return self._attribute_contract

    @attribute_contract.setter
    def attribute_contract(self, attribute_contract):
        """Sets the attribute_contract of this SpAdapter.

        The list of attributes that the SP adapter provides.  # noqa: E501

        :param attribute_contract: The attribute_contract of this SpAdapter.  # noqa: E501
        :type: SpAdapterAttributeContract
        """

        self._attribute_contract = attribute_contract

    @property
    def target_application_info(self):
        """Gets the target_application_info of this SpAdapter.  # noqa: E501

        The target application's name and icon URL  # noqa: E501

        :return: The target_application_info of this SpAdapter.  # noqa: E501
        :rtype: SpAdapterTargetApplicationInfo
        """
        return self._target_application_info

    @target_application_info.setter
    def target_application_info(self, target_application_info):
        """Sets the target_application_info of this SpAdapter.

        The target application's name and icon URL  # noqa: E501

        :param target_application_info: The target_application_info of this SpAdapter.  # noqa: E501
        :type: SpAdapterTargetApplicationInfo
        """

        self._target_application_info = target_application_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpAdapter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpAdapter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpAdapter):
            return True

        return self.to_dict() != other.to_dict()
