# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OutboundProvisionDatabase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_store_ref': 'ResourceLink',
        'synchronization_frequency': 'int'
    }

    attribute_map = {
        'data_store_ref': 'dataStoreRef',
        'synchronization_frequency': 'synchronizationFrequency'
    }

    def __init__(self, data_store_ref=None, synchronization_frequency=None, _configuration=None):  # noqa: E501
        """OutboundProvisionDatabase - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._data_store_ref = None
        self._synchronization_frequency = None
        self.discriminator = None

        self.data_store_ref = data_store_ref
        if synchronization_frequency is not None:
            self.synchronization_frequency = synchronization_frequency

    @property
    def data_store_ref(self):
        """Gets the data_store_ref of this OutboundProvisionDatabase.  # noqa: E501

        Reference to the associated data store.  # noqa: E501

        :return: The data_store_ref of this OutboundProvisionDatabase.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._data_store_ref

    @data_store_ref.setter
    def data_store_ref(self, data_store_ref):
        """Sets the data_store_ref of this OutboundProvisionDatabase.

        Reference to the associated data store.  # noqa: E501

        :param data_store_ref: The data_store_ref of this OutboundProvisionDatabase.  # noqa: E501
        :type: ResourceLink
        """
        if self._configuration.client_side_validation and data_store_ref is None:
            raise ValueError("Invalid value for `data_store_ref`, must not be `None`")  # noqa: E501

        self._data_store_ref = data_store_ref

    @property
    def synchronization_frequency(self):
        """Gets the synchronization_frequency of this OutboundProvisionDatabase.  # noqa: E501

        The synchronization frequency in seconds. The default value is 60.  # noqa: E501

        :return: The synchronization_frequency of this OutboundProvisionDatabase.  # noqa: E501
        :rtype: int
        """
        return self._synchronization_frequency

    @synchronization_frequency.setter
    def synchronization_frequency(self, synchronization_frequency):
        """Sets the synchronization_frequency of this OutboundProvisionDatabase.

        The synchronization frequency in seconds. The default value is 60.  # noqa: E501

        :param synchronization_frequency: The synchronization_frequency of this OutboundProvisionDatabase.  # noqa: E501
        :type: int
        """

        self._synchronization_frequency = synchronization_frequency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OutboundProvisionDatabase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OutboundProvisionDatabase):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OutboundProvisionDatabase):
            return True

        return self.to_dict() != other.to_dict()
