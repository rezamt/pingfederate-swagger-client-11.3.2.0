# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AuthnSourcePolicyAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute_rules': 'AttributeRules',
        'authentication_source': 'AuthenticationSource',
        'input_user_id_mapping': 'AttributeFulfillmentValue',
        'user_id_authenticated': 'bool'
    }

    attribute_map = {
        'attribute_rules': 'attributeRules',
        'authentication_source': 'authenticationSource',
        'input_user_id_mapping': 'inputUserIdMapping',
        'user_id_authenticated': 'userIdAuthenticated'
    }

    def __init__(self, attribute_rules=None, authentication_source=None, input_user_id_mapping=None, user_id_authenticated=None, _configuration=None):  # noqa: E501
        """AuthnSourcePolicyAction - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._attribute_rules = None
        self._authentication_source = None
        self._input_user_id_mapping = None
        self._user_id_authenticated = None
        self.discriminator = None

        if attribute_rules is not None:
            self.attribute_rules = attribute_rules
        self.authentication_source = authentication_source
        if input_user_id_mapping is not None:
            self.input_user_id_mapping = input_user_id_mapping
        if user_id_authenticated is not None:
            self.user_id_authenticated = user_id_authenticated

    @property
    def attribute_rules(self):
        """Gets the attribute_rules of this AuthnSourcePolicyAction.  # noqa: E501

        The authentication policy rules.  # noqa: E501

        :return: The attribute_rules of this AuthnSourcePolicyAction.  # noqa: E501
        :rtype: AttributeRules
        """
        return self._attribute_rules

    @attribute_rules.setter
    def attribute_rules(self, attribute_rules):
        """Sets the attribute_rules of this AuthnSourcePolicyAction.

        The authentication policy rules.  # noqa: E501

        :param attribute_rules: The attribute_rules of this AuthnSourcePolicyAction.  # noqa: E501
        :type: AttributeRules
        """

        self._attribute_rules = attribute_rules

    @property
    def authentication_source(self):
        """Gets the authentication_source of this AuthnSourcePolicyAction.  # noqa: E501

        The associated authentication source.  # noqa: E501

        :return: The authentication_source of this AuthnSourcePolicyAction.  # noqa: E501
        :rtype: AuthenticationSource
        """
        return self._authentication_source

    @authentication_source.setter
    def authentication_source(self, authentication_source):
        """Sets the authentication_source of this AuthnSourcePolicyAction.

        The associated authentication source.  # noqa: E501

        :param authentication_source: The authentication_source of this AuthnSourcePolicyAction.  # noqa: E501
        :type: AuthenticationSource
        """
        if self._configuration.client_side_validation and authentication_source is None:
            raise ValueError("Invalid value for `authentication_source`, must not be `None`")  # noqa: E501

        self._authentication_source = authentication_source

    @property
    def input_user_id_mapping(self):
        """Gets the input_user_id_mapping of this AuthnSourcePolicyAction.  # noqa: E501

        The input user ID mapping.  # noqa: E501

        :return: The input_user_id_mapping of this AuthnSourcePolicyAction.  # noqa: E501
        :rtype: AttributeFulfillmentValue
        """
        return self._input_user_id_mapping

    @input_user_id_mapping.setter
    def input_user_id_mapping(self, input_user_id_mapping):
        """Sets the input_user_id_mapping of this AuthnSourcePolicyAction.

        The input user ID mapping.  # noqa: E501

        :param input_user_id_mapping: The input_user_id_mapping of this AuthnSourcePolicyAction.  # noqa: E501
        :type: AttributeFulfillmentValue
        """

        self._input_user_id_mapping = input_user_id_mapping

    @property
    def user_id_authenticated(self):
        """Gets the user_id_authenticated of this AuthnSourcePolicyAction.  # noqa: E501

        Indicates whether the user ID obtained by the user ID mapping is authenticated.  # noqa: E501

        :return: The user_id_authenticated of this AuthnSourcePolicyAction.  # noqa: E501
        :rtype: bool
        """
        return self._user_id_authenticated

    @user_id_authenticated.setter
    def user_id_authenticated(self, user_id_authenticated):
        """Sets the user_id_authenticated of this AuthnSourcePolicyAction.

        Indicates whether the user ID obtained by the user ID mapping is authenticated.  # noqa: E501

        :param user_id_authenticated: The user_id_authenticated of this AuthnSourcePolicyAction.  # noqa: E501
        :type: bool
        """

        self._user_id_authenticated = user_id_authenticated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthnSourcePolicyAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthnSourcePolicyAction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthnSourcePolicyAction):
            return True

        return self.to_dict() != other.to_dict()
