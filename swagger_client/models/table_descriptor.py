# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TableDescriptor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'columns': 'list[FieldDescriptor]',
        'label': 'str',
        'require_default_row': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'columns': 'columns',
        'label': 'label',
        'require_default_row': 'requireDefaultRow'
    }

    def __init__(self, name=None, description=None, columns=None, label=None, require_default_row=None, _configuration=None):  # noqa: E501
        """TableDescriptor - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._columns = None
        self._label = None
        self._require_default_row = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if columns is not None:
            self.columns = columns
        if label is not None:
            self.label = label
        if require_default_row is not None:
            self.require_default_row = require_default_row

    @property
    def name(self):
        """Gets the name of this TableDescriptor.  # noqa: E501

        The name of the table.  # noqa: E501

        :return: The name of this TableDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TableDescriptor.

        The name of the table.  # noqa: E501

        :param name: The name of this TableDescriptor.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this TableDescriptor.  # noqa: E501

        Description for the table.  # noqa: E501

        :return: The description of this TableDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TableDescriptor.

        Description for the table.  # noqa: E501

        :param description: The description of this TableDescriptor.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def columns(self):
        """Gets the columns of this TableDescriptor.  # noqa: E501

        Get the columns in the table.  # noqa: E501

        :return: The columns of this TableDescriptor.  # noqa: E501
        :rtype: list[FieldDescriptor]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this TableDescriptor.

        Get the columns in the table.  # noqa: E501

        :param columns: The columns of this TableDescriptor.  # noqa: E501
        :type: list[FieldDescriptor]
        """

        self._columns = columns

    @property
    def label(self):
        """Gets the label of this TableDescriptor.  # noqa: E501

        Label for the table to be displayed in the administrative console.  # noqa: E501

        :return: The label of this TableDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this TableDescriptor.

        Label for the table to be displayed in the administrative console.  # noqa: E501

        :param label: The label of this TableDescriptor.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def require_default_row(self):
        """Gets the require_default_row of this TableDescriptor.  # noqa: E501

        Configure whether this table requires default row to be set.  # noqa: E501

        :return: The require_default_row of this TableDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._require_default_row

    @require_default_row.setter
    def require_default_row(self, require_default_row):
        """Sets the require_default_row of this TableDescriptor.

        Configure whether this table requires default row to be set.  # noqa: E501

        :param require_default_row: The require_default_row of this TableDescriptor.  # noqa: E501
        :type: bool
        """

        self._require_default_row = require_default_row

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableDescriptor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableDescriptor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TableDescriptor):
            return True

        return self.to_dict() != other.to_dict()
