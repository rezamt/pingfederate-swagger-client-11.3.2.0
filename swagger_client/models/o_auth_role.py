# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OAuthRole(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable_oauth': 'bool',
        'enable_open_id_connect': 'bool'
    }

    attribute_map = {
        'enable_oauth': 'enableOauth',
        'enable_open_id_connect': 'enableOpenIdConnect'
    }

    def __init__(self, enable_oauth=None, enable_open_id_connect=None, _configuration=None):  # noqa: E501
        """OAuthRole - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enable_oauth = None
        self._enable_open_id_connect = None
        self.discriminator = None

        if enable_oauth is not None:
            self.enable_oauth = enable_oauth
        if enable_open_id_connect is not None:
            self.enable_open_id_connect = enable_open_id_connect

    @property
    def enable_oauth(self):
        """Gets the enable_oauth of this OAuthRole.  # noqa: E501

        Enable OAuth 2.0 Authorization Server (AS) Role.  # noqa: E501

        :return: The enable_oauth of this OAuthRole.  # noqa: E501
        :rtype: bool
        """
        return self._enable_oauth

    @enable_oauth.setter
    def enable_oauth(self, enable_oauth):
        """Sets the enable_oauth of this OAuthRole.

        Enable OAuth 2.0 Authorization Server (AS) Role.  # noqa: E501

        :param enable_oauth: The enable_oauth of this OAuthRole.  # noqa: E501
        :type: bool
        """

        self._enable_oauth = enable_oauth

    @property
    def enable_open_id_connect(self):
        """Gets the enable_open_id_connect of this OAuthRole.  # noqa: E501

        Enable Open ID Connect.  # noqa: E501

        :return: The enable_open_id_connect of this OAuthRole.  # noqa: E501
        :rtype: bool
        """
        return self._enable_open_id_connect

    @enable_open_id_connect.setter
    def enable_open_id_connect(self, enable_open_id_connect):
        """Sets the enable_open_id_connect of this OAuthRole.

        Enable Open ID Connect.  # noqa: E501

        :param enable_open_id_connect: The enable_open_id_connect of this OAuthRole.  # noqa: E501
        :type: bool
        """

        self._enable_open_id_connect = enable_open_id_connect

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OAuthRole, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OAuthRole):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OAuthRole):
            return True

        return self.to_dict() != other.to_dict()
