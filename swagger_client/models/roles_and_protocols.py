# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RolesAndProtocols(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'oauth_role': 'OAuthRole',
        'idp_role': 'IdpRole',
        'sp_role': 'SpRole',
        'enable_idp_discovery': 'bool'
    }

    attribute_map = {
        'oauth_role': 'oauthRole',
        'idp_role': 'idpRole',
        'sp_role': 'spRole',
        'enable_idp_discovery': 'enableIdpDiscovery'
    }

    def __init__(self, oauth_role=None, idp_role=None, sp_role=None, enable_idp_discovery=None, _configuration=None):  # noqa: E501
        """RolesAndProtocols - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._oauth_role = None
        self._idp_role = None
        self._sp_role = None
        self._enable_idp_discovery = None
        self.discriminator = None

        if oauth_role is not None:
            self.oauth_role = oauth_role
        if idp_role is not None:
            self.idp_role = idp_role
        if sp_role is not None:
            self.sp_role = sp_role
        if enable_idp_discovery is not None:
            self.enable_idp_discovery = enable_idp_discovery

    @property
    def oauth_role(self):
        """Gets the oauth_role of this RolesAndProtocols.  # noqa: E501

        OAuth role settings.  # noqa: E501

        :return: The oauth_role of this RolesAndProtocols.  # noqa: E501
        :rtype: OAuthRole
        """
        return self._oauth_role

    @oauth_role.setter
    def oauth_role(self, oauth_role):
        """Sets the oauth_role of this RolesAndProtocols.

        OAuth role settings.  # noqa: E501

        :param oauth_role: The oauth_role of this RolesAndProtocols.  # noqa: E501
        :type: OAuthRole
        """

        self._oauth_role = oauth_role

    @property
    def idp_role(self):
        """Gets the idp_role of this RolesAndProtocols.  # noqa: E501

        Identity Provider (IdP) settings.  # noqa: E501

        :return: The idp_role of this RolesAndProtocols.  # noqa: E501
        :rtype: IdpRole
        """
        return self._idp_role

    @idp_role.setter
    def idp_role(self, idp_role):
        """Sets the idp_role of this RolesAndProtocols.

        Identity Provider (IdP) settings.  # noqa: E501

        :param idp_role: The idp_role of this RolesAndProtocols.  # noqa: E501
        :type: IdpRole
        """

        self._idp_role = idp_role

    @property
    def sp_role(self):
        """Gets the sp_role of this RolesAndProtocols.  # noqa: E501

        Service Provider (SP) settings.  # noqa: E501

        :return: The sp_role of this RolesAndProtocols.  # noqa: E501
        :rtype: SpRole
        """
        return self._sp_role

    @sp_role.setter
    def sp_role(self, sp_role):
        """Sets the sp_role of this RolesAndProtocols.

        Service Provider (SP) settings.  # noqa: E501

        :param sp_role: The sp_role of this RolesAndProtocols.  # noqa: E501
        :type: SpRole
        """

        self._sp_role = sp_role

    @property
    def enable_idp_discovery(self):
        """Gets the enable_idp_discovery of this RolesAndProtocols.  # noqa: E501

        Enable IdP Discovery.  # noqa: E501

        :return: The enable_idp_discovery of this RolesAndProtocols.  # noqa: E501
        :rtype: bool
        """
        return self._enable_idp_discovery

    @enable_idp_discovery.setter
    def enable_idp_discovery(self, enable_idp_discovery):
        """Sets the enable_idp_discovery of this RolesAndProtocols.

        Enable IdP Discovery.  # noqa: E501

        :param enable_idp_discovery: The enable_idp_discovery of this RolesAndProtocols.  # noqa: E501
        :type: bool
        """

        self._enable_idp_discovery = enable_idp_discovery

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RolesAndProtocols, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RolesAndProtocols):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RolesAndProtocols):
            return True

        return self.to_dict() != other.to_dict()
