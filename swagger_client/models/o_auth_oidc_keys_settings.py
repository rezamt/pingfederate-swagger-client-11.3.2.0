# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OAuthOidcKeysSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'static_jwks_enabled': 'bool',
        'p256_active_cert_ref': 'ResourceLink',
        'p256_previous_cert_ref': 'ResourceLink',
        'p256_publish_x5c_parameter': 'bool',
        'p384_active_cert_ref': 'ResourceLink',
        'p384_previous_cert_ref': 'ResourceLink',
        'p384_publish_x5c_parameter': 'bool',
        'p521_active_cert_ref': 'ResourceLink',
        'p521_previous_cert_ref': 'ResourceLink',
        'p521_publish_x5c_parameter': 'bool',
        'rsa_active_cert_ref': 'ResourceLink',
        'rsa_previous_cert_ref': 'ResourceLink',
        'rsa_publish_x5c_parameter': 'bool',
        'p256_decryption_active_cert_ref': 'ResourceLink',
        'p256_decryption_previous_cert_ref': 'ResourceLink',
        'p256_decryption_publish_x5c_parameter': 'bool',
        'p384_decryption_active_cert_ref': 'ResourceLink',
        'p384_decryption_previous_cert_ref': 'ResourceLink',
        'p384_decryption_publish_x5c_parameter': 'bool',
        'p521_decryption_active_cert_ref': 'ResourceLink',
        'p521_decryption_previous_cert_ref': 'ResourceLink',
        'p521_decryption_publish_x5c_parameter': 'bool',
        'rsa_decryption_active_cert_ref': 'ResourceLink',
        'rsa_decryption_previous_cert_ref': 'ResourceLink',
        'rsa_decryption_publish_x5c_parameter': 'bool'
    }

    attribute_map = {
        'static_jwks_enabled': 'staticJwksEnabled',
        'p256_active_cert_ref': 'p256ActiveCertRef',
        'p256_previous_cert_ref': 'p256PreviousCertRef',
        'p256_publish_x5c_parameter': 'p256PublishX5cParameter',
        'p384_active_cert_ref': 'p384ActiveCertRef',
        'p384_previous_cert_ref': 'p384PreviousCertRef',
        'p384_publish_x5c_parameter': 'p384PublishX5cParameter',
        'p521_active_cert_ref': 'p521ActiveCertRef',
        'p521_previous_cert_ref': 'p521PreviousCertRef',
        'p521_publish_x5c_parameter': 'p521PublishX5cParameter',
        'rsa_active_cert_ref': 'rsaActiveCertRef',
        'rsa_previous_cert_ref': 'rsaPreviousCertRef',
        'rsa_publish_x5c_parameter': 'rsaPublishX5cParameter',
        'p256_decryption_active_cert_ref': 'p256DecryptionActiveCertRef',
        'p256_decryption_previous_cert_ref': 'p256DecryptionPreviousCertRef',
        'p256_decryption_publish_x5c_parameter': 'p256DecryptionPublishX5cParameter',
        'p384_decryption_active_cert_ref': 'p384DecryptionActiveCertRef',
        'p384_decryption_previous_cert_ref': 'p384DecryptionPreviousCertRef',
        'p384_decryption_publish_x5c_parameter': 'p384DecryptionPublishX5cParameter',
        'p521_decryption_active_cert_ref': 'p521DecryptionActiveCertRef',
        'p521_decryption_previous_cert_ref': 'p521DecryptionPreviousCertRef',
        'p521_decryption_publish_x5c_parameter': 'p521DecryptionPublishX5cParameter',
        'rsa_decryption_active_cert_ref': 'rsaDecryptionActiveCertRef',
        'rsa_decryption_previous_cert_ref': 'rsaDecryptionPreviousCertRef',
        'rsa_decryption_publish_x5c_parameter': 'rsaDecryptionPublishX5cParameter'
    }

    def __init__(self, static_jwks_enabled=None, p256_active_cert_ref=None, p256_previous_cert_ref=None, p256_publish_x5c_parameter=None, p384_active_cert_ref=None, p384_previous_cert_ref=None, p384_publish_x5c_parameter=None, p521_active_cert_ref=None, p521_previous_cert_ref=None, p521_publish_x5c_parameter=None, rsa_active_cert_ref=None, rsa_previous_cert_ref=None, rsa_publish_x5c_parameter=None, p256_decryption_active_cert_ref=None, p256_decryption_previous_cert_ref=None, p256_decryption_publish_x5c_parameter=None, p384_decryption_active_cert_ref=None, p384_decryption_previous_cert_ref=None, p384_decryption_publish_x5c_parameter=None, p521_decryption_active_cert_ref=None, p521_decryption_previous_cert_ref=None, p521_decryption_publish_x5c_parameter=None, rsa_decryption_active_cert_ref=None, rsa_decryption_previous_cert_ref=None, rsa_decryption_publish_x5c_parameter=None, _configuration=None):  # noqa: E501
        """OAuthOidcKeysSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._static_jwks_enabled = None
        self._p256_active_cert_ref = None
        self._p256_previous_cert_ref = None
        self._p256_publish_x5c_parameter = None
        self._p384_active_cert_ref = None
        self._p384_previous_cert_ref = None
        self._p384_publish_x5c_parameter = None
        self._p521_active_cert_ref = None
        self._p521_previous_cert_ref = None
        self._p521_publish_x5c_parameter = None
        self._rsa_active_cert_ref = None
        self._rsa_previous_cert_ref = None
        self._rsa_publish_x5c_parameter = None
        self._p256_decryption_active_cert_ref = None
        self._p256_decryption_previous_cert_ref = None
        self._p256_decryption_publish_x5c_parameter = None
        self._p384_decryption_active_cert_ref = None
        self._p384_decryption_previous_cert_ref = None
        self._p384_decryption_publish_x5c_parameter = None
        self._p521_decryption_active_cert_ref = None
        self._p521_decryption_previous_cert_ref = None
        self._p521_decryption_publish_x5c_parameter = None
        self._rsa_decryption_active_cert_ref = None
        self._rsa_decryption_previous_cert_ref = None
        self._rsa_decryption_publish_x5c_parameter = None
        self.discriminator = None

        self.static_jwks_enabled = static_jwks_enabled
        if p256_active_cert_ref is not None:
            self.p256_active_cert_ref = p256_active_cert_ref
        if p256_previous_cert_ref is not None:
            self.p256_previous_cert_ref = p256_previous_cert_ref
        if p256_publish_x5c_parameter is not None:
            self.p256_publish_x5c_parameter = p256_publish_x5c_parameter
        if p384_active_cert_ref is not None:
            self.p384_active_cert_ref = p384_active_cert_ref
        if p384_previous_cert_ref is not None:
            self.p384_previous_cert_ref = p384_previous_cert_ref
        if p384_publish_x5c_parameter is not None:
            self.p384_publish_x5c_parameter = p384_publish_x5c_parameter
        if p521_active_cert_ref is not None:
            self.p521_active_cert_ref = p521_active_cert_ref
        if p521_previous_cert_ref is not None:
            self.p521_previous_cert_ref = p521_previous_cert_ref
        if p521_publish_x5c_parameter is not None:
            self.p521_publish_x5c_parameter = p521_publish_x5c_parameter
        if rsa_active_cert_ref is not None:
            self.rsa_active_cert_ref = rsa_active_cert_ref
        if rsa_previous_cert_ref is not None:
            self.rsa_previous_cert_ref = rsa_previous_cert_ref
        if rsa_publish_x5c_parameter is not None:
            self.rsa_publish_x5c_parameter = rsa_publish_x5c_parameter
        if p256_decryption_active_cert_ref is not None:
            self.p256_decryption_active_cert_ref = p256_decryption_active_cert_ref
        if p256_decryption_previous_cert_ref is not None:
            self.p256_decryption_previous_cert_ref = p256_decryption_previous_cert_ref
        if p256_decryption_publish_x5c_parameter is not None:
            self.p256_decryption_publish_x5c_parameter = p256_decryption_publish_x5c_parameter
        if p384_decryption_active_cert_ref is not None:
            self.p384_decryption_active_cert_ref = p384_decryption_active_cert_ref
        if p384_decryption_previous_cert_ref is not None:
            self.p384_decryption_previous_cert_ref = p384_decryption_previous_cert_ref
        if p384_decryption_publish_x5c_parameter is not None:
            self.p384_decryption_publish_x5c_parameter = p384_decryption_publish_x5c_parameter
        if p521_decryption_active_cert_ref is not None:
            self.p521_decryption_active_cert_ref = p521_decryption_active_cert_ref
        if p521_decryption_previous_cert_ref is not None:
            self.p521_decryption_previous_cert_ref = p521_decryption_previous_cert_ref
        if p521_decryption_publish_x5c_parameter is not None:
            self.p521_decryption_publish_x5c_parameter = p521_decryption_publish_x5c_parameter
        if rsa_decryption_active_cert_ref is not None:
            self.rsa_decryption_active_cert_ref = rsa_decryption_active_cert_ref
        if rsa_decryption_previous_cert_ref is not None:
            self.rsa_decryption_previous_cert_ref = rsa_decryption_previous_cert_ref
        if rsa_decryption_publish_x5c_parameter is not None:
            self.rsa_decryption_publish_x5c_parameter = rsa_decryption_publish_x5c_parameter

    @property
    def static_jwks_enabled(self):
        """Gets the static_jwks_enabled of this OAuthOidcKeysSettings.  # noqa: E501

        Enable static keys.  # noqa: E501

        :return: The static_jwks_enabled of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: bool
        """
        return self._static_jwks_enabled

    @static_jwks_enabled.setter
    def static_jwks_enabled(self, static_jwks_enabled):
        """Sets the static_jwks_enabled of this OAuthOidcKeysSettings.

        Enable static keys.  # noqa: E501

        :param static_jwks_enabled: The static_jwks_enabled of this OAuthOidcKeysSettings.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and static_jwks_enabled is None:
            raise ValueError("Invalid value for `static_jwks_enabled`, must not be `None`")  # noqa: E501

        self._static_jwks_enabled = static_jwks_enabled

    @property
    def p256_active_cert_ref(self):
        """Gets the p256_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501

        Reference to the P-256 key currently active.  # noqa: E501

        :return: The p256_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._p256_active_cert_ref

    @p256_active_cert_ref.setter
    def p256_active_cert_ref(self, p256_active_cert_ref):
        """Sets the p256_active_cert_ref of this OAuthOidcKeysSettings.

        Reference to the P-256 key currently active.  # noqa: E501

        :param p256_active_cert_ref: The p256_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :type: ResourceLink
        """

        self._p256_active_cert_ref = p256_active_cert_ref

    @property
    def p256_previous_cert_ref(self):
        """Gets the p256_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501

        Reference to the P-256 key previously active.  # noqa: E501

        :return: The p256_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._p256_previous_cert_ref

    @p256_previous_cert_ref.setter
    def p256_previous_cert_ref(self, p256_previous_cert_ref):
        """Sets the p256_previous_cert_ref of this OAuthOidcKeysSettings.

        Reference to the P-256 key previously active.  # noqa: E501

        :param p256_previous_cert_ref: The p256_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :type: ResourceLink
        """

        self._p256_previous_cert_ref = p256_previous_cert_ref

    @property
    def p256_publish_x5c_parameter(self):
        """Gets the p256_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501

        Enable publishing of the P-256 certificate chain associated with the active key.  # noqa: E501

        :return: The p256_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: bool
        """
        return self._p256_publish_x5c_parameter

    @p256_publish_x5c_parameter.setter
    def p256_publish_x5c_parameter(self, p256_publish_x5c_parameter):
        """Sets the p256_publish_x5c_parameter of this OAuthOidcKeysSettings.

        Enable publishing of the P-256 certificate chain associated with the active key.  # noqa: E501

        :param p256_publish_x5c_parameter: The p256_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501
        :type: bool
        """

        self._p256_publish_x5c_parameter = p256_publish_x5c_parameter

    @property
    def p384_active_cert_ref(self):
        """Gets the p384_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501

        Reference to the P-384 key currently active.  # noqa: E501

        :return: The p384_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._p384_active_cert_ref

    @p384_active_cert_ref.setter
    def p384_active_cert_ref(self, p384_active_cert_ref):
        """Sets the p384_active_cert_ref of this OAuthOidcKeysSettings.

        Reference to the P-384 key currently active.  # noqa: E501

        :param p384_active_cert_ref: The p384_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :type: ResourceLink
        """

        self._p384_active_cert_ref = p384_active_cert_ref

    @property
    def p384_previous_cert_ref(self):
        """Gets the p384_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501

        Reference to the P-384 key previously active.  # noqa: E501

        :return: The p384_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._p384_previous_cert_ref

    @p384_previous_cert_ref.setter
    def p384_previous_cert_ref(self, p384_previous_cert_ref):
        """Sets the p384_previous_cert_ref of this OAuthOidcKeysSettings.

        Reference to the P-384 key previously active.  # noqa: E501

        :param p384_previous_cert_ref: The p384_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :type: ResourceLink
        """

        self._p384_previous_cert_ref = p384_previous_cert_ref

    @property
    def p384_publish_x5c_parameter(self):
        """Gets the p384_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501

        Enable publishing of the P-384 certificate chain associated with the active key.  # noqa: E501

        :return: The p384_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: bool
        """
        return self._p384_publish_x5c_parameter

    @p384_publish_x5c_parameter.setter
    def p384_publish_x5c_parameter(self, p384_publish_x5c_parameter):
        """Sets the p384_publish_x5c_parameter of this OAuthOidcKeysSettings.

        Enable publishing of the P-384 certificate chain associated with the active key.  # noqa: E501

        :param p384_publish_x5c_parameter: The p384_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501
        :type: bool
        """

        self._p384_publish_x5c_parameter = p384_publish_x5c_parameter

    @property
    def p521_active_cert_ref(self):
        """Gets the p521_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501

        Reference to the P-521 key currently active.  # noqa: E501

        :return: The p521_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._p521_active_cert_ref

    @p521_active_cert_ref.setter
    def p521_active_cert_ref(self, p521_active_cert_ref):
        """Sets the p521_active_cert_ref of this OAuthOidcKeysSettings.

        Reference to the P-521 key currently active.  # noqa: E501

        :param p521_active_cert_ref: The p521_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :type: ResourceLink
        """

        self._p521_active_cert_ref = p521_active_cert_ref

    @property
    def p521_previous_cert_ref(self):
        """Gets the p521_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501

        Reference to the P-521 key previously active.  # noqa: E501

        :return: The p521_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._p521_previous_cert_ref

    @p521_previous_cert_ref.setter
    def p521_previous_cert_ref(self, p521_previous_cert_ref):
        """Sets the p521_previous_cert_ref of this OAuthOidcKeysSettings.

        Reference to the P-521 key previously active.  # noqa: E501

        :param p521_previous_cert_ref: The p521_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :type: ResourceLink
        """

        self._p521_previous_cert_ref = p521_previous_cert_ref

    @property
    def p521_publish_x5c_parameter(self):
        """Gets the p521_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501

        Enable publishing of the P-521 certificate chain associated with the active key.  # noqa: E501

        :return: The p521_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: bool
        """
        return self._p521_publish_x5c_parameter

    @p521_publish_x5c_parameter.setter
    def p521_publish_x5c_parameter(self, p521_publish_x5c_parameter):
        """Sets the p521_publish_x5c_parameter of this OAuthOidcKeysSettings.

        Enable publishing of the P-521 certificate chain associated with the active key.  # noqa: E501

        :param p521_publish_x5c_parameter: The p521_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501
        :type: bool
        """

        self._p521_publish_x5c_parameter = p521_publish_x5c_parameter

    @property
    def rsa_active_cert_ref(self):
        """Gets the rsa_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501

        Reference to the RSA key currently active.  # noqa: E501

        :return: The rsa_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._rsa_active_cert_ref

    @rsa_active_cert_ref.setter
    def rsa_active_cert_ref(self, rsa_active_cert_ref):
        """Sets the rsa_active_cert_ref of this OAuthOidcKeysSettings.

        Reference to the RSA key currently active.  # noqa: E501

        :param rsa_active_cert_ref: The rsa_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :type: ResourceLink
        """

        self._rsa_active_cert_ref = rsa_active_cert_ref

    @property
    def rsa_previous_cert_ref(self):
        """Gets the rsa_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501

        Reference to the RSA key previously active.  # noqa: E501

        :return: The rsa_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._rsa_previous_cert_ref

    @rsa_previous_cert_ref.setter
    def rsa_previous_cert_ref(self, rsa_previous_cert_ref):
        """Sets the rsa_previous_cert_ref of this OAuthOidcKeysSettings.

        Reference to the RSA key previously active.  # noqa: E501

        :param rsa_previous_cert_ref: The rsa_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :type: ResourceLink
        """

        self._rsa_previous_cert_ref = rsa_previous_cert_ref

    @property
    def rsa_publish_x5c_parameter(self):
        """Gets the rsa_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501

        Enable publishing of the RSA certificate chain associated with the active key.  # noqa: E501

        :return: The rsa_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: bool
        """
        return self._rsa_publish_x5c_parameter

    @rsa_publish_x5c_parameter.setter
    def rsa_publish_x5c_parameter(self, rsa_publish_x5c_parameter):
        """Sets the rsa_publish_x5c_parameter of this OAuthOidcKeysSettings.

        Enable publishing of the RSA certificate chain associated with the active key.  # noqa: E501

        :param rsa_publish_x5c_parameter: The rsa_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501
        :type: bool
        """

        self._rsa_publish_x5c_parameter = rsa_publish_x5c_parameter

    @property
    def p256_decryption_active_cert_ref(self):
        """Gets the p256_decryption_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501

        Reference to the P-256 decryption key currently active.  # noqa: E501

        :return: The p256_decryption_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._p256_decryption_active_cert_ref

    @p256_decryption_active_cert_ref.setter
    def p256_decryption_active_cert_ref(self, p256_decryption_active_cert_ref):
        """Sets the p256_decryption_active_cert_ref of this OAuthOidcKeysSettings.

        Reference to the P-256 decryption key currently active.  # noqa: E501

        :param p256_decryption_active_cert_ref: The p256_decryption_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :type: ResourceLink
        """

        self._p256_decryption_active_cert_ref = p256_decryption_active_cert_ref

    @property
    def p256_decryption_previous_cert_ref(self):
        """Gets the p256_decryption_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501

        Reference to the P-256 decryption key previously active.  # noqa: E501

        :return: The p256_decryption_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._p256_decryption_previous_cert_ref

    @p256_decryption_previous_cert_ref.setter
    def p256_decryption_previous_cert_ref(self, p256_decryption_previous_cert_ref):
        """Sets the p256_decryption_previous_cert_ref of this OAuthOidcKeysSettings.

        Reference to the P-256 decryption key previously active.  # noqa: E501

        :param p256_decryption_previous_cert_ref: The p256_decryption_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :type: ResourceLink
        """

        self._p256_decryption_previous_cert_ref = p256_decryption_previous_cert_ref

    @property
    def p256_decryption_publish_x5c_parameter(self):
        """Gets the p256_decryption_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501

        Enable publishing of the P-256 certificate chain associated with the active key.  # noqa: E501

        :return: The p256_decryption_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: bool
        """
        return self._p256_decryption_publish_x5c_parameter

    @p256_decryption_publish_x5c_parameter.setter
    def p256_decryption_publish_x5c_parameter(self, p256_decryption_publish_x5c_parameter):
        """Sets the p256_decryption_publish_x5c_parameter of this OAuthOidcKeysSettings.

        Enable publishing of the P-256 certificate chain associated with the active key.  # noqa: E501

        :param p256_decryption_publish_x5c_parameter: The p256_decryption_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501
        :type: bool
        """

        self._p256_decryption_publish_x5c_parameter = p256_decryption_publish_x5c_parameter

    @property
    def p384_decryption_active_cert_ref(self):
        """Gets the p384_decryption_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501

        Reference to the P-384 decryption key currently active.  # noqa: E501

        :return: The p384_decryption_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._p384_decryption_active_cert_ref

    @p384_decryption_active_cert_ref.setter
    def p384_decryption_active_cert_ref(self, p384_decryption_active_cert_ref):
        """Sets the p384_decryption_active_cert_ref of this OAuthOidcKeysSettings.

        Reference to the P-384 decryption key currently active.  # noqa: E501

        :param p384_decryption_active_cert_ref: The p384_decryption_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :type: ResourceLink
        """

        self._p384_decryption_active_cert_ref = p384_decryption_active_cert_ref

    @property
    def p384_decryption_previous_cert_ref(self):
        """Gets the p384_decryption_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501

        Reference to the P-384 decryption key previously active.  # noqa: E501

        :return: The p384_decryption_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._p384_decryption_previous_cert_ref

    @p384_decryption_previous_cert_ref.setter
    def p384_decryption_previous_cert_ref(self, p384_decryption_previous_cert_ref):
        """Sets the p384_decryption_previous_cert_ref of this OAuthOidcKeysSettings.

        Reference to the P-384 decryption key previously active.  # noqa: E501

        :param p384_decryption_previous_cert_ref: The p384_decryption_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :type: ResourceLink
        """

        self._p384_decryption_previous_cert_ref = p384_decryption_previous_cert_ref

    @property
    def p384_decryption_publish_x5c_parameter(self):
        """Gets the p384_decryption_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501

        Enable publishing of the P-384 certificate chain associated with the active key.  # noqa: E501

        :return: The p384_decryption_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: bool
        """
        return self._p384_decryption_publish_x5c_parameter

    @p384_decryption_publish_x5c_parameter.setter
    def p384_decryption_publish_x5c_parameter(self, p384_decryption_publish_x5c_parameter):
        """Sets the p384_decryption_publish_x5c_parameter of this OAuthOidcKeysSettings.

        Enable publishing of the P-384 certificate chain associated with the active key.  # noqa: E501

        :param p384_decryption_publish_x5c_parameter: The p384_decryption_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501
        :type: bool
        """

        self._p384_decryption_publish_x5c_parameter = p384_decryption_publish_x5c_parameter

    @property
    def p521_decryption_active_cert_ref(self):
        """Gets the p521_decryption_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501

        Reference to the P-521 decryption key currently active.  # noqa: E501

        :return: The p521_decryption_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._p521_decryption_active_cert_ref

    @p521_decryption_active_cert_ref.setter
    def p521_decryption_active_cert_ref(self, p521_decryption_active_cert_ref):
        """Sets the p521_decryption_active_cert_ref of this OAuthOidcKeysSettings.

        Reference to the P-521 decryption key currently active.  # noqa: E501

        :param p521_decryption_active_cert_ref: The p521_decryption_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :type: ResourceLink
        """

        self._p521_decryption_active_cert_ref = p521_decryption_active_cert_ref

    @property
    def p521_decryption_previous_cert_ref(self):
        """Gets the p521_decryption_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501

        Reference to the P-521 decryption key previously active.  # noqa: E501

        :return: The p521_decryption_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._p521_decryption_previous_cert_ref

    @p521_decryption_previous_cert_ref.setter
    def p521_decryption_previous_cert_ref(self, p521_decryption_previous_cert_ref):
        """Sets the p521_decryption_previous_cert_ref of this OAuthOidcKeysSettings.

        Reference to the P-521 decryption key previously active.  # noqa: E501

        :param p521_decryption_previous_cert_ref: The p521_decryption_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :type: ResourceLink
        """

        self._p521_decryption_previous_cert_ref = p521_decryption_previous_cert_ref

    @property
    def p521_decryption_publish_x5c_parameter(self):
        """Gets the p521_decryption_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501

        Enable publishing of the P-521 certificate chain associated with the active key.  # noqa: E501

        :return: The p521_decryption_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: bool
        """
        return self._p521_decryption_publish_x5c_parameter

    @p521_decryption_publish_x5c_parameter.setter
    def p521_decryption_publish_x5c_parameter(self, p521_decryption_publish_x5c_parameter):
        """Sets the p521_decryption_publish_x5c_parameter of this OAuthOidcKeysSettings.

        Enable publishing of the P-521 certificate chain associated with the active key.  # noqa: E501

        :param p521_decryption_publish_x5c_parameter: The p521_decryption_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501
        :type: bool
        """

        self._p521_decryption_publish_x5c_parameter = p521_decryption_publish_x5c_parameter

    @property
    def rsa_decryption_active_cert_ref(self):
        """Gets the rsa_decryption_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501

        Reference to the RSA decryption key currently active.  # noqa: E501

        :return: The rsa_decryption_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._rsa_decryption_active_cert_ref

    @rsa_decryption_active_cert_ref.setter
    def rsa_decryption_active_cert_ref(self, rsa_decryption_active_cert_ref):
        """Sets the rsa_decryption_active_cert_ref of this OAuthOidcKeysSettings.

        Reference to the RSA decryption key currently active.  # noqa: E501

        :param rsa_decryption_active_cert_ref: The rsa_decryption_active_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :type: ResourceLink
        """

        self._rsa_decryption_active_cert_ref = rsa_decryption_active_cert_ref

    @property
    def rsa_decryption_previous_cert_ref(self):
        """Gets the rsa_decryption_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501

        Reference to the RSA decryption key previously active.  # noqa: E501

        :return: The rsa_decryption_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._rsa_decryption_previous_cert_ref

    @rsa_decryption_previous_cert_ref.setter
    def rsa_decryption_previous_cert_ref(self, rsa_decryption_previous_cert_ref):
        """Sets the rsa_decryption_previous_cert_ref of this OAuthOidcKeysSettings.

        Reference to the RSA decryption key previously active.  # noqa: E501

        :param rsa_decryption_previous_cert_ref: The rsa_decryption_previous_cert_ref of this OAuthOidcKeysSettings.  # noqa: E501
        :type: ResourceLink
        """

        self._rsa_decryption_previous_cert_ref = rsa_decryption_previous_cert_ref

    @property
    def rsa_decryption_publish_x5c_parameter(self):
        """Gets the rsa_decryption_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501

        Enable publishing of the RSA certificate chain associated with the active key.  # noqa: E501

        :return: The rsa_decryption_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501
        :rtype: bool
        """
        return self._rsa_decryption_publish_x5c_parameter

    @rsa_decryption_publish_x5c_parameter.setter
    def rsa_decryption_publish_x5c_parameter(self, rsa_decryption_publish_x5c_parameter):
        """Sets the rsa_decryption_publish_x5c_parameter of this OAuthOidcKeysSettings.

        Enable publishing of the RSA certificate chain associated with the active key.  # noqa: E501

        :param rsa_decryption_publish_x5c_parameter: The rsa_decryption_publish_x5c_parameter of this OAuthOidcKeysSettings.  # noqa: E501
        :type: bool
        """

        self._rsa_decryption_publish_x5c_parameter = rsa_decryption_publish_x5c_parameter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OAuthOidcKeysSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OAuthOidcKeysSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OAuthOidcKeysSettings):
            return True

        return self.to_dict() != other.to_dict()
