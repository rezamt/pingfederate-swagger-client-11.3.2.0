# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AccountManagementSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_status_attribute_name': 'str',
        'account_status_algorithm': 'str',
        'flag_comparison_value': 'str',
        'flag_comparison_status': 'bool',
        'default_status': 'bool'
    }

    attribute_map = {
        'account_status_attribute_name': 'accountStatusAttributeName',
        'account_status_algorithm': 'accountStatusAlgorithm',
        'flag_comparison_value': 'flagComparisonValue',
        'flag_comparison_status': 'flagComparisonStatus',
        'default_status': 'defaultStatus'
    }

    def __init__(self, account_status_attribute_name=None, account_status_algorithm=None, flag_comparison_value=None, flag_comparison_status=None, default_status=None, _configuration=None):  # noqa: E501
        """AccountManagementSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_status_attribute_name = None
        self._account_status_algorithm = None
        self._flag_comparison_value = None
        self._flag_comparison_status = None
        self._default_status = None
        self.discriminator = None

        self.account_status_attribute_name = account_status_attribute_name
        self.account_status_algorithm = account_status_algorithm
        if flag_comparison_value is not None:
            self.flag_comparison_value = flag_comparison_value
        if flag_comparison_status is not None:
            self.flag_comparison_status = flag_comparison_status
        if default_status is not None:
            self.default_status = default_status

    @property
    def account_status_attribute_name(self):
        """Gets the account_status_attribute_name of this AccountManagementSettings.  # noqa: E501

        The account status attribute name.  # noqa: E501

        :return: The account_status_attribute_name of this AccountManagementSettings.  # noqa: E501
        :rtype: str
        """
        return self._account_status_attribute_name

    @account_status_attribute_name.setter
    def account_status_attribute_name(self, account_status_attribute_name):
        """Sets the account_status_attribute_name of this AccountManagementSettings.

        The account status attribute name.  # noqa: E501

        :param account_status_attribute_name: The account_status_attribute_name of this AccountManagementSettings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and account_status_attribute_name is None:
            raise ValueError("Invalid value for `account_status_attribute_name`, must not be `None`")  # noqa: E501

        self._account_status_attribute_name = account_status_attribute_name

    @property
    def account_status_algorithm(self):
        """Gets the account_status_algorithm of this AccountManagementSettings.  # noqa: E501

        The account status algorithm name.  ACCOUNT_STATUS_ALGORITHM_AD -  Algorithm name for Active Directory, which uses a bitmap for each user entry.  ACCOUNT_STATUS_ALGORITHM_FLAG - Algorithm name for Oracle Directory Server and other LDAP directories that use a separate attribute to store the user's status. When this option is selected, the Flag Comparison Value and Flag Comparison Status fields should be used.  # noqa: E501

        :return: The account_status_algorithm of this AccountManagementSettings.  # noqa: E501
        :rtype: str
        """
        return self._account_status_algorithm

    @account_status_algorithm.setter
    def account_status_algorithm(self, account_status_algorithm):
        """Sets the account_status_algorithm of this AccountManagementSettings.

        The account status algorithm name.  ACCOUNT_STATUS_ALGORITHM_AD -  Algorithm name for Active Directory, which uses a bitmap for each user entry.  ACCOUNT_STATUS_ALGORITHM_FLAG - Algorithm name for Oracle Directory Server and other LDAP directories that use a separate attribute to store the user's status. When this option is selected, the Flag Comparison Value and Flag Comparison Status fields should be used.  # noqa: E501

        :param account_status_algorithm: The account_status_algorithm of this AccountManagementSettings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and account_status_algorithm is None:
            raise ValueError("Invalid value for `account_status_algorithm`, must not be `None`")  # noqa: E501
        allowed_values = ["ACCOUNT_STATUS_ALGORITHM_AD", "ACCOUNT_STATUS_ALGORITHM_FLAG"]  # noqa: E501
        if (self._configuration.client_side_validation and
                account_status_algorithm not in allowed_values):
            raise ValueError(
                "Invalid value for `account_status_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(account_status_algorithm, allowed_values)
            )

        self._account_status_algorithm = account_status_algorithm

    @property
    def flag_comparison_value(self):
        """Gets the flag_comparison_value of this AccountManagementSettings.  # noqa: E501

        The flag that represents comparison value.  # noqa: E501

        :return: The flag_comparison_value of this AccountManagementSettings.  # noqa: E501
        :rtype: str
        """
        return self._flag_comparison_value

    @flag_comparison_value.setter
    def flag_comparison_value(self, flag_comparison_value):
        """Sets the flag_comparison_value of this AccountManagementSettings.

        The flag that represents comparison value.  # noqa: E501

        :param flag_comparison_value: The flag_comparison_value of this AccountManagementSettings.  # noqa: E501
        :type: str
        """

        self._flag_comparison_value = flag_comparison_value

    @property
    def flag_comparison_status(self):
        """Gets the flag_comparison_status of this AccountManagementSettings.  # noqa: E501

        The flag that represents comparison status.  # noqa: E501

        :return: The flag_comparison_status of this AccountManagementSettings.  # noqa: E501
        :rtype: bool
        """
        return self._flag_comparison_status

    @flag_comparison_status.setter
    def flag_comparison_status(self, flag_comparison_status):
        """Sets the flag_comparison_status of this AccountManagementSettings.

        The flag that represents comparison status.  # noqa: E501

        :param flag_comparison_status: The flag_comparison_status of this AccountManagementSettings.  # noqa: E501
        :type: bool
        """

        self._flag_comparison_status = flag_comparison_status

    @property
    def default_status(self):
        """Gets the default_status of this AccountManagementSettings.  # noqa: E501

        The default status of the account.  # noqa: E501

        :return: The default_status of this AccountManagementSettings.  # noqa: E501
        :rtype: bool
        """
        return self._default_status

    @default_status.setter
    def default_status(self, default_status):
        """Sets the default_status of this AccountManagementSettings.

        The default status of the account.  # noqa: E501

        :param default_status: The default_status of this AccountManagementSettings.  # noqa: E501
        :type: bool
        """

        self._default_status = default_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountManagementSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountManagementSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountManagementSettings):
            return True

        return self.to_dict() != other.to_dict()
