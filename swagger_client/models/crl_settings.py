# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CrlSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'treat_non_retrievable_crl_as_revoked': 'bool',
        'verify_crl_signature': 'bool',
        'next_retry_mins_when_resolve_failed': 'int',
        'next_retry_mins_when_next_update_in_past': 'int'
    }

    attribute_map = {
        'treat_non_retrievable_crl_as_revoked': 'treatNonRetrievableCrlAsRevoked',
        'verify_crl_signature': 'verifyCrlSignature',
        'next_retry_mins_when_resolve_failed': 'nextRetryMinsWhenResolveFailed',
        'next_retry_mins_when_next_update_in_past': 'nextRetryMinsWhenNextUpdateInPast'
    }

    def __init__(self, treat_non_retrievable_crl_as_revoked=None, verify_crl_signature=None, next_retry_mins_when_resolve_failed=None, next_retry_mins_when_next_update_in_past=None, _configuration=None):  # noqa: E501
        """CrlSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._treat_non_retrievable_crl_as_revoked = None
        self._verify_crl_signature = None
        self._next_retry_mins_when_resolve_failed = None
        self._next_retry_mins_when_next_update_in_past = None
        self.discriminator = None

        if treat_non_retrievable_crl_as_revoked is not None:
            self.treat_non_retrievable_crl_as_revoked = treat_non_retrievable_crl_as_revoked
        if verify_crl_signature is not None:
            self.verify_crl_signature = verify_crl_signature
        if next_retry_mins_when_resolve_failed is not None:
            self.next_retry_mins_when_resolve_failed = next_retry_mins_when_resolve_failed
        if next_retry_mins_when_next_update_in_past is not None:
            self.next_retry_mins_when_next_update_in_past = next_retry_mins_when_next_update_in_past

    @property
    def treat_non_retrievable_crl_as_revoked(self):
        """Gets the treat_non_retrievable_crl_as_revoked of this CrlSettings.  # noqa: E501

        Treat non retrievable CRL as revoked. This setting defaults to disabled.  # noqa: E501

        :return: The treat_non_retrievable_crl_as_revoked of this CrlSettings.  # noqa: E501
        :rtype: bool
        """
        return self._treat_non_retrievable_crl_as_revoked

    @treat_non_retrievable_crl_as_revoked.setter
    def treat_non_retrievable_crl_as_revoked(self, treat_non_retrievable_crl_as_revoked):
        """Sets the treat_non_retrievable_crl_as_revoked of this CrlSettings.

        Treat non retrievable CRL as revoked. This setting defaults to disabled.  # noqa: E501

        :param treat_non_retrievable_crl_as_revoked: The treat_non_retrievable_crl_as_revoked of this CrlSettings.  # noqa: E501
        :type: bool
        """

        self._treat_non_retrievable_crl_as_revoked = treat_non_retrievable_crl_as_revoked

    @property
    def verify_crl_signature(self):
        """Gets the verify_crl_signature of this CrlSettings.  # noqa: E501

        Verify CRL signature. This setting defaults to enabled.  # noqa: E501

        :return: The verify_crl_signature of this CrlSettings.  # noqa: E501
        :rtype: bool
        """
        return self._verify_crl_signature

    @verify_crl_signature.setter
    def verify_crl_signature(self, verify_crl_signature):
        """Sets the verify_crl_signature of this CrlSettings.

        Verify CRL signature. This setting defaults to enabled.  # noqa: E501

        :param verify_crl_signature: The verify_crl_signature of this CrlSettings.  # noqa: E501
        :type: bool
        """

        self._verify_crl_signature = verify_crl_signature

    @property
    def next_retry_mins_when_resolve_failed(self):
        """Gets the next_retry_mins_when_resolve_failed of this CrlSettings.  # noqa: E501

        Next retry on resolution failure in minutes. This value defaults to \"1440\".  # noqa: E501

        :return: The next_retry_mins_when_resolve_failed of this CrlSettings.  # noqa: E501
        :rtype: int
        """
        return self._next_retry_mins_when_resolve_failed

    @next_retry_mins_when_resolve_failed.setter
    def next_retry_mins_when_resolve_failed(self, next_retry_mins_when_resolve_failed):
        """Sets the next_retry_mins_when_resolve_failed of this CrlSettings.

        Next retry on resolution failure in minutes. This value defaults to \"1440\".  # noqa: E501

        :param next_retry_mins_when_resolve_failed: The next_retry_mins_when_resolve_failed of this CrlSettings.  # noqa: E501
        :type: int
        """

        self._next_retry_mins_when_resolve_failed = next_retry_mins_when_resolve_failed

    @property
    def next_retry_mins_when_next_update_in_past(self):
        """Gets the next_retry_mins_when_next_update_in_past of this CrlSettings.  # noqa: E501

        Next retry on next update expiration in minutes. This value defaults to \"60\".  # noqa: E501

        :return: The next_retry_mins_when_next_update_in_past of this CrlSettings.  # noqa: E501
        :rtype: int
        """
        return self._next_retry_mins_when_next_update_in_past

    @next_retry_mins_when_next_update_in_past.setter
    def next_retry_mins_when_next_update_in_past(self, next_retry_mins_when_next_update_in_past):
        """Sets the next_retry_mins_when_next_update_in_past of this CrlSettings.

        Next retry on next update expiration in minutes. This value defaults to \"60\".  # noqa: E501

        :param next_retry_mins_when_next_update_in_past: The next_retry_mins_when_next_update_in_past of this CrlSettings.  # noqa: E501
        :type: int
        """

        self._next_retry_mins_when_next_update_in_past = next_retry_mins_when_next_update_in_past

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CrlSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrlSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CrlSettings):
            return True

        return self.to_dict() != other.to_dict()
