# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class JdbcAttributeSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schema': 'str',
        'table': 'str',
        'column_names': 'list[str]',
        'filter': 'str'
    }

    attribute_map = {
        'schema': 'schema',
        'table': 'table',
        'column_names': 'columnNames',
        'filter': 'filter'
    }

    def __init__(self, schema=None, table=None, column_names=None, filter=None, _configuration=None):  # noqa: E501
        """JdbcAttributeSource - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._schema = None
        self._table = None
        self._column_names = None
        self._filter = None
        self.discriminator = None

        if schema is not None:
            self.schema = schema
        self.table = table
        if column_names is not None:
            self.column_names = column_names
        self.filter = filter

    @property
    def schema(self):
        """Gets the schema of this JdbcAttributeSource.  # noqa: E501

        Lists the table structure that stores information within a database. Some databases, such as Oracle, require a schema for a JDBC query. Other databases, such as MySQL, do not require a schema.  # noqa: E501

        :return: The schema of this JdbcAttributeSource.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this JdbcAttributeSource.

        Lists the table structure that stores information within a database. Some databases, such as Oracle, require a schema for a JDBC query. Other databases, such as MySQL, do not require a schema.  # noqa: E501

        :param schema: The schema of this JdbcAttributeSource.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def table(self):
        """Gets the table of this JdbcAttributeSource.  # noqa: E501

        The name of the database table. The name is used to construct the SQL query to retrieve data from the data store.  # noqa: E501

        :return: The table of this JdbcAttributeSource.  # noqa: E501
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this JdbcAttributeSource.

        The name of the database table. The name is used to construct the SQL query to retrieve data from the data store.  # noqa: E501

        :param table: The table of this JdbcAttributeSource.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and table is None:
            raise ValueError("Invalid value for `table`, must not be `None`")  # noqa: E501

        self._table = table

    @property
    def column_names(self):
        """Gets the column_names of this JdbcAttributeSource.  # noqa: E501

        A list of column names used to construct the SQL query to retrieve data from the specified table in the datastore.  # noqa: E501

        :return: The column_names of this JdbcAttributeSource.  # noqa: E501
        :rtype: list[str]
        """
        return self._column_names

    @column_names.setter
    def column_names(self, column_names):
        """Sets the column_names of this JdbcAttributeSource.

        A list of column names used to construct the SQL query to retrieve data from the specified table in the datastore.  # noqa: E501

        :param column_names: The column_names of this JdbcAttributeSource.  # noqa: E501
        :type: list[str]
        """

        self._column_names = column_names

    @property
    def filter(self):
        """Gets the filter of this JdbcAttributeSource.  # noqa: E501

        The JDBC WHERE clause used to query your data store to locate a user record.  # noqa: E501

        :return: The filter of this JdbcAttributeSource.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this JdbcAttributeSource.

        The JDBC WHERE clause used to query your data store to locate a user record.  # noqa: E501

        :param filter: The filter of this JdbcAttributeSource.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and filter is None:
            raise ValueError("Invalid value for `filter`, must not be `None`")  # noqa: E501

        self._filter = filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JdbcAttributeSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JdbcAttributeSource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JdbcAttributeSource):
            return True

        return self.to_dict() != other.to_dict()
