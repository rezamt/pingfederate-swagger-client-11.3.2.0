# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PingOneForEnterpriseSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connected_to_ping_one_for_enterprise': 'bool',
        'ping_one_sso_connection': 'ResourceLink',
        'company_name': 'str',
        'enable_admin_console_sso': 'bool',
        'enable_monitoring': 'bool',
        'current_authn_key_creation_time': 'datetime',
        'previous_authn_key_creation_time': 'datetime',
        'identity_repository_update_required': 'bool'
    }

    attribute_map = {
        'connected_to_ping_one_for_enterprise': 'connectedToPingOneForEnterprise',
        'ping_one_sso_connection': 'pingOneSsoConnection',
        'company_name': 'companyName',
        'enable_admin_console_sso': 'enableAdminConsoleSso',
        'enable_monitoring': 'enableMonitoring',
        'current_authn_key_creation_time': 'currentAuthnKeyCreationTime',
        'previous_authn_key_creation_time': 'previousAuthnKeyCreationTime',
        'identity_repository_update_required': 'identityRepositoryUpdateRequired'
    }

    def __init__(self, connected_to_ping_one_for_enterprise=None, ping_one_sso_connection=None, company_name=None, enable_admin_console_sso=None, enable_monitoring=None, current_authn_key_creation_time=None, previous_authn_key_creation_time=None, identity_repository_update_required=None, _configuration=None):  # noqa: E501
        """PingOneForEnterpriseSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._connected_to_ping_one_for_enterprise = None
        self._ping_one_sso_connection = None
        self._company_name = None
        self._enable_admin_console_sso = None
        self._enable_monitoring = None
        self._current_authn_key_creation_time = None
        self._previous_authn_key_creation_time = None
        self._identity_repository_update_required = None
        self.discriminator = None

        if connected_to_ping_one_for_enterprise is not None:
            self.connected_to_ping_one_for_enterprise = connected_to_ping_one_for_enterprise
        if ping_one_sso_connection is not None:
            self.ping_one_sso_connection = ping_one_sso_connection
        if company_name is not None:
            self.company_name = company_name
        if enable_admin_console_sso is not None:
            self.enable_admin_console_sso = enable_admin_console_sso
        if enable_monitoring is not None:
            self.enable_monitoring = enable_monitoring
        if current_authn_key_creation_time is not None:
            self.current_authn_key_creation_time = current_authn_key_creation_time
        if previous_authn_key_creation_time is not None:
            self.previous_authn_key_creation_time = previous_authn_key_creation_time
        if identity_repository_update_required is not None:
            self.identity_repository_update_required = identity_repository_update_required

    @property
    def connected_to_ping_one_for_enterprise(self):
        """Gets the connected_to_ping_one_for_enterprise of this PingOneForEnterpriseSettings.  # noqa: E501

        A read only field indicating whether PingFederate is connected to PingOne for Enterprise.  # noqa: E501

        :return: The connected_to_ping_one_for_enterprise of this PingOneForEnterpriseSettings.  # noqa: E501
        :rtype: bool
        """
        return self._connected_to_ping_one_for_enterprise

    @connected_to_ping_one_for_enterprise.setter
    def connected_to_ping_one_for_enterprise(self, connected_to_ping_one_for_enterprise):
        """Sets the connected_to_ping_one_for_enterprise of this PingOneForEnterpriseSettings.

        A read only field indicating whether PingFederate is connected to PingOne for Enterprise.  # noqa: E501

        :param connected_to_ping_one_for_enterprise: The connected_to_ping_one_for_enterprise of this PingOneForEnterpriseSettings.  # noqa: E501
        :type: bool
        """

        self._connected_to_ping_one_for_enterprise = connected_to_ping_one_for_enterprise

    @property
    def ping_one_sso_connection(self):
        """Gets the ping_one_sso_connection of this PingOneForEnterpriseSettings.  # noqa: E501

        A read only reference to the SP connection configured for PingOne SSO.  # noqa: E501

        :return: The ping_one_sso_connection of this PingOneForEnterpriseSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._ping_one_sso_connection

    @ping_one_sso_connection.setter
    def ping_one_sso_connection(self, ping_one_sso_connection):
        """Sets the ping_one_sso_connection of this PingOneForEnterpriseSettings.

        A read only reference to the SP connection configured for PingOne SSO.  # noqa: E501

        :param ping_one_sso_connection: The ping_one_sso_connection of this PingOneForEnterpriseSettings.  # noqa: E501
        :type: ResourceLink
        """

        self._ping_one_sso_connection = ping_one_sso_connection

    @property
    def company_name(self):
        """Gets the company_name of this PingOneForEnterpriseSettings.  # noqa: E501

        A read only field indicating the company name.  # noqa: E501

        :return: The company_name of this PingOneForEnterpriseSettings.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this PingOneForEnterpriseSettings.

        A read only field indicating the company name.  # noqa: E501

        :param company_name: The company_name of this PingOneForEnterpriseSettings.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def enable_admin_console_sso(self):
        """Gets the enable_admin_console_sso of this PingOneForEnterpriseSettings.  # noqa: E501

        Indicates whether single sign on from PingOne for Enterprise to the PingFederate admin console is enabled. The default is false.  # noqa: E501

        :return: The enable_admin_console_sso of this PingOneForEnterpriseSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_admin_console_sso

    @enable_admin_console_sso.setter
    def enable_admin_console_sso(self, enable_admin_console_sso):
        """Sets the enable_admin_console_sso of this PingOneForEnterpriseSettings.

        Indicates whether single sign on from PingOne for Enterprise to the PingFederate admin console is enabled. The default is false.  # noqa: E501

        :param enable_admin_console_sso: The enable_admin_console_sso of this PingOneForEnterpriseSettings.  # noqa: E501
        :type: bool
        """

        self._enable_admin_console_sso = enable_admin_console_sso

    @property
    def enable_monitoring(self):
        """Gets the enable_monitoring of this PingOneForEnterpriseSettings.  # noqa: E501

        Indicates whether monitoring of PingFederate from PingOne for Enterprise is enabled. The default is true.  # noqa: E501

        :return: The enable_monitoring of this PingOneForEnterpriseSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_monitoring

    @enable_monitoring.setter
    def enable_monitoring(self, enable_monitoring):
        """Sets the enable_monitoring of this PingOneForEnterpriseSettings.

        Indicates whether monitoring of PingFederate from PingOne for Enterprise is enabled. The default is true.  # noqa: E501

        :param enable_monitoring: The enable_monitoring of this PingOneForEnterpriseSettings.  # noqa: E501
        :type: bool
        """

        self._enable_monitoring = enable_monitoring

    @property
    def current_authn_key_creation_time(self):
        """Gets the current_authn_key_creation_time of this PingOneForEnterpriseSettings.  # noqa: E501

        A read only field indicating the creation time of the current authentication key.  # noqa: E501

        :return: The current_authn_key_creation_time of this PingOneForEnterpriseSettings.  # noqa: E501
        :rtype: datetime
        """
        return self._current_authn_key_creation_time

    @current_authn_key_creation_time.setter
    def current_authn_key_creation_time(self, current_authn_key_creation_time):
        """Sets the current_authn_key_creation_time of this PingOneForEnterpriseSettings.

        A read only field indicating the creation time of the current authentication key.  # noqa: E501

        :param current_authn_key_creation_time: The current_authn_key_creation_time of this PingOneForEnterpriseSettings.  # noqa: E501
        :type: datetime
        """

        self._current_authn_key_creation_time = current_authn_key_creation_time

    @property
    def previous_authn_key_creation_time(self):
        """Gets the previous_authn_key_creation_time of this PingOneForEnterpriseSettings.  # noqa: E501

        A read only field indicating the creation time of the previous authentication key.  # noqa: E501

        :return: The previous_authn_key_creation_time of this PingOneForEnterpriseSettings.  # noqa: E501
        :rtype: datetime
        """
        return self._previous_authn_key_creation_time

    @previous_authn_key_creation_time.setter
    def previous_authn_key_creation_time(self, previous_authn_key_creation_time):
        """Sets the previous_authn_key_creation_time of this PingOneForEnterpriseSettings.

        A read only field indicating the creation time of the previous authentication key.  # noqa: E501

        :param previous_authn_key_creation_time: The previous_authn_key_creation_time of this PingOneForEnterpriseSettings.  # noqa: E501
        :type: datetime
        """

        self._previous_authn_key_creation_time = previous_authn_key_creation_time

    @property
    def identity_repository_update_required(self):
        """Gets the identity_repository_update_required of this PingOneForEnterpriseSettings.  # noqa: E501

        A read-only field indicating whether changes were made in the current PingFederate configuration that might affect your connection with PingOne for Enterprise. For example, if you modified the attribute contract of your SSO configuration. Update the identity repository to keep your PingFederate and PingOne for Enterprise settings synchronized.   # noqa: E501

        :return: The identity_repository_update_required of this PingOneForEnterpriseSettings.  # noqa: E501
        :rtype: bool
        """
        return self._identity_repository_update_required

    @identity_repository_update_required.setter
    def identity_repository_update_required(self, identity_repository_update_required):
        """Sets the identity_repository_update_required of this PingOneForEnterpriseSettings.

        A read-only field indicating whether changes were made in the current PingFederate configuration that might affect your connection with PingOne for Enterprise. For example, if you modified the attribute contract of your SSO configuration. Update the identity repository to keep your PingFederate and PingOne for Enterprise settings synchronized.   # noqa: E501

        :param identity_repository_update_required: The identity_repository_update_required of this PingOneForEnterpriseSettings.  # noqa: E501
        :type: bool
        """

        self._identity_repository_update_required = identity_repository_update_required

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PingOneForEnterpriseSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PingOneForEnterpriseSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PingOneForEnterpriseSettings):
            return True

        return self.to_dict() != other.to_dict()
