# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AuthenticationPolicyFragment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'root_node': 'AuthenticationPolicyTreeNode',
        'inputs': 'ResourceLink',
        'outputs': 'ResourceLink'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'root_node': 'rootNode',
        'inputs': 'inputs',
        'outputs': 'outputs'
    }

    def __init__(self, id=None, name=None, description=None, root_node=None, inputs=None, outputs=None, _configuration=None):  # noqa: E501
        """AuthenticationPolicyFragment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._root_node = None
        self._inputs = None
        self._outputs = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if root_node is not None:
            self.root_node = root_node
        if inputs is not None:
            self.inputs = inputs
        if outputs is not None:
            self.outputs = outputs

    @property
    def id(self):
        """Gets the id of this AuthenticationPolicyFragment.  # noqa: E501

        The authentication policy fragment ID. ID is unique.  # noqa: E501

        :return: The id of this AuthenticationPolicyFragment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthenticationPolicyFragment.

        The authentication policy fragment ID. ID is unique.  # noqa: E501

        :param id: The id of this AuthenticationPolicyFragment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AuthenticationPolicyFragment.  # noqa: E501

        The authentication policy fragment name. Name is unique.  # noqa: E501

        :return: The name of this AuthenticationPolicyFragment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuthenticationPolicyFragment.

        The authentication policy fragment name. Name is unique.  # noqa: E501

        :param name: The name of this AuthenticationPolicyFragment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AuthenticationPolicyFragment.  # noqa: E501

        A description for the authentication policy fragment.  # noqa: E501

        :return: The description of this AuthenticationPolicyFragment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AuthenticationPolicyFragment.

        A description for the authentication policy fragment.  # noqa: E501

        :param description: The description of this AuthenticationPolicyFragment.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def root_node(self):
        """Gets the root_node of this AuthenticationPolicyFragment.  # noqa: E501

        The beginning action for the authentication fragment policy.  # noqa: E501

        :return: The root_node of this AuthenticationPolicyFragment.  # noqa: E501
        :rtype: AuthenticationPolicyTreeNode
        """
        return self._root_node

    @root_node.setter
    def root_node(self, root_node):
        """Sets the root_node of this AuthenticationPolicyFragment.

        The beginning action for the authentication fragment policy.  # noqa: E501

        :param root_node: The root_node of this AuthenticationPolicyFragment.  # noqa: E501
        :type: AuthenticationPolicyTreeNode
        """

        self._root_node = root_node

    @property
    def inputs(self):
        """Gets the inputs of this AuthenticationPolicyFragment.  # noqa: E501

        The reference to the authentication policy contract to use as the attribute inputs for this authentication policy fragment.  # noqa: E501

        :return: The inputs of this AuthenticationPolicyFragment.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this AuthenticationPolicyFragment.

        The reference to the authentication policy contract to use as the attribute inputs for this authentication policy fragment.  # noqa: E501

        :param inputs: The inputs of this AuthenticationPolicyFragment.  # noqa: E501
        :type: ResourceLink
        """

        self._inputs = inputs

    @property
    def outputs(self):
        """Gets the outputs of this AuthenticationPolicyFragment.  # noqa: E501

        The reference to the authentication policy contract to use as the attribute outputs for this authentication policy fragment.  # noqa: E501

        :return: The outputs of this AuthenticationPolicyFragment.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this AuthenticationPolicyFragment.

        The reference to the authentication policy contract to use as the attribute outputs for this authentication policy fragment.  # noqa: E501

        :param outputs: The outputs of this AuthenticationPolicyFragment.  # noqa: E501
        :type: ResourceLink
        """

        self._outputs = outputs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthenticationPolicyFragment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthenticationPolicyFragment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthenticationPolicyFragment):
            return True

        return self.to_dict() != other.to_dict()
