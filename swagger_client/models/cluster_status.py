# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ClusterStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nodes': 'list[ClusterNode]',
        'last_config_update_time': 'datetime',
        'last_replication_time': 'datetime',
        'replication_required': 'bool',
        'mixed_mode': 'bool'
    }

    attribute_map = {
        'nodes': 'nodes',
        'last_config_update_time': 'lastConfigUpdateTime',
        'last_replication_time': 'lastReplicationTime',
        'replication_required': 'replicationRequired',
        'mixed_mode': 'mixedMode'
    }

    def __init__(self, nodes=None, last_config_update_time=None, last_replication_time=None, replication_required=None, mixed_mode=None, _configuration=None):  # noqa: E501
        """ClusterStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._nodes = None
        self._last_config_update_time = None
        self._last_replication_time = None
        self._replication_required = None
        self._mixed_mode = None
        self.discriminator = None

        if nodes is not None:
            self.nodes = nodes
        if last_config_update_time is not None:
            self.last_config_update_time = last_config_update_time
        if last_replication_time is not None:
            self.last_replication_time = last_replication_time
        if replication_required is not None:
            self.replication_required = replication_required
        if mixed_mode is not None:
            self.mixed_mode = mixed_mode

    @property
    def nodes(self):
        """Gets the nodes of this ClusterStatus.  # noqa: E501

        List of nodes in the cluster.  # noqa: E501

        :return: The nodes of this ClusterStatus.  # noqa: E501
        :rtype: list[ClusterNode]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this ClusterStatus.

        List of nodes in the cluster.  # noqa: E501

        :param nodes: The nodes of this ClusterStatus.  # noqa: E501
        :type: list[ClusterNode]
        """

        self._nodes = nodes

    @property
    def last_config_update_time(self):
        """Gets the last_config_update_time of this ClusterStatus.  # noqa: E501

        Time when the configuration of this node was last updated.  # noqa: E501

        :return: The last_config_update_time of this ClusterStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._last_config_update_time

    @last_config_update_time.setter
    def last_config_update_time(self, last_config_update_time):
        """Sets the last_config_update_time of this ClusterStatus.

        Time when the configuration of this node was last updated.  # noqa: E501

        :param last_config_update_time: The last_config_update_time of this ClusterStatus.  # noqa: E501
        :type: datetime
        """

        self._last_config_update_time = last_config_update_time

    @property
    def last_replication_time(self):
        """Gets the last_replication_time of this ClusterStatus.  # noqa: E501

        Time when configuration changes were last replicated.  # noqa: E501

        :return: The last_replication_time of this ClusterStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._last_replication_time

    @last_replication_time.setter
    def last_replication_time(self, last_replication_time):
        """Sets the last_replication_time of this ClusterStatus.

        Time when configuration changes were last replicated.  # noqa: E501

        :param last_replication_time: The last_replication_time of this ClusterStatus.  # noqa: E501
        :type: datetime
        """

        self._last_replication_time = last_replication_time

    @property
    def replication_required(self):
        """Gets the replication_required of this ClusterStatus.  # noqa: E501

        Indicates whether a replication is required to propagate config updates.  # noqa: E501

        :return: The replication_required of this ClusterStatus.  # noqa: E501
        :rtype: bool
        """
        return self._replication_required

    @replication_required.setter
    def replication_required(self, replication_required):
        """Sets the replication_required of this ClusterStatus.

        Indicates whether a replication is required to propagate config updates.  # noqa: E501

        :param replication_required: The replication_required of this ClusterStatus.  # noqa: E501
        :type: bool
        """

        self._replication_required = replication_required

    @property
    def mixed_mode(self):
        """Gets the mixed_mode of this ClusterStatus.  # noqa: E501

        Indicates whether there is more than one version of PingFederate in the cluster.  # noqa: E501

        :return: The mixed_mode of this ClusterStatus.  # noqa: E501
        :rtype: bool
        """
        return self._mixed_mode

    @mixed_mode.setter
    def mixed_mode(self, mixed_mode):
        """Sets the mixed_mode of this ClusterStatus.

        Indicates whether there is more than one version of PingFederate in the cluster.  # noqa: E501

        :param mixed_mode: The mixed_mode of this ClusterStatus.  # noqa: E501
        :type: bool
        """

        self._mixed_mode = mixed_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClusterStatus):
            return True

        return self.to_dict() != other.to_dict()
