# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IdpRole(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable': 'bool',
        'saml20_profile': 'SAML20Profile',
        'enable_outbound_provisioning': 'bool'
    }

    attribute_map = {
        'enable': 'enable',
        'saml20_profile': 'saml20Profile',
        'enable_outbound_provisioning': 'enableOutboundProvisioning'
    }

    def __init__(self, enable=None, saml20_profile=None, enable_outbound_provisioning=None, _configuration=None):  # noqa: E501
        """IdpRole - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enable = None
        self._saml20_profile = None
        self._enable_outbound_provisioning = None
        self.discriminator = None

        if enable is not None:
            self.enable = enable
        if saml20_profile is not None:
            self.saml20_profile = saml20_profile
        if enable_outbound_provisioning is not None:
            self.enable_outbound_provisioning = enable_outbound_provisioning

    @property
    def enable(self):
        """Gets the enable of this IdpRole.  # noqa: E501

        Enable Identity Provider Role.  # noqa: E501

        :return: The enable of this IdpRole.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this IdpRole.

        Enable Identity Provider Role.  # noqa: E501

        :param enable: The enable of this IdpRole.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def saml20_profile(self):
        """Gets the saml20_profile of this IdpRole.  # noqa: E501

        SAML 2.0 Profile settings.  # noqa: E501

        :return: The saml20_profile of this IdpRole.  # noqa: E501
        :rtype: SAML20Profile
        """
        return self._saml20_profile

    @saml20_profile.setter
    def saml20_profile(self, saml20_profile):
        """Sets the saml20_profile of this IdpRole.

        SAML 2.0 Profile settings.  # noqa: E501

        :param saml20_profile: The saml20_profile of this IdpRole.  # noqa: E501
        :type: SAML20Profile
        """

        self._saml20_profile = saml20_profile

    @property
    def enable_outbound_provisioning(self):
        """Gets the enable_outbound_provisioning of this IdpRole.  # noqa: E501

        Enable Outbound Provisioning.  # noqa: E501

        :return: The enable_outbound_provisioning of this IdpRole.  # noqa: E501
        :rtype: bool
        """
        return self._enable_outbound_provisioning

    @enable_outbound_provisioning.setter
    def enable_outbound_provisioning(self, enable_outbound_provisioning):
        """Sets the enable_outbound_provisioning of this IdpRole.

        Enable Outbound Provisioning.  # noqa: E501

        :param enable_outbound_provisioning: The enable_outbound_provisioning of this IdpRole.  # noqa: E501
        :type: bool
        """

        self._enable_outbound_provisioning = enable_outbound_provisioning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdpRole, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdpRole):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IdpRole):
            return True

        return self.to_dict() != other.to_dict()
