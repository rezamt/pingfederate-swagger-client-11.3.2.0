# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CustomDataStore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'mask_attribute_values': 'bool',
        'name': 'str',
        'plugin_descriptor_ref': 'ResourceLink',
        'parent_ref': 'ResourceLink',
        'configuration': 'PluginConfiguration'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'mask_attribute_values': 'maskAttributeValues',
        'name': 'name',
        'plugin_descriptor_ref': 'pluginDescriptorRef',
        'parent_ref': 'parentRef',
        'configuration': 'configuration'
    }

    def __init__(self, type=None, id=None, mask_attribute_values=None, name=None, plugin_descriptor_ref=None, parent_ref=None, configuration=None, _configuration=None):  # noqa: E501
        """CustomDataStore - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._id = None
        self._mask_attribute_values = None
        self._name = None
        self._plugin_descriptor_ref = None
        self._parent_ref = None
        self._configuration = None
        self.discriminator = None

        self.type = type
        if id is not None:
            self.id = id
        if mask_attribute_values is not None:
            self.mask_attribute_values = mask_attribute_values
        self.name = name
        self.plugin_descriptor_ref = plugin_descriptor_ref
        if parent_ref is not None:
            self.parent_ref = parent_ref
        self.configuration = configuration

    @property
    def type(self):
        """Gets the type of this CustomDataStore.  # noqa: E501

        The data store type.  # noqa: E501

        :return: The type of this CustomDataStore.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomDataStore.

        The data store type.  # noqa: E501

        :param type: The type of this CustomDataStore.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["LDAP", "PING_ONE_LDAP_GATEWAY", "JDBC", "CUSTOM"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this CustomDataStore.  # noqa: E501

        The persistent, unique ID for the data store. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified.  # noqa: E501

        :return: The id of this CustomDataStore.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomDataStore.

        The persistent, unique ID for the data store. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified.  # noqa: E501

        :param id: The id of this CustomDataStore.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def mask_attribute_values(self):
        """Gets the mask_attribute_values of this CustomDataStore.  # noqa: E501

        Whether attribute values should be masked in the log.  # noqa: E501

        :return: The mask_attribute_values of this CustomDataStore.  # noqa: E501
        :rtype: bool
        """
        return self._mask_attribute_values

    @mask_attribute_values.setter
    def mask_attribute_values(self, mask_attribute_values):
        """Sets the mask_attribute_values of this CustomDataStore.

        Whether attribute values should be masked in the log.  # noqa: E501

        :param mask_attribute_values: The mask_attribute_values of this CustomDataStore.  # noqa: E501
        :type: bool
        """

        self._mask_attribute_values = mask_attribute_values

    @property
    def name(self):
        """Gets the name of this CustomDataStore.  # noqa: E501

        The plugin instance name.  # noqa: E501

        :return: The name of this CustomDataStore.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomDataStore.

        The plugin instance name.  # noqa: E501

        :param name: The name of this CustomDataStore.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def plugin_descriptor_ref(self):
        """Gets the plugin_descriptor_ref of this CustomDataStore.  # noqa: E501

        Reference to the plugin descriptor for this instance. The plugin descriptor cannot be modified once the instance is created.<br>Note: Ignored when specifying a connection's adapter override.  # noqa: E501

        :return: The plugin_descriptor_ref of this CustomDataStore.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._plugin_descriptor_ref

    @plugin_descriptor_ref.setter
    def plugin_descriptor_ref(self, plugin_descriptor_ref):
        """Sets the plugin_descriptor_ref of this CustomDataStore.

        Reference to the plugin descriptor for this instance. The plugin descriptor cannot be modified once the instance is created.<br>Note: Ignored when specifying a connection's adapter override.  # noqa: E501

        :param plugin_descriptor_ref: The plugin_descriptor_ref of this CustomDataStore.  # noqa: E501
        :type: ResourceLink
        """
        if self._configuration.client_side_validation and plugin_descriptor_ref is None:
            raise ValueError("Invalid value for `plugin_descriptor_ref`, must not be `None`")  # noqa: E501

        self._plugin_descriptor_ref = plugin_descriptor_ref

    @property
    def parent_ref(self):
        """Gets the parent_ref of this CustomDataStore.  # noqa: E501

        The reference to this plugin's parent instance. The parent reference is only accepted if the plugin type supports parent instances.<br>Note: This parent reference is required if this plugin instance is used as an overriding plugin (e.g. connection adapter overrides)  # noqa: E501

        :return: The parent_ref of this CustomDataStore.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._parent_ref

    @parent_ref.setter
    def parent_ref(self, parent_ref):
        """Sets the parent_ref of this CustomDataStore.

        The reference to this plugin's parent instance. The parent reference is only accepted if the plugin type supports parent instances.<br>Note: This parent reference is required if this plugin instance is used as an overriding plugin (e.g. connection adapter overrides)  # noqa: E501

        :param parent_ref: The parent_ref of this CustomDataStore.  # noqa: E501
        :type: ResourceLink
        """

        self._parent_ref = parent_ref

    @property
    def configuration(self):
        """Gets the configuration of this CustomDataStore.  # noqa: E501

        Plugin instance configuration.  # noqa: E501

        :return: The configuration of this CustomDataStore.  # noqa: E501
        :rtype: PluginConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this CustomDataStore.

        Plugin instance configuration.  # noqa: E501

        :param configuration: The configuration of this CustomDataStore.  # noqa: E501
        :type: PluginConfiguration
        """
        if self._configuration.client_side_validation and configuration is None:
            raise ValueError("Invalid value for `configuration`, must not be `None`")  # noqa: E501

        self._configuration = configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomDataStore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomDataStore):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomDataStore):
            return True

        return self.to_dict() != other.to_dict()
