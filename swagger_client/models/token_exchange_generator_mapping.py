# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TokenExchangeGeneratorMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requested_token_type': 'str',
        'token_generator': 'ResourceLink',
        'default_mapping': 'bool'
    }

    attribute_map = {
        'requested_token_type': 'requestedTokenType',
        'token_generator': 'tokenGenerator',
        'default_mapping': 'defaultMapping'
    }

    def __init__(self, requested_token_type=None, token_generator=None, default_mapping=None, _configuration=None):  # noqa: E501
        """TokenExchangeGeneratorMapping - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._requested_token_type = None
        self._token_generator = None
        self._default_mapping = None
        self.discriminator = None

        self.requested_token_type = requested_token_type
        self.token_generator = token_generator
        if default_mapping is not None:
            self.default_mapping = default_mapping

    @property
    def requested_token_type(self):
        """Gets the requested_token_type of this TokenExchangeGeneratorMapping.  # noqa: E501

        The Requested token type  # noqa: E501

        :return: The requested_token_type of this TokenExchangeGeneratorMapping.  # noqa: E501
        :rtype: str
        """
        return self._requested_token_type

    @requested_token_type.setter
    def requested_token_type(self, requested_token_type):
        """Sets the requested_token_type of this TokenExchangeGeneratorMapping.

        The Requested token type  # noqa: E501

        :param requested_token_type: The requested_token_type of this TokenExchangeGeneratorMapping.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and requested_token_type is None:
            raise ValueError("Invalid value for `requested_token_type`, must not be `None`")  # noqa: E501

        self._requested_token_type = requested_token_type

    @property
    def token_generator(self):
        """Gets the token_generator of this TokenExchangeGeneratorMapping.  # noqa: E501

        The Token Generator used to generate the requested token  # noqa: E501

        :return: The token_generator of this TokenExchangeGeneratorMapping.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._token_generator

    @token_generator.setter
    def token_generator(self, token_generator):
        """Sets the token_generator of this TokenExchangeGeneratorMapping.

        The Token Generator used to generate the requested token  # noqa: E501

        :param token_generator: The token_generator of this TokenExchangeGeneratorMapping.  # noqa: E501
        :type: ResourceLink
        """
        if self._configuration.client_side_validation and token_generator is None:
            raise ValueError("Invalid value for `token_generator`, must not be `None`")  # noqa: E501

        self._token_generator = token_generator

    @property
    def default_mapping(self):
        """Gets the default_mapping of this TokenExchangeGeneratorMapping.  # noqa: E501

        Whether this is the default Token Generator Mapping. Defaults to false if not specified.  # noqa: E501

        :return: The default_mapping of this TokenExchangeGeneratorMapping.  # noqa: E501
        :rtype: bool
        """
        return self._default_mapping

    @default_mapping.setter
    def default_mapping(self, default_mapping):
        """Sets the default_mapping of this TokenExchangeGeneratorMapping.

        Whether this is the default Token Generator Mapping. Defaults to false if not specified.  # noqa: E501

        :param default_mapping: The default_mapping of this TokenExchangeGeneratorMapping.  # noqa: E501
        :type: bool
        """

        self._default_mapping = default_mapping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenExchangeGeneratorMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenExchangeGeneratorMapping):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TokenExchangeGeneratorMapping):
            return True

        return self.to_dict() != other.to_dict()
