# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ConvertMetadataRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection_type': 'str',
        'expected_protocol': 'str',
        'expected_entity_id': 'str',
        'saml_metadata': 'str',
        'verification_certificate': 'str',
        'template_connection': 'Connection'
    }

    attribute_map = {
        'connection_type': 'connectionType',
        'expected_protocol': 'expectedProtocol',
        'expected_entity_id': 'expectedEntityId',
        'saml_metadata': 'samlMetadata',
        'verification_certificate': 'verificationCertificate',
        'template_connection': 'templateConnection'
    }

    def __init__(self, connection_type=None, expected_protocol=None, expected_entity_id=None, saml_metadata=None, verification_certificate=None, template_connection=None, _configuration=None):  # noqa: E501
        """ConvertMetadataRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._connection_type = None
        self._expected_protocol = None
        self._expected_entity_id = None
        self._saml_metadata = None
        self._verification_certificate = None
        self._template_connection = None
        self.discriminator = None

        self.connection_type = connection_type
        self.expected_protocol = expected_protocol
        if expected_entity_id is not None:
            self.expected_entity_id = expected_entity_id
        self.saml_metadata = saml_metadata
        if verification_certificate is not None:
            self.verification_certificate = verification_certificate
        if template_connection is not None:
            self.template_connection = template_connection

    @property
    def connection_type(self):
        """Gets the connection_type of this ConvertMetadataRequest.  # noqa: E501

        The expected connection type to convert.  # noqa: E501

        :return: The connection_type of this ConvertMetadataRequest.  # noqa: E501
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this ConvertMetadataRequest.

        The expected connection type to convert.  # noqa: E501

        :param connection_type: The connection_type of this ConvertMetadataRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and connection_type is None:
            raise ValueError("Invalid value for `connection_type`, must not be `None`")  # noqa: E501
        allowed_values = ["IDP", "SP"]  # noqa: E501
        if (self._configuration.client_side_validation and
                connection_type not in allowed_values):
            raise ValueError(
                "Invalid value for `connection_type` ({0}), must be one of {1}"  # noqa: E501
                .format(connection_type, allowed_values)
            )

        self._connection_type = connection_type

    @property
    def expected_protocol(self):
        """Gets the expected_protocol of this ConvertMetadataRequest.  # noqa: E501

        The expected browser-based SSO protocol to convert. In this case the protocol is restricted to SAML.  # noqa: E501

        :return: The expected_protocol of this ConvertMetadataRequest.  # noqa: E501
        :rtype: str
        """
        return self._expected_protocol

    @expected_protocol.setter
    def expected_protocol(self, expected_protocol):
        """Sets the expected_protocol of this ConvertMetadataRequest.

        The expected browser-based SSO protocol to convert. In this case the protocol is restricted to SAML.  # noqa: E501

        :param expected_protocol: The expected_protocol of this ConvertMetadataRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and expected_protocol is None:
            raise ValueError("Invalid value for `expected_protocol`, must not be `None`")  # noqa: E501
        allowed_values = ["SAML20", "SAML11", "SAML10"]  # noqa: E501
        if (self._configuration.client_side_validation and
                expected_protocol not in allowed_values):
            raise ValueError(
                "Invalid value for `expected_protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(expected_protocol, allowed_values)
            )

        self._expected_protocol = expected_protocol

    @property
    def expected_entity_id(self):
        """Gets the expected_entity_id of this ConvertMetadataRequest.  # noqa: E501

        The entity ID of the connection to be obtained from the input SAML Metadata. Required if the SAML Metadata has more than one connection defined.  # noqa: E501

        :return: The expected_entity_id of this ConvertMetadataRequest.  # noqa: E501
        :rtype: str
        """
        return self._expected_entity_id

    @expected_entity_id.setter
    def expected_entity_id(self, expected_entity_id):
        """Sets the expected_entity_id of this ConvertMetadataRequest.

        The entity ID of the connection to be obtained from the input SAML Metadata. Required if the SAML Metadata has more than one connection defined.  # noqa: E501

        :param expected_entity_id: The expected_entity_id of this ConvertMetadataRequest.  # noqa: E501
        :type: str
        """

        self._expected_entity_id = expected_entity_id

    @property
    def saml_metadata(self):
        """Gets the saml_metadata of this ConvertMetadataRequest.  # noqa: E501

        The base-64 encoded XML SAML metadata.  # noqa: E501

        :return: The saml_metadata of this ConvertMetadataRequest.  # noqa: E501
        :rtype: str
        """
        return self._saml_metadata

    @saml_metadata.setter
    def saml_metadata(self, saml_metadata):
        """Sets the saml_metadata of this ConvertMetadataRequest.

        The base-64 encoded XML SAML metadata.  # noqa: E501

        :param saml_metadata: The saml_metadata of this ConvertMetadataRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and saml_metadata is None:
            raise ValueError("Invalid value for `saml_metadata`, must not be `None`")  # noqa: E501

        self._saml_metadata = saml_metadata

    @property
    def verification_certificate(self):
        """Gets the verification_certificate of this ConvertMetadataRequest.  # noqa: E501

        The certificate to validate the metadata signature against. The certificate can be in PEM format or base-64 encoded DER format.  # noqa: E501

        :return: The verification_certificate of this ConvertMetadataRequest.  # noqa: E501
        :rtype: str
        """
        return self._verification_certificate

    @verification_certificate.setter
    def verification_certificate(self, verification_certificate):
        """Sets the verification_certificate of this ConvertMetadataRequest.

        The certificate to validate the metadata signature against. The certificate can be in PEM format or base-64 encoded DER format.  # noqa: E501

        :param verification_certificate: The verification_certificate of this ConvertMetadataRequest.  # noqa: E501
        :type: str
        """

        self._verification_certificate = verification_certificate

    @property
    def template_connection(self):
        """Gets the template_connection of this ConvertMetadataRequest.  # noqa: E501

        The template connection to overlay the metadata on.  # noqa: E501

        :return: The template_connection of this ConvertMetadataRequest.  # noqa: E501
        :rtype: Connection
        """
        return self._template_connection

    @template_connection.setter
    def template_connection(self, template_connection):
        """Sets the template_connection of this ConvertMetadataRequest.

        The template connection to overlay the metadata on.  # noqa: E501

        :param template_connection: The template_connection of this ConvertMetadataRequest.  # noqa: E501
        :type: Connection
        """

        self._template_connection = template_connection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConvertMetadataRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConvertMetadataRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConvertMetadataRequest):
            return True

        return self.to_dict() != other.to_dict()
