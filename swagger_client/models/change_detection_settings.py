# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ChangeDetectionSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_object_class': 'str',
        'group_object_class': 'str',
        'changed_users_algorithm': 'str',
        'usn_attribute_name': 'str',
        'time_stamp_attribute_name': 'str'
    }

    attribute_map = {
        'user_object_class': 'userObjectClass',
        'group_object_class': 'groupObjectClass',
        'changed_users_algorithm': 'changedUsersAlgorithm',
        'usn_attribute_name': 'usnAttributeName',
        'time_stamp_attribute_name': 'timeStampAttributeName'
    }

    def __init__(self, user_object_class=None, group_object_class=None, changed_users_algorithm=None, usn_attribute_name=None, time_stamp_attribute_name=None, _configuration=None):  # noqa: E501
        """ChangeDetectionSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user_object_class = None
        self._group_object_class = None
        self._changed_users_algorithm = None
        self._usn_attribute_name = None
        self._time_stamp_attribute_name = None
        self.discriminator = None

        self.user_object_class = user_object_class
        self.group_object_class = group_object_class
        self.changed_users_algorithm = changed_users_algorithm
        if usn_attribute_name is not None:
            self.usn_attribute_name = usn_attribute_name
        self.time_stamp_attribute_name = time_stamp_attribute_name

    @property
    def user_object_class(self):
        """Gets the user_object_class of this ChangeDetectionSettings.  # noqa: E501

        The user object class.  # noqa: E501

        :return: The user_object_class of this ChangeDetectionSettings.  # noqa: E501
        :rtype: str
        """
        return self._user_object_class

    @user_object_class.setter
    def user_object_class(self, user_object_class):
        """Sets the user_object_class of this ChangeDetectionSettings.

        The user object class.  # noqa: E501

        :param user_object_class: The user_object_class of this ChangeDetectionSettings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and user_object_class is None:
            raise ValueError("Invalid value for `user_object_class`, must not be `None`")  # noqa: E501

        self._user_object_class = user_object_class

    @property
    def group_object_class(self):
        """Gets the group_object_class of this ChangeDetectionSettings.  # noqa: E501

        The group object class.  # noqa: E501

        :return: The group_object_class of this ChangeDetectionSettings.  # noqa: E501
        :rtype: str
        """
        return self._group_object_class

    @group_object_class.setter
    def group_object_class(self, group_object_class):
        """Sets the group_object_class of this ChangeDetectionSettings.

        The group object class.  # noqa: E501

        :param group_object_class: The group_object_class of this ChangeDetectionSettings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and group_object_class is None:
            raise ValueError("Invalid value for `group_object_class`, must not be `None`")  # noqa: E501

        self._group_object_class = group_object_class

    @property
    def changed_users_algorithm(self):
        """Gets the changed_users_algorithm of this ChangeDetectionSettings.  # noqa: E501

        The changed user algorithm.  ACTIVE_DIRECTORY_USN - For Active Directory only, this algorithm queries for update sequence numbers on user records that are larger than the last time records were checked.  TIMESTAMP - Queries for timestamps on user records that are not older than the last time records were checked. This check is more efficient from the point of view of the PingFederate provisioner but can be more time consuming on the LDAP side, particularly with the Oracle Directory Server.  TIMESTAMP_NO_NEGATION - Queries for timestamps on user records that are newer than the last time records were checked. This algorithm is recommended for the Oracle Directory Server.  # noqa: E501

        :return: The changed_users_algorithm of this ChangeDetectionSettings.  # noqa: E501
        :rtype: str
        """
        return self._changed_users_algorithm

    @changed_users_algorithm.setter
    def changed_users_algorithm(self, changed_users_algorithm):
        """Sets the changed_users_algorithm of this ChangeDetectionSettings.

        The changed user algorithm.  ACTIVE_DIRECTORY_USN - For Active Directory only, this algorithm queries for update sequence numbers on user records that are larger than the last time records were checked.  TIMESTAMP - Queries for timestamps on user records that are not older than the last time records were checked. This check is more efficient from the point of view of the PingFederate provisioner but can be more time consuming on the LDAP side, particularly with the Oracle Directory Server.  TIMESTAMP_NO_NEGATION - Queries for timestamps on user records that are newer than the last time records were checked. This algorithm is recommended for the Oracle Directory Server.  # noqa: E501

        :param changed_users_algorithm: The changed_users_algorithm of this ChangeDetectionSettings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and changed_users_algorithm is None:
            raise ValueError("Invalid value for `changed_users_algorithm`, must not be `None`")  # noqa: E501
        allowed_values = ["ACTIVE_DIRECTORY_USN", "TIMESTAMP", "TIMESTAMP_NO_NEGATION"]  # noqa: E501
        if (self._configuration.client_side_validation and
                changed_users_algorithm not in allowed_values):
            raise ValueError(
                "Invalid value for `changed_users_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(changed_users_algorithm, allowed_values)
            )

        self._changed_users_algorithm = changed_users_algorithm

    @property
    def usn_attribute_name(self):
        """Gets the usn_attribute_name of this ChangeDetectionSettings.  # noqa: E501

        The USN attribute name.  # noqa: E501

        :return: The usn_attribute_name of this ChangeDetectionSettings.  # noqa: E501
        :rtype: str
        """
        return self._usn_attribute_name

    @usn_attribute_name.setter
    def usn_attribute_name(self, usn_attribute_name):
        """Sets the usn_attribute_name of this ChangeDetectionSettings.

        The USN attribute name.  # noqa: E501

        :param usn_attribute_name: The usn_attribute_name of this ChangeDetectionSettings.  # noqa: E501
        :type: str
        """

        self._usn_attribute_name = usn_attribute_name

    @property
    def time_stamp_attribute_name(self):
        """Gets the time_stamp_attribute_name of this ChangeDetectionSettings.  # noqa: E501

        The timestamp attribute name.  # noqa: E501

        :return: The time_stamp_attribute_name of this ChangeDetectionSettings.  # noqa: E501
        :rtype: str
        """
        return self._time_stamp_attribute_name

    @time_stamp_attribute_name.setter
    def time_stamp_attribute_name(self, time_stamp_attribute_name):
        """Sets the time_stamp_attribute_name of this ChangeDetectionSettings.

        The timestamp attribute name.  # noqa: E501

        :param time_stamp_attribute_name: The time_stamp_attribute_name of this ChangeDetectionSettings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and time_stamp_attribute_name is None:
            raise ValueError("Invalid value for `time_stamp_attribute_name`, must not be `None`")  # noqa: E501

        self._time_stamp_attribute_name = time_stamp_attribute_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChangeDetectionSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangeDetectionSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChangeDetectionSettings):
            return True

        return self.to_dict() != other.to_dict()
