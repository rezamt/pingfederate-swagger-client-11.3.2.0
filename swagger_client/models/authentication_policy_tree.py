# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AuthenticationPolicyTree(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'authentication_api_application_ref': 'ResourceLink',
        'enabled': 'bool',
        'root_node': 'AuthenticationPolicyTreeNode',
        'handle_failures_locally': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'authentication_api_application_ref': 'authenticationApiApplicationRef',
        'enabled': 'enabled',
        'root_node': 'rootNode',
        'handle_failures_locally': 'handleFailuresLocally'
    }

    def __init__(self, id=None, name=None, description=None, authentication_api_application_ref=None, enabled=None, root_node=None, handle_failures_locally=None, _configuration=None):  # noqa: E501
        """AuthenticationPolicyTree - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._authentication_api_application_ref = None
        self._enabled = None
        self._root_node = None
        self._handle_failures_locally = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if authentication_api_application_ref is not None:
            self.authentication_api_application_ref = authentication_api_application_ref
        if enabled is not None:
            self.enabled = enabled
        if root_node is not None:
            self.root_node = root_node
        if handle_failures_locally is not None:
            self.handle_failures_locally = handle_failures_locally

    @property
    def id(self):
        """Gets the id of this AuthenticationPolicyTree.  # noqa: E501

        The authentication policy ID. ID is unique.  # noqa: E501

        :return: The id of this AuthenticationPolicyTree.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthenticationPolicyTree.

        The authentication policy ID. ID is unique.  # noqa: E501

        :param id: The id of this AuthenticationPolicyTree.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AuthenticationPolicyTree.  # noqa: E501

        The authentication policy name. Name is unique.  # noqa: E501

        :return: The name of this AuthenticationPolicyTree.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuthenticationPolicyTree.

        The authentication policy name. Name is unique.  # noqa: E501

        :param name: The name of this AuthenticationPolicyTree.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AuthenticationPolicyTree.  # noqa: E501

        A description for the authentication policy.  # noqa: E501

        :return: The description of this AuthenticationPolicyTree.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AuthenticationPolicyTree.

        A description for the authentication policy.  # noqa: E501

        :param description: The description of this AuthenticationPolicyTree.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def authentication_api_application_ref(self):
        """Gets the authentication_api_application_ref of this AuthenticationPolicyTree.  # noqa: E501

        Authentication API Application Id to be used in this policy branch. If the value is not specified, no Authentication API Application will be used.  # noqa: E501

        :return: The authentication_api_application_ref of this AuthenticationPolicyTree.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._authentication_api_application_ref

    @authentication_api_application_ref.setter
    def authentication_api_application_ref(self, authentication_api_application_ref):
        """Sets the authentication_api_application_ref of this AuthenticationPolicyTree.

        Authentication API Application Id to be used in this policy branch. If the value is not specified, no Authentication API Application will be used.  # noqa: E501

        :param authentication_api_application_ref: The authentication_api_application_ref of this AuthenticationPolicyTree.  # noqa: E501
        :type: ResourceLink
        """

        self._authentication_api_application_ref = authentication_api_application_ref

    @property
    def enabled(self):
        """Gets the enabled of this AuthenticationPolicyTree.  # noqa: E501

        Whether or not this authentication policy tree is enabled. Default is true.  # noqa: E501

        :return: The enabled of this AuthenticationPolicyTree.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AuthenticationPolicyTree.

        Whether or not this authentication policy tree is enabled. Default is true.  # noqa: E501

        :param enabled: The enabled of this AuthenticationPolicyTree.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def root_node(self):
        """Gets the root_node of this AuthenticationPolicyTree.  # noqa: E501

        A node inside the authentication policy tree.  # noqa: E501

        :return: The root_node of this AuthenticationPolicyTree.  # noqa: E501
        :rtype: AuthenticationPolicyTreeNode
        """
        return self._root_node

    @root_node.setter
    def root_node(self, root_node):
        """Sets the root_node of this AuthenticationPolicyTree.

        A node inside the authentication policy tree.  # noqa: E501

        :param root_node: The root_node of this AuthenticationPolicyTree.  # noqa: E501
        :type: AuthenticationPolicyTreeNode
        """

        self._root_node = root_node

    @property
    def handle_failures_locally(self):
        """Gets the handle_failures_locally of this AuthenticationPolicyTree.  # noqa: E501

        If a policy ends in failure keep the user local.  # noqa: E501

        :return: The handle_failures_locally of this AuthenticationPolicyTree.  # noqa: E501
        :rtype: bool
        """
        return self._handle_failures_locally

    @handle_failures_locally.setter
    def handle_failures_locally(self, handle_failures_locally):
        """Sets the handle_failures_locally of this AuthenticationPolicyTree.

        If a policy ends in failure keep the user local.  # noqa: E501

        :param handle_failures_locally: The handle_failures_locally of this AuthenticationPolicyTree.  # noqa: E501
        :type: bool
        """

        self._handle_failures_locally = handle_failures_locally

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthenticationPolicyTree, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthenticationPolicyTree):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthenticationPolicyTree):
            return True

        return self.to_dict() != other.to_dict()
