# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class NewKeyPairSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'common_name': 'str',
        'subject_alternative_names': 'list[str]',
        'organization': 'str',
        'organization_unit': 'str',
        'city': 'str',
        'state': 'str',
        'country': 'str',
        'valid_days': 'int',
        'key_algorithm': 'str',
        'key_size': 'int',
        'signature_algorithm': 'str',
        'crypto_provider': 'str'
    }

    attribute_map = {
        'id': 'id',
        'common_name': 'commonName',
        'subject_alternative_names': 'subjectAlternativeNames',
        'organization': 'organization',
        'organization_unit': 'organizationUnit',
        'city': 'city',
        'state': 'state',
        'country': 'country',
        'valid_days': 'validDays',
        'key_algorithm': 'keyAlgorithm',
        'key_size': 'keySize',
        'signature_algorithm': 'signatureAlgorithm',
        'crypto_provider': 'cryptoProvider'
    }

    def __init__(self, id=None, common_name=None, subject_alternative_names=None, organization=None, organization_unit=None, city=None, state=None, country=None, valid_days=None, key_algorithm=None, key_size=None, signature_algorithm=None, crypto_provider=None, _configuration=None):  # noqa: E501
        """NewKeyPairSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._common_name = None
        self._subject_alternative_names = None
        self._organization = None
        self._organization_unit = None
        self._city = None
        self._state = None
        self._country = None
        self._valid_days = None
        self._key_algorithm = None
        self._key_size = None
        self._signature_algorithm = None
        self._crypto_provider = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.common_name = common_name
        if subject_alternative_names is not None:
            self.subject_alternative_names = subject_alternative_names
        self.organization = organization
        if organization_unit is not None:
            self.organization_unit = organization_unit
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        self.country = country
        self.valid_days = valid_days
        self.key_algorithm = key_algorithm
        if key_size is not None:
            self.key_size = key_size
        if signature_algorithm is not None:
            self.signature_algorithm = signature_algorithm
        if crypto_provider is not None:
            self.crypto_provider = crypto_provider

    @property
    def id(self):
        """Gets the id of this NewKeyPairSettings.  # noqa: E501

        The persistent, unique ID for the certificate. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified.  # noqa: E501

        :return: The id of this NewKeyPairSettings.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NewKeyPairSettings.

        The persistent, unique ID for the certificate. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified.  # noqa: E501

        :param id: The id of this NewKeyPairSettings.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def common_name(self):
        """Gets the common_name of this NewKeyPairSettings.  # noqa: E501

        Common name for key pair subject.  # noqa: E501

        :return: The common_name of this NewKeyPairSettings.  # noqa: E501
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this NewKeyPairSettings.

        Common name for key pair subject.  # noqa: E501

        :param common_name: The common_name of this NewKeyPairSettings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and common_name is None:
            raise ValueError("Invalid value for `common_name`, must not be `None`")  # noqa: E501

        self._common_name = common_name

    @property
    def subject_alternative_names(self):
        """Gets the subject_alternative_names of this NewKeyPairSettings.  # noqa: E501

        The subject alternative names (SAN).  # noqa: E501

        :return: The subject_alternative_names of this NewKeyPairSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_alternative_names

    @subject_alternative_names.setter
    def subject_alternative_names(self, subject_alternative_names):
        """Sets the subject_alternative_names of this NewKeyPairSettings.

        The subject alternative names (SAN).  # noqa: E501

        :param subject_alternative_names: The subject_alternative_names of this NewKeyPairSettings.  # noqa: E501
        :type: list[str]
        """

        self._subject_alternative_names = subject_alternative_names

    @property
    def organization(self):
        """Gets the organization of this NewKeyPairSettings.  # noqa: E501

        Organization.  # noqa: E501

        :return: The organization of this NewKeyPairSettings.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this NewKeyPairSettings.

        Organization.  # noqa: E501

        :param organization: The organization of this NewKeyPairSettings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def organization_unit(self):
        """Gets the organization_unit of this NewKeyPairSettings.  # noqa: E501

        Organization unit.  # noqa: E501

        :return: The organization_unit of this NewKeyPairSettings.  # noqa: E501
        :rtype: str
        """
        return self._organization_unit

    @organization_unit.setter
    def organization_unit(self, organization_unit):
        """Sets the organization_unit of this NewKeyPairSettings.

        Organization unit.  # noqa: E501

        :param organization_unit: The organization_unit of this NewKeyPairSettings.  # noqa: E501
        :type: str
        """

        self._organization_unit = organization_unit

    @property
    def city(self):
        """Gets the city of this NewKeyPairSettings.  # noqa: E501

        City.  # noqa: E501

        :return: The city of this NewKeyPairSettings.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this NewKeyPairSettings.

        City.  # noqa: E501

        :param city: The city of this NewKeyPairSettings.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this NewKeyPairSettings.  # noqa: E501

        State.  # noqa: E501

        :return: The state of this NewKeyPairSettings.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NewKeyPairSettings.

        State.  # noqa: E501

        :param state: The state of this NewKeyPairSettings.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def country(self):
        """Gets the country of this NewKeyPairSettings.  # noqa: E501

        Country.  # noqa: E501

        :return: The country of this NewKeyPairSettings.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this NewKeyPairSettings.

        Country.  # noqa: E501

        :param country: The country of this NewKeyPairSettings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def valid_days(self):
        """Gets the valid_days of this NewKeyPairSettings.  # noqa: E501

        Number of days the key pair will be valid for.  # noqa: E501

        :return: The valid_days of this NewKeyPairSettings.  # noqa: E501
        :rtype: int
        """
        return self._valid_days

    @valid_days.setter
    def valid_days(self, valid_days):
        """Sets the valid_days of this NewKeyPairSettings.

        Number of days the key pair will be valid for.  # noqa: E501

        :param valid_days: The valid_days of this NewKeyPairSettings.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and valid_days is None:
            raise ValueError("Invalid value for `valid_days`, must not be `None`")  # noqa: E501

        self._valid_days = valid_days

    @property
    def key_algorithm(self):
        """Gets the key_algorithm of this NewKeyPairSettings.  # noqa: E501

        Key generation algorithm. Supported algorithms are available through the /keyPairs/keyAlgorithms endpoint.  # noqa: E501

        :return: The key_algorithm of this NewKeyPairSettings.  # noqa: E501
        :rtype: str
        """
        return self._key_algorithm

    @key_algorithm.setter
    def key_algorithm(self, key_algorithm):
        """Sets the key_algorithm of this NewKeyPairSettings.

        Key generation algorithm. Supported algorithms are available through the /keyPairs/keyAlgorithms endpoint.  # noqa: E501

        :param key_algorithm: The key_algorithm of this NewKeyPairSettings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and key_algorithm is None:
            raise ValueError("Invalid value for `key_algorithm`, must not be `None`")  # noqa: E501

        self._key_algorithm = key_algorithm

    @property
    def key_size(self):
        """Gets the key_size of this NewKeyPairSettings.  # noqa: E501

        Key size, in bits. If this property is unset, the default size for the key algorithm will be used. Supported key sizes are available through the /keyPairs/keyAlgorithms endpoint.  # noqa: E501

        :return: The key_size of this NewKeyPairSettings.  # noqa: E501
        :rtype: int
        """
        return self._key_size

    @key_size.setter
    def key_size(self, key_size):
        """Sets the key_size of this NewKeyPairSettings.

        Key size, in bits. If this property is unset, the default size for the key algorithm will be used. Supported key sizes are available through the /keyPairs/keyAlgorithms endpoint.  # noqa: E501

        :param key_size: The key_size of this NewKeyPairSettings.  # noqa: E501
        :type: int
        """

        self._key_size = key_size

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this NewKeyPairSettings.  # noqa: E501

        Signature algorithm. If this property is unset, the default signature algorithm for the key algorithm will be used. Supported signature algorithms are available through the /keyPairs/keyAlgorithms endpoint.  # noqa: E501

        :return: The signature_algorithm of this NewKeyPairSettings.  # noqa: E501
        :rtype: str
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this NewKeyPairSettings.

        Signature algorithm. If this property is unset, the default signature algorithm for the key algorithm will be used. Supported signature algorithms are available through the /keyPairs/keyAlgorithms endpoint.  # noqa: E501

        :param signature_algorithm: The signature_algorithm of this NewKeyPairSettings.  # noqa: E501
        :type: str
        """

        self._signature_algorithm = signature_algorithm

    @property
    def crypto_provider(self):
        """Gets the crypto_provider of this NewKeyPairSettings.  # noqa: E501

        Cryptographic Provider.  This is only applicable if Hybrid HSM mode is true.  # noqa: E501

        :return: The crypto_provider of this NewKeyPairSettings.  # noqa: E501
        :rtype: str
        """
        return self._crypto_provider

    @crypto_provider.setter
    def crypto_provider(self, crypto_provider):
        """Sets the crypto_provider of this NewKeyPairSettings.

        Cryptographic Provider.  This is only applicable if Hybrid HSM mode is true.  # noqa: E501

        :param crypto_provider: The crypto_provider of this NewKeyPairSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOCAL", "HSM"]  # noqa: E501
        if (self._configuration.client_side_validation and
                crypto_provider not in allowed_values):
            raise ValueError(
                "Invalid value for `crypto_provider` ({0}), must be one of {1}"  # noqa: E501
                .format(crypto_provider, allowed_values)
            )

        self._crypto_provider = crypto_provider

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewKeyPairSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewKeyPairSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewKeyPairSettings):
            return True

        return self.to_dict() != other.to_dict()
