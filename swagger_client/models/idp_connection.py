# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IdpConnection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'oidc_client_credentials': 'OIDCClientCredentials',
        'idp_browser_sso': 'IdpBrowserSso',
        'attribute_query': 'IdpAttributeQuery',
        'idp_o_auth_grant_attribute_mapping': 'IdpOAuthGrantAttributeMapping',
        'ws_trust': 'IdpWsTrust',
        'inbound_provisioning': 'IdpInboundProvisioning',
        'error_page_msg_id': 'str'
    }

    attribute_map = {
        'oidc_client_credentials': 'oidcClientCredentials',
        'idp_browser_sso': 'idpBrowserSso',
        'attribute_query': 'attributeQuery',
        'idp_o_auth_grant_attribute_mapping': 'idpOAuthGrantAttributeMapping',
        'ws_trust': 'wsTrust',
        'inbound_provisioning': 'inboundProvisioning',
        'error_page_msg_id': 'errorPageMsgId'
    }

    def __init__(self, oidc_client_credentials=None, idp_browser_sso=None, attribute_query=None, idp_o_auth_grant_attribute_mapping=None, ws_trust=None, inbound_provisioning=None, error_page_msg_id=None, _configuration=None):  # noqa: E501
        """IdpConnection - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._oidc_client_credentials = None
        self._idp_browser_sso = None
        self._attribute_query = None
        self._idp_o_auth_grant_attribute_mapping = None
        self._ws_trust = None
        self._inbound_provisioning = None
        self._error_page_msg_id = None
        self.discriminator = None

        if oidc_client_credentials is not None:
            self.oidc_client_credentials = oidc_client_credentials
        if idp_browser_sso is not None:
            self.idp_browser_sso = idp_browser_sso
        if attribute_query is not None:
            self.attribute_query = attribute_query
        if idp_o_auth_grant_attribute_mapping is not None:
            self.idp_o_auth_grant_attribute_mapping = idp_o_auth_grant_attribute_mapping
        if ws_trust is not None:
            self.ws_trust = ws_trust
        if inbound_provisioning is not None:
            self.inbound_provisioning = inbound_provisioning
        if error_page_msg_id is not None:
            self.error_page_msg_id = error_page_msg_id

    @property
    def oidc_client_credentials(self):
        """Gets the oidc_client_credentials of this IdpConnection.  # noqa: E501

        The OIDC client credentials. This is required for an OIDC connection.  # noqa: E501

        :return: The oidc_client_credentials of this IdpConnection.  # noqa: E501
        :rtype: OIDCClientCredentials
        """
        return self._oidc_client_credentials

    @oidc_client_credentials.setter
    def oidc_client_credentials(self, oidc_client_credentials):
        """Sets the oidc_client_credentials of this IdpConnection.

        The OIDC client credentials. This is required for an OIDC connection.  # noqa: E501

        :param oidc_client_credentials: The oidc_client_credentials of this IdpConnection.  # noqa: E501
        :type: OIDCClientCredentials
        """

        self._oidc_client_credentials = oidc_client_credentials

    @property
    def idp_browser_sso(self):
        """Gets the idp_browser_sso of this IdpConnection.  # noqa: E501

        The browser-based SSO settings used to communicate with your IdP.  # noqa: E501

        :return: The idp_browser_sso of this IdpConnection.  # noqa: E501
        :rtype: IdpBrowserSso
        """
        return self._idp_browser_sso

    @idp_browser_sso.setter
    def idp_browser_sso(self, idp_browser_sso):
        """Sets the idp_browser_sso of this IdpConnection.

        The browser-based SSO settings used to communicate with your IdP.  # noqa: E501

        :param idp_browser_sso: The idp_browser_sso of this IdpConnection.  # noqa: E501
        :type: IdpBrowserSso
        """

        self._idp_browser_sso = idp_browser_sso

    @property
    def attribute_query(self):
        """Gets the attribute_query of this IdpConnection.  # noqa: E501

        The attribute query settings for requesting user attributes from an attribute authority.  # noqa: E501

        :return: The attribute_query of this IdpConnection.  # noqa: E501
        :rtype: IdpAttributeQuery
        """
        return self._attribute_query

    @attribute_query.setter
    def attribute_query(self, attribute_query):
        """Sets the attribute_query of this IdpConnection.

        The attribute query settings for requesting user attributes from an attribute authority.  # noqa: E501

        :param attribute_query: The attribute_query of this IdpConnection.  # noqa: E501
        :type: IdpAttributeQuery
        """

        self._attribute_query = attribute_query

    @property
    def idp_o_auth_grant_attribute_mapping(self):
        """Gets the idp_o_auth_grant_attribute_mapping of this IdpConnection.  # noqa: E501

        The OAuth Assertion Grant settings used to map from your IdP.  # noqa: E501

        :return: The idp_o_auth_grant_attribute_mapping of this IdpConnection.  # noqa: E501
        :rtype: IdpOAuthGrantAttributeMapping
        """
        return self._idp_o_auth_grant_attribute_mapping

    @idp_o_auth_grant_attribute_mapping.setter
    def idp_o_auth_grant_attribute_mapping(self, idp_o_auth_grant_attribute_mapping):
        """Sets the idp_o_auth_grant_attribute_mapping of this IdpConnection.

        The OAuth Assertion Grant settings used to map from your IdP.  # noqa: E501

        :param idp_o_auth_grant_attribute_mapping: The idp_o_auth_grant_attribute_mapping of this IdpConnection.  # noqa: E501
        :type: IdpOAuthGrantAttributeMapping
        """

        self._idp_o_auth_grant_attribute_mapping = idp_o_auth_grant_attribute_mapping

    @property
    def ws_trust(self):
        """Gets the ws_trust of this IdpConnection.  # noqa: E501

        The Ws-Trust settings.  # noqa: E501

        :return: The ws_trust of this IdpConnection.  # noqa: E501
        :rtype: IdpWsTrust
        """
        return self._ws_trust

    @ws_trust.setter
    def ws_trust(self, ws_trust):
        """Sets the ws_trust of this IdpConnection.

        The Ws-Trust settings.  # noqa: E501

        :param ws_trust: The ws_trust of this IdpConnection.  # noqa: E501
        :type: IdpWsTrust
        """

        self._ws_trust = ws_trust

    @property
    def inbound_provisioning(self):
        """Gets the inbound_provisioning of this IdpConnection.  # noqa: E501

        The Inbound Provisioning settings used to provision user accounts and groups.  # noqa: E501

        :return: The inbound_provisioning of this IdpConnection.  # noqa: E501
        :rtype: IdpInboundProvisioning
        """
        return self._inbound_provisioning

    @inbound_provisioning.setter
    def inbound_provisioning(self, inbound_provisioning):
        """Sets the inbound_provisioning of this IdpConnection.

        The Inbound Provisioning settings used to provision user accounts and groups.  # noqa: E501

        :param inbound_provisioning: The inbound_provisioning of this IdpConnection.  # noqa: E501
        :type: IdpInboundProvisioning
        """

        self._inbound_provisioning = inbound_provisioning

    @property
    def error_page_msg_id(self):
        """Gets the error_page_msg_id of this IdpConnection.  # noqa: E501

        Identifier that specifies the message displayed on a user-facing error page.  # noqa: E501

        :return: The error_page_msg_id of this IdpConnection.  # noqa: E501
        :rtype: str
        """
        return self._error_page_msg_id

    @error_page_msg_id.setter
    def error_page_msg_id(self, error_page_msg_id):
        """Sets the error_page_msg_id of this IdpConnection.

        Identifier that specifies the message displayed on a user-facing error page.  # noqa: E501

        :param error_page_msg_id: The error_page_msg_id of this IdpConnection.  # noqa: E501
        :type: str
        """

        self._error_page_msg_id = error_page_msg_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdpConnection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdpConnection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IdpConnection):
            return True

        return self.to_dict() != other.to_dict()
