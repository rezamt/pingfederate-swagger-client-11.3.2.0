# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RedirectValidationLocalSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable_target_resource_validation_for_sso': 'bool',
        'enable_target_resource_validation_for_slo': 'bool',
        'enable_target_resource_validation_for_idp_discovery': 'bool',
        'enable_in_error_resource_validation': 'bool',
        'white_list': 'list[RedirectValidationSettingsWhitelistEntry]'
    }

    attribute_map = {
        'enable_target_resource_validation_for_sso': 'enableTargetResourceValidationForSSO',
        'enable_target_resource_validation_for_slo': 'enableTargetResourceValidationForSLO',
        'enable_target_resource_validation_for_idp_discovery': 'enableTargetResourceValidationForIdpDiscovery',
        'enable_in_error_resource_validation': 'enableInErrorResourceValidation',
        'white_list': 'whiteList'
    }

    def __init__(self, enable_target_resource_validation_for_sso=None, enable_target_resource_validation_for_slo=None, enable_target_resource_validation_for_idp_discovery=None, enable_in_error_resource_validation=None, white_list=None, _configuration=None):  # noqa: E501
        """RedirectValidationLocalSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enable_target_resource_validation_for_sso = None
        self._enable_target_resource_validation_for_slo = None
        self._enable_target_resource_validation_for_idp_discovery = None
        self._enable_in_error_resource_validation = None
        self._white_list = None
        self.discriminator = None

        if enable_target_resource_validation_for_sso is not None:
            self.enable_target_resource_validation_for_sso = enable_target_resource_validation_for_sso
        if enable_target_resource_validation_for_slo is not None:
            self.enable_target_resource_validation_for_slo = enable_target_resource_validation_for_slo
        if enable_target_resource_validation_for_idp_discovery is not None:
            self.enable_target_resource_validation_for_idp_discovery = enable_target_resource_validation_for_idp_discovery
        if enable_in_error_resource_validation is not None:
            self.enable_in_error_resource_validation = enable_in_error_resource_validation
        if white_list is not None:
            self.white_list = white_list

    @property
    def enable_target_resource_validation_for_sso(self):
        """Gets the enable_target_resource_validation_for_sso of this RedirectValidationLocalSettings.  # noqa: E501

        Enable target resource validation for SSO.  # noqa: E501

        :return: The enable_target_resource_validation_for_sso of this RedirectValidationLocalSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_target_resource_validation_for_sso

    @enable_target_resource_validation_for_sso.setter
    def enable_target_resource_validation_for_sso(self, enable_target_resource_validation_for_sso):
        """Sets the enable_target_resource_validation_for_sso of this RedirectValidationLocalSettings.

        Enable target resource validation for SSO.  # noqa: E501

        :param enable_target_resource_validation_for_sso: The enable_target_resource_validation_for_sso of this RedirectValidationLocalSettings.  # noqa: E501
        :type: bool
        """

        self._enable_target_resource_validation_for_sso = enable_target_resource_validation_for_sso

    @property
    def enable_target_resource_validation_for_slo(self):
        """Gets the enable_target_resource_validation_for_slo of this RedirectValidationLocalSettings.  # noqa: E501

        Enable target resource validation for SLO.  # noqa: E501

        :return: The enable_target_resource_validation_for_slo of this RedirectValidationLocalSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_target_resource_validation_for_slo

    @enable_target_resource_validation_for_slo.setter
    def enable_target_resource_validation_for_slo(self, enable_target_resource_validation_for_slo):
        """Sets the enable_target_resource_validation_for_slo of this RedirectValidationLocalSettings.

        Enable target resource validation for SLO.  # noqa: E501

        :param enable_target_resource_validation_for_slo: The enable_target_resource_validation_for_slo of this RedirectValidationLocalSettings.  # noqa: E501
        :type: bool
        """

        self._enable_target_resource_validation_for_slo = enable_target_resource_validation_for_slo

    @property
    def enable_target_resource_validation_for_idp_discovery(self):
        """Gets the enable_target_resource_validation_for_idp_discovery of this RedirectValidationLocalSettings.  # noqa: E501

        Enable target resource validation for IdP discovery.  # noqa: E501

        :return: The enable_target_resource_validation_for_idp_discovery of this RedirectValidationLocalSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_target_resource_validation_for_idp_discovery

    @enable_target_resource_validation_for_idp_discovery.setter
    def enable_target_resource_validation_for_idp_discovery(self, enable_target_resource_validation_for_idp_discovery):
        """Sets the enable_target_resource_validation_for_idp_discovery of this RedirectValidationLocalSettings.

        Enable target resource validation for IdP discovery.  # noqa: E501

        :param enable_target_resource_validation_for_idp_discovery: The enable_target_resource_validation_for_idp_discovery of this RedirectValidationLocalSettings.  # noqa: E501
        :type: bool
        """

        self._enable_target_resource_validation_for_idp_discovery = enable_target_resource_validation_for_idp_discovery

    @property
    def enable_in_error_resource_validation(self):
        """Gets the enable_in_error_resource_validation of this RedirectValidationLocalSettings.  # noqa: E501

        Enable validation for error resource.  # noqa: E501

        :return: The enable_in_error_resource_validation of this RedirectValidationLocalSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_in_error_resource_validation

    @enable_in_error_resource_validation.setter
    def enable_in_error_resource_validation(self, enable_in_error_resource_validation):
        """Sets the enable_in_error_resource_validation of this RedirectValidationLocalSettings.

        Enable validation for error resource.  # noqa: E501

        :param enable_in_error_resource_validation: The enable_in_error_resource_validation of this RedirectValidationLocalSettings.  # noqa: E501
        :type: bool
        """

        self._enable_in_error_resource_validation = enable_in_error_resource_validation

    @property
    def white_list(self):
        """Gets the white_list of this RedirectValidationLocalSettings.  # noqa: E501

        List of URLs that are designated as valid target resources.  # noqa: E501

        :return: The white_list of this RedirectValidationLocalSettings.  # noqa: E501
        :rtype: list[RedirectValidationSettingsWhitelistEntry]
        """
        return self._white_list

    @white_list.setter
    def white_list(self, white_list):
        """Sets the white_list of this RedirectValidationLocalSettings.

        List of URLs that are designated as valid target resources.  # noqa: E501

        :param white_list: The white_list of this RedirectValidationLocalSettings.  # noqa: E501
        :type: list[RedirectValidationSettingsWhitelistEntry]
        """

        self._white_list = white_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RedirectValidationLocalSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RedirectValidationLocalSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RedirectValidationLocalSettings):
            return True

        return self.to_dict() != other.to_dict()
