# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ServerSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contact_info': 'ContactInfo',
        'notifications': 'NotificationSettings',
        'roles_and_protocols': 'RolesAndProtocols',
        'federation_info': 'FederationInfo',
        'email_server': 'EmailServerSettings',
        'captcha_settings': 'CaptchaSettings'
    }

    attribute_map = {
        'contact_info': 'contactInfo',
        'notifications': 'notifications',
        'roles_and_protocols': 'rolesAndProtocols',
        'federation_info': 'federationInfo',
        'email_server': 'emailServer',
        'captcha_settings': 'captchaSettings'
    }

    def __init__(self, contact_info=None, notifications=None, roles_and_protocols=None, federation_info=None, email_server=None, captcha_settings=None, _configuration=None):  # noqa: E501
        """ServerSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._contact_info = None
        self._notifications = None
        self._roles_and_protocols = None
        self._federation_info = None
        self._email_server = None
        self._captcha_settings = None
        self.discriminator = None

        if contact_info is not None:
            self.contact_info = contact_info
        if notifications is not None:
            self.notifications = notifications
        if roles_and_protocols is not None:
            self.roles_and_protocols = roles_and_protocols
        if federation_info is not None:
            self.federation_info = federation_info
        if email_server is not None:
            self.email_server = email_server
        if captcha_settings is not None:
            self.captcha_settings = captcha_settings

    @property
    def contact_info(self):
        """Gets the contact_info of this ServerSettings.  # noqa: E501

        Information that identifies the server.  # noqa: E501

        :return: The contact_info of this ServerSettings.  # noqa: E501
        :rtype: ContactInfo
        """
        return self._contact_info

    @contact_info.setter
    def contact_info(self, contact_info):
        """Sets the contact_info of this ServerSettings.

        Information that identifies the server.  # noqa: E501

        :param contact_info: The contact_info of this ServerSettings.  # noqa: E501
        :type: ContactInfo
        """

        self._contact_info = contact_info

    @property
    def notifications(self):
        """Gets the notifications of this ServerSettings.  # noqa: E501

        Notification settings for license and certificate expiration events.  # noqa: E501

        :return: The notifications of this ServerSettings.  # noqa: E501
        :rtype: NotificationSettings
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this ServerSettings.

        Notification settings for license and certificate expiration events.  # noqa: E501

        :param notifications: The notifications of this ServerSettings.  # noqa: E501
        :type: NotificationSettings
        """

        self._notifications = notifications

    @property
    def roles_and_protocols(self):
        """Gets the roles_and_protocols of this ServerSettings.  # noqa: E501

        Configure roles and protocols.  # noqa: E501

        :return: The roles_and_protocols of this ServerSettings.  # noqa: E501
        :rtype: RolesAndProtocols
        """
        return self._roles_and_protocols

    @roles_and_protocols.setter
    def roles_and_protocols(self, roles_and_protocols):
        """Sets the roles_and_protocols of this ServerSettings.

        Configure roles and protocols.  # noqa: E501

        :param roles_and_protocols: The roles_and_protocols of this ServerSettings.  # noqa: E501
        :type: RolesAndProtocols
        """

        self._roles_and_protocols = roles_and_protocols

    @property
    def federation_info(self):
        """Gets the federation_info of this ServerSettings.  # noqa: E501

        Federation Info.  # noqa: E501

        :return: The federation_info of this ServerSettings.  # noqa: E501
        :rtype: FederationInfo
        """
        return self._federation_info

    @federation_info.setter
    def federation_info(self, federation_info):
        """Sets the federation_info of this ServerSettings.

        Federation Info.  # noqa: E501

        :param federation_info: The federation_info of this ServerSettings.  # noqa: E501
        :type: FederationInfo
        """

        self._federation_info = federation_info

    @property
    def email_server(self):
        """Gets the email_server of this ServerSettings.  # noqa: E501

        Email Server Settings.  # noqa: E501

        :return: The email_server of this ServerSettings.  # noqa: E501
        :rtype: EmailServerSettings
        """
        return self._email_server

    @email_server.setter
    def email_server(self, email_server):
        """Sets the email_server of this ServerSettings.

        Email Server Settings.  # noqa: E501

        :param email_server: The email_server of this ServerSettings.  # noqa: E501
        :type: EmailServerSettings
        """

        self._email_server = email_server

    @property
    def captcha_settings(self):
        """Gets the captcha_settings of this ServerSettings.  # noqa: E501

        Captcha Settings.  # noqa: E501

        :return: The captcha_settings of this ServerSettings.  # noqa: E501
        :rtype: CaptchaSettings
        """
        return self._captcha_settings

    @captcha_settings.setter
    def captcha_settings(self, captcha_settings):
        """Sets the captcha_settings of this ServerSettings.

        Captcha Settings.  # noqa: E501

        :param captcha_settings: The captcha_settings of this ServerSettings.  # noqa: E501
        :type: CaptchaSettings
        """

        self._captcha_settings = captcha_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServerSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServerSettings):
            return True

        return self.to_dict() != other.to_dict()
