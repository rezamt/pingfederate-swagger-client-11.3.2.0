# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class KeyPairRotationSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'creation_buffer_days': 'int',
        'activation_buffer_days': 'int',
        'valid_days': 'int',
        'key_algorithm': 'str',
        'key_size': 'int',
        'signature_algorithm': 'str'
    }

    attribute_map = {
        'id': 'id',
        'creation_buffer_days': 'creationBufferDays',
        'activation_buffer_days': 'activationBufferDays',
        'valid_days': 'validDays',
        'key_algorithm': 'keyAlgorithm',
        'key_size': 'keySize',
        'signature_algorithm': 'signatureAlgorithm'
    }

    def __init__(self, id=None, creation_buffer_days=None, activation_buffer_days=None, valid_days=None, key_algorithm=None, key_size=None, signature_algorithm=None, _configuration=None):  # noqa: E501
        """KeyPairRotationSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._creation_buffer_days = None
        self._activation_buffer_days = None
        self._valid_days = None
        self._key_algorithm = None
        self._key_size = None
        self._signature_algorithm = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.creation_buffer_days = creation_buffer_days
        self.activation_buffer_days = activation_buffer_days
        if valid_days is not None:
            self.valid_days = valid_days
        if key_algorithm is not None:
            self.key_algorithm = key_algorithm
        if key_size is not None:
            self.key_size = key_size
        if signature_algorithm is not None:
            self.signature_algorithm = signature_algorithm

    @property
    def id(self):
        """Gets the id of this KeyPairRotationSettings.  # noqa: E501


        :return: The id of this KeyPairRotationSettings.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this KeyPairRotationSettings.


        :param id: The id of this KeyPairRotationSettings.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def creation_buffer_days(self):
        """Gets the creation_buffer_days of this KeyPairRotationSettings.  # noqa: E501

        Buffer days before key pair expiration for creation of a new key pair.  # noqa: E501

        :return: The creation_buffer_days of this KeyPairRotationSettings.  # noqa: E501
        :rtype: int
        """
        return self._creation_buffer_days

    @creation_buffer_days.setter
    def creation_buffer_days(self, creation_buffer_days):
        """Sets the creation_buffer_days of this KeyPairRotationSettings.

        Buffer days before key pair expiration for creation of a new key pair.  # noqa: E501

        :param creation_buffer_days: The creation_buffer_days of this KeyPairRotationSettings.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and creation_buffer_days is None:
            raise ValueError("Invalid value for `creation_buffer_days`, must not be `None`")  # noqa: E501

        self._creation_buffer_days = creation_buffer_days

    @property
    def activation_buffer_days(self):
        """Gets the activation_buffer_days of this KeyPairRotationSettings.  # noqa: E501

        Buffer days before key pair expiration for activation of the new key pair.  # noqa: E501

        :return: The activation_buffer_days of this KeyPairRotationSettings.  # noqa: E501
        :rtype: int
        """
        return self._activation_buffer_days

    @activation_buffer_days.setter
    def activation_buffer_days(self, activation_buffer_days):
        """Sets the activation_buffer_days of this KeyPairRotationSettings.

        Buffer days before key pair expiration for activation of the new key pair.  # noqa: E501

        :param activation_buffer_days: The activation_buffer_days of this KeyPairRotationSettings.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and activation_buffer_days is None:
            raise ValueError("Invalid value for `activation_buffer_days`, must not be `None`")  # noqa: E501

        self._activation_buffer_days = activation_buffer_days

    @property
    def valid_days(self):
        """Gets the valid_days of this KeyPairRotationSettings.  # noqa: E501

        Valid days for the new key pair to be created. If this property is unset, the validity days of the original key pair will be used.  # noqa: E501

        :return: The valid_days of this KeyPairRotationSettings.  # noqa: E501
        :rtype: int
        """
        return self._valid_days

    @valid_days.setter
    def valid_days(self, valid_days):
        """Sets the valid_days of this KeyPairRotationSettings.

        Valid days for the new key pair to be created. If this property is unset, the validity days of the original key pair will be used.  # noqa: E501

        :param valid_days: The valid_days of this KeyPairRotationSettings.  # noqa: E501
        :type: int
        """

        self._valid_days = valid_days

    @property
    def key_algorithm(self):
        """Gets the key_algorithm of this KeyPairRotationSettings.  # noqa: E501

        Key algorithm to be used while creating a new key pair. If this property is unset, the key algorithm of the original key pair will be used. Supported algorithms are available through the /keyPairs/keyAlgorithms endpoint.  # noqa: E501

        :return: The key_algorithm of this KeyPairRotationSettings.  # noqa: E501
        :rtype: str
        """
        return self._key_algorithm

    @key_algorithm.setter
    def key_algorithm(self, key_algorithm):
        """Sets the key_algorithm of this KeyPairRotationSettings.

        Key algorithm to be used while creating a new key pair. If this property is unset, the key algorithm of the original key pair will be used. Supported algorithms are available through the /keyPairs/keyAlgorithms endpoint.  # noqa: E501

        :param key_algorithm: The key_algorithm of this KeyPairRotationSettings.  # noqa: E501
        :type: str
        """

        self._key_algorithm = key_algorithm

    @property
    def key_size(self):
        """Gets the key_size of this KeyPairRotationSettings.  # noqa: E501

        Key size, in bits. If this property is unset, the key size of the original key pair will be used. Supported key sizes are available through the /keyPairs/keyAlgorithms endpoint.  # noqa: E501

        :return: The key_size of this KeyPairRotationSettings.  # noqa: E501
        :rtype: int
        """
        return self._key_size

    @key_size.setter
    def key_size(self, key_size):
        """Sets the key_size of this KeyPairRotationSettings.

        Key size, in bits. If this property is unset, the key size of the original key pair will be used. Supported key sizes are available through the /keyPairs/keyAlgorithms endpoint.  # noqa: E501

        :param key_size: The key_size of this KeyPairRotationSettings.  # noqa: E501
        :type: int
        """

        self._key_size = key_size

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this KeyPairRotationSettings.  # noqa: E501

        Required if the original key pair used SHA1 algorithm. If this property is unset, the default signature algorithm of the original key pair will be used. Supported signature algorithms are available through the /keyPairs/keyAlgorithms endpoint.  # noqa: E501

        :return: The signature_algorithm of this KeyPairRotationSettings.  # noqa: E501
        :rtype: str
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this KeyPairRotationSettings.

        Required if the original key pair used SHA1 algorithm. If this property is unset, the default signature algorithm of the original key pair will be used. Supported signature algorithms are available through the /keyPairs/keyAlgorithms endpoint.  # noqa: E501

        :param signature_algorithm: The signature_algorithm of this KeyPairRotationSettings.  # noqa: E501
        :type: str
        """

        self._signature_algorithm = signature_algorithm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KeyPairRotationSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeyPairRotationSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KeyPairRotationSettings):
            return True

        return self.to_dict() != other.to_dict()
