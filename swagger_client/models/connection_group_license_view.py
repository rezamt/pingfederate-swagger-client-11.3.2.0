# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ConnectionGroupLicenseView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'connection_count': 'int',
        'start_date': 'datetime',
        'end_date': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'connection_count': 'connectionCount',
        'start_date': 'startDate',
        'end_date': 'endDate'
    }

    def __init__(self, name=None, connection_count=None, start_date=None, end_date=None, _configuration=None):  # noqa: E501
        """ConnectionGroupLicenseView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._connection_count = None
        self._start_date = None
        self._end_date = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if connection_count is not None:
            self.connection_count = connection_count
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date

    @property
    def name(self):
        """Gets the name of this ConnectionGroupLicenseView.  # noqa: E501

        Group name from the license file.  # noqa: E501

        :return: The name of this ConnectionGroupLicenseView.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectionGroupLicenseView.

        Group name from the license file.  # noqa: E501

        :param name: The name of this ConnectionGroupLicenseView.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def connection_count(self):
        """Gets the connection_count of this ConnectionGroupLicenseView.  # noqa: E501

        Maximum number of connections permitted under the group.  # noqa: E501

        :return: The connection_count of this ConnectionGroupLicenseView.  # noqa: E501
        :rtype: int
        """
        return self._connection_count

    @connection_count.setter
    def connection_count(self, connection_count):
        """Sets the connection_count of this ConnectionGroupLicenseView.

        Maximum number of connections permitted under the group.  # noqa: E501

        :param connection_count: The connection_count of this ConnectionGroupLicenseView.  # noqa: E501
        :type: int
        """

        self._connection_count = connection_count

    @property
    def start_date(self):
        """Gets the start_date of this ConnectionGroupLicenseView.  # noqa: E501

        Start date for the group.  # noqa: E501

        :return: The start_date of this ConnectionGroupLicenseView.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ConnectionGroupLicenseView.

        Start date for the group.  # noqa: E501

        :param start_date: The start_date of this ConnectionGroupLicenseView.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this ConnectionGroupLicenseView.  # noqa: E501

        End date for the group.  # noqa: E501

        :return: The end_date of this ConnectionGroupLicenseView.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ConnectionGroupLicenseView.

        End date for the group.  # noqa: E501

        :param end_date: The end_date of this ConnectionGroupLicenseView.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectionGroupLicenseView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectionGroupLicenseView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConnectionGroupLicenseView):
            return True

        return self.to_dict() != other.to_dict()
