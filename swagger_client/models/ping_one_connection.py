# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PingOneConnection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'active': 'bool',
        'credential': 'str',
        'encrypted_credential': 'str',
        'credential_id': 'str',
        'ping_one_connection_id': 'str',
        'environment_id': 'str',
        'creation_date': 'datetime',
        'organization_name': 'str',
        'region': 'str',
        'ping_one_management_api_endpoint': 'str',
        'ping_one_authentication_api_endpoint': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'active': 'active',
        'credential': 'credential',
        'encrypted_credential': 'encryptedCredential',
        'credential_id': 'credentialId',
        'ping_one_connection_id': 'pingOneConnectionId',
        'environment_id': 'environmentId',
        'creation_date': 'creationDate',
        'organization_name': 'organizationName',
        'region': 'region',
        'ping_one_management_api_endpoint': 'pingOneManagementApiEndpoint',
        'ping_one_authentication_api_endpoint': 'pingOneAuthenticationApiEndpoint'
    }

    def __init__(self, id=None, name=None, description=None, active=None, credential=None, encrypted_credential=None, credential_id=None, ping_one_connection_id=None, environment_id=None, creation_date=None, organization_name=None, region=None, ping_one_management_api_endpoint=None, ping_one_authentication_api_endpoint=None, _configuration=None):  # noqa: E501
        """PingOneConnection - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._active = None
        self._credential = None
        self._encrypted_credential = None
        self._credential_id = None
        self._ping_one_connection_id = None
        self._environment_id = None
        self._creation_date = None
        self._organization_name = None
        self._region = None
        self._ping_one_management_api_endpoint = None
        self._ping_one_authentication_api_endpoint = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if description is not None:
            self.description = description
        if active is not None:
            self.active = active
        if credential is not None:
            self.credential = credential
        if encrypted_credential is not None:
            self.encrypted_credential = encrypted_credential
        if credential_id is not None:
            self.credential_id = credential_id
        if ping_one_connection_id is not None:
            self.ping_one_connection_id = ping_one_connection_id
        if environment_id is not None:
            self.environment_id = environment_id
        if creation_date is not None:
            self.creation_date = creation_date
        if organization_name is not None:
            self.organization_name = organization_name
        if region is not None:
            self.region = region
        if ping_one_management_api_endpoint is not None:
            self.ping_one_management_api_endpoint = ping_one_management_api_endpoint
        if ping_one_authentication_api_endpoint is not None:
            self.ping_one_authentication_api_endpoint = ping_one_authentication_api_endpoint

    @property
    def id(self):
        """Gets the id of this PingOneConnection.  # noqa: E501

        The persistent, unique ID of the connection. This property is system-assigned if not specified.  # noqa: E501

        :return: The id of this PingOneConnection.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PingOneConnection.

        The persistent, unique ID of the connection. This property is system-assigned if not specified.  # noqa: E501

        :param id: The id of this PingOneConnection.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PingOneConnection.  # noqa: E501

        The name of the PingOne connection.  # noqa: E501

        :return: The name of this PingOneConnection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PingOneConnection.

        The name of the PingOne connection.  # noqa: E501

        :param name: The name of this PingOneConnection.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this PingOneConnection.  # noqa: E501

        A description for the PingOne connection.  # noqa: E501

        :return: The description of this PingOneConnection.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PingOneConnection.

        A description for the PingOne connection.  # noqa: E501

        :param description: The description of this PingOneConnection.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def active(self):
        """Gets the active of this PingOneConnection.  # noqa: E501

        Whether or not this connection is active. Defaults to true.  # noqa: E501

        :return: The active of this PingOneConnection.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this PingOneConnection.

        Whether or not this connection is active. Defaults to true.  # noqa: E501

        :param active: The active of this PingOneConnection.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def credential(self):
        """Gets the credential of this PingOneConnection.  # noqa: E501

        The credential for the PingOne connection. To update the credential, specify the plaintext value of the credential in this field. This field will not be populated for GET requests.  # noqa: E501

        :return: The credential of this PingOneConnection.  # noqa: E501
        :rtype: str
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """Sets the credential of this PingOneConnection.

        The credential for the PingOne connection. To update the credential, specify the plaintext value of the credential in this field. This field will not be populated for GET requests.  # noqa: E501

        :param credential: The credential of this PingOneConnection.  # noqa: E501
        :type: str
        """

        self._credential = credential

    @property
    def encrypted_credential(self):
        """Gets the encrypted_credential of this PingOneConnection.  # noqa: E501

        The encrypted credential for the PingOne connection. For POST and PUT requests, if you wish to keep the existing credential, this field should be passed back unchanged.  # noqa: E501

        :return: The encrypted_credential of this PingOneConnection.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_credential

    @encrypted_credential.setter
    def encrypted_credential(self, encrypted_credential):
        """Sets the encrypted_credential of this PingOneConnection.

        The encrypted credential for the PingOne connection. For POST and PUT requests, if you wish to keep the existing credential, this field should be passed back unchanged.  # noqa: E501

        :param encrypted_credential: The encrypted_credential of this PingOneConnection.  # noqa: E501
        :type: str
        """

        self._encrypted_credential = encrypted_credential

    @property
    def credential_id(self):
        """Gets the credential_id of this PingOneConnection.  # noqa: E501

        The ID of the PingOne credential. This field is read only.  # noqa: E501

        :return: The credential_id of this PingOneConnection.  # noqa: E501
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this PingOneConnection.

        The ID of the PingOne credential. This field is read only.  # noqa: E501

        :param credential_id: The credential_id of this PingOneConnection.  # noqa: E501
        :type: str
        """

        self._credential_id = credential_id

    @property
    def ping_one_connection_id(self):
        """Gets the ping_one_connection_id of this PingOneConnection.  # noqa: E501

        The ID of the PingOne connection. This field is read only.  # noqa: E501

        :return: The ping_one_connection_id of this PingOneConnection.  # noqa: E501
        :rtype: str
        """
        return self._ping_one_connection_id

    @ping_one_connection_id.setter
    def ping_one_connection_id(self, ping_one_connection_id):
        """Sets the ping_one_connection_id of this PingOneConnection.

        The ID of the PingOne connection. This field is read only.  # noqa: E501

        :param ping_one_connection_id: The ping_one_connection_id of this PingOneConnection.  # noqa: E501
        :type: str
        """

        self._ping_one_connection_id = ping_one_connection_id

    @property
    def environment_id(self):
        """Gets the environment_id of this PingOneConnection.  # noqa: E501

        The ID of the environment of the PingOne credential. This field is read only.  # noqa: E501

        :return: The environment_id of this PingOneConnection.  # noqa: E501
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this PingOneConnection.

        The ID of the environment of the PingOne credential. This field is read only.  # noqa: E501

        :param environment_id: The environment_id of this PingOneConnection.  # noqa: E501
        :type: str
        """

        self._environment_id = environment_id

    @property
    def creation_date(self):
        """Gets the creation_date of this PingOneConnection.  # noqa: E501

        The creation date of the PingOne connection. This field is read only.  # noqa: E501

        :return: The creation_date of this PingOneConnection.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this PingOneConnection.

        The creation date of the PingOne connection. This field is read only.  # noqa: E501

        :param creation_date: The creation_date of this PingOneConnection.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def organization_name(self):
        """Gets the organization_name of this PingOneConnection.  # noqa: E501

        The name of the organization associated with this PingOne connection. This field is read only.  # noqa: E501

        :return: The organization_name of this PingOneConnection.  # noqa: E501
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this PingOneConnection.

        The name of the organization associated with this PingOne connection. This field is read only.  # noqa: E501

        :param organization_name: The organization_name of this PingOneConnection.  # noqa: E501
        :type: str
        """

        self._organization_name = organization_name

    @property
    def region(self):
        """Gets the region of this PingOneConnection.  # noqa: E501

        The region of the PingOne connection. This field is read only.  # noqa: E501

        :return: The region of this PingOneConnection.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this PingOneConnection.

        The region of the PingOne connection. This field is read only.  # noqa: E501

        :param region: The region of this PingOneConnection.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def ping_one_management_api_endpoint(self):
        """Gets the ping_one_management_api_endpoint of this PingOneConnection.  # noqa: E501

        The PingOne management API endpoint. This field is read only.  # noqa: E501

        :return: The ping_one_management_api_endpoint of this PingOneConnection.  # noqa: E501
        :rtype: str
        """
        return self._ping_one_management_api_endpoint

    @ping_one_management_api_endpoint.setter
    def ping_one_management_api_endpoint(self, ping_one_management_api_endpoint):
        """Sets the ping_one_management_api_endpoint of this PingOneConnection.

        The PingOne management API endpoint. This field is read only.  # noqa: E501

        :param ping_one_management_api_endpoint: The ping_one_management_api_endpoint of this PingOneConnection.  # noqa: E501
        :type: str
        """

        self._ping_one_management_api_endpoint = ping_one_management_api_endpoint

    @property
    def ping_one_authentication_api_endpoint(self):
        """Gets the ping_one_authentication_api_endpoint of this PingOneConnection.  # noqa: E501

        The PingOne authentication API endpoint. This field is read only.  # noqa: E501

        :return: The ping_one_authentication_api_endpoint of this PingOneConnection.  # noqa: E501
        :rtype: str
        """
        return self._ping_one_authentication_api_endpoint

    @ping_one_authentication_api_endpoint.setter
    def ping_one_authentication_api_endpoint(self, ping_one_authentication_api_endpoint):
        """Sets the ping_one_authentication_api_endpoint of this PingOneConnection.

        The PingOne authentication API endpoint. This field is read only.  # noqa: E501

        :param ping_one_authentication_api_endpoint: The ping_one_authentication_api_endpoint of this PingOneConnection.  # noqa: E501
        :type: str
        """

        self._ping_one_authentication_api_endpoint = ping_one_authentication_api_endpoint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PingOneConnection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PingOneConnection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PingOneConnection):
            return True

        return self.to_dict() != other.to_dict()
