# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OcspSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requester_add_nonce': 'bool',
        'responder_url': 'str',
        'responder_cert_reference': 'ResourceLink',
        'current_update_grace_period': 'int',
        'next_update_grace_period': 'int',
        'response_cache_period': 'int',
        'responder_timeout': 'int',
        'action_on_responder_unavailable': 'str',
        'action_on_status_unknown': 'str',
        'action_on_unsuccessful_response': 'str'
    }

    attribute_map = {
        'requester_add_nonce': 'requesterAddNonce',
        'responder_url': 'responderUrl',
        'responder_cert_reference': 'responderCertReference',
        'current_update_grace_period': 'currentUpdateGracePeriod',
        'next_update_grace_period': 'nextUpdateGracePeriod',
        'response_cache_period': 'responseCachePeriod',
        'responder_timeout': 'responderTimeout',
        'action_on_responder_unavailable': 'actionOnResponderUnavailable',
        'action_on_status_unknown': 'actionOnStatusUnknown',
        'action_on_unsuccessful_response': 'actionOnUnsuccessfulResponse'
    }

    def __init__(self, requester_add_nonce=None, responder_url=None, responder_cert_reference=None, current_update_grace_period=None, next_update_grace_period=None, response_cache_period=None, responder_timeout=None, action_on_responder_unavailable=None, action_on_status_unknown=None, action_on_unsuccessful_response=None, _configuration=None):  # noqa: E501
        """OcspSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._requester_add_nonce = None
        self._responder_url = None
        self._responder_cert_reference = None
        self._current_update_grace_period = None
        self._next_update_grace_period = None
        self._response_cache_period = None
        self._responder_timeout = None
        self._action_on_responder_unavailable = None
        self._action_on_status_unknown = None
        self._action_on_unsuccessful_response = None
        self.discriminator = None

        if requester_add_nonce is not None:
            self.requester_add_nonce = requester_add_nonce
        if responder_url is not None:
            self.responder_url = responder_url
        if responder_cert_reference is not None:
            self.responder_cert_reference = responder_cert_reference
        if current_update_grace_period is not None:
            self.current_update_grace_period = current_update_grace_period
        if next_update_grace_period is not None:
            self.next_update_grace_period = next_update_grace_period
        if response_cache_period is not None:
            self.response_cache_period = response_cache_period
        if responder_timeout is not None:
            self.responder_timeout = responder_timeout
        if action_on_responder_unavailable is not None:
            self.action_on_responder_unavailable = action_on_responder_unavailable
        if action_on_status_unknown is not None:
            self.action_on_status_unknown = action_on_status_unknown
        if action_on_unsuccessful_response is not None:
            self.action_on_unsuccessful_response = action_on_unsuccessful_response

    @property
    def requester_add_nonce(self):
        """Gets the requester_add_nonce of this OcspSettings.  # noqa: E501

        Do not allow responder to use cached responses. This setting defaults to disabled.  # noqa: E501

        :return: The requester_add_nonce of this OcspSettings.  # noqa: E501
        :rtype: bool
        """
        return self._requester_add_nonce

    @requester_add_nonce.setter
    def requester_add_nonce(self, requester_add_nonce):
        """Sets the requester_add_nonce of this OcspSettings.

        Do not allow responder to use cached responses. This setting defaults to disabled.  # noqa: E501

        :param requester_add_nonce: The requester_add_nonce of this OcspSettings.  # noqa: E501
        :type: bool
        """

        self._requester_add_nonce = requester_add_nonce

    @property
    def responder_url(self):
        """Gets the responder_url of this OcspSettings.  # noqa: E501

        Default responder URL. This URL is used if the certificate being checked does not specify an OCSP responder URL.  # noqa: E501

        :return: The responder_url of this OcspSettings.  # noqa: E501
        :rtype: str
        """
        return self._responder_url

    @responder_url.setter
    def responder_url(self, responder_url):
        """Sets the responder_url of this OcspSettings.

        Default responder URL. This URL is used if the certificate being checked does not specify an OCSP responder URL.  # noqa: E501

        :param responder_url: The responder_url of this OcspSettings.  # noqa: E501
        :type: str
        """

        self._responder_url = responder_url

    @property
    def responder_cert_reference(self):
        """Gets the responder_cert_reference of this OcspSettings.  # noqa: E501

        Resource link to OCSP responder signature verification certificate. A previously selected certificate will be deselected if this attribute is not defined.  # noqa: E501

        :return: The responder_cert_reference of this OcspSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._responder_cert_reference

    @responder_cert_reference.setter
    def responder_cert_reference(self, responder_cert_reference):
        """Sets the responder_cert_reference of this OcspSettings.

        Resource link to OCSP responder signature verification certificate. A previously selected certificate will be deselected if this attribute is not defined.  # noqa: E501

        :param responder_cert_reference: The responder_cert_reference of this OcspSettings.  # noqa: E501
        :type: ResourceLink
        """

        self._responder_cert_reference = responder_cert_reference

    @property
    def current_update_grace_period(self):
        """Gets the current_update_grace_period of this OcspSettings.  # noqa: E501

        Current update grace period in minutes. This value defaults to \"5\".  # noqa: E501

        :return: The current_update_grace_period of this OcspSettings.  # noqa: E501
        :rtype: int
        """
        return self._current_update_grace_period

    @current_update_grace_period.setter
    def current_update_grace_period(self, current_update_grace_period):
        """Sets the current_update_grace_period of this OcspSettings.

        Current update grace period in minutes. This value defaults to \"5\".  # noqa: E501

        :param current_update_grace_period: The current_update_grace_period of this OcspSettings.  # noqa: E501
        :type: int
        """

        self._current_update_grace_period = current_update_grace_period

    @property
    def next_update_grace_period(self):
        """Gets the next_update_grace_period of this OcspSettings.  # noqa: E501

        Next update grace period in minutes. This value defaults to \"5\".  # noqa: E501

        :return: The next_update_grace_period of this OcspSettings.  # noqa: E501
        :rtype: int
        """
        return self._next_update_grace_period

    @next_update_grace_period.setter
    def next_update_grace_period(self, next_update_grace_period):
        """Sets the next_update_grace_period of this OcspSettings.

        Next update grace period in minutes. This value defaults to \"5\".  # noqa: E501

        :param next_update_grace_period: The next_update_grace_period of this OcspSettings.  # noqa: E501
        :type: int
        """

        self._next_update_grace_period = next_update_grace_period

    @property
    def response_cache_period(self):
        """Gets the response_cache_period of this OcspSettings.  # noqa: E501

        Response cache period in hours. This value defaults to \"48\".  # noqa: E501

        :return: The response_cache_period of this OcspSettings.  # noqa: E501
        :rtype: int
        """
        return self._response_cache_period

    @response_cache_period.setter
    def response_cache_period(self, response_cache_period):
        """Sets the response_cache_period of this OcspSettings.

        Response cache period in hours. This value defaults to \"48\".  # noqa: E501

        :param response_cache_period: The response_cache_period of this OcspSettings.  # noqa: E501
        :type: int
        """

        self._response_cache_period = response_cache_period

    @property
    def responder_timeout(self):
        """Gets the responder_timeout of this OcspSettings.  # noqa: E501

        Responder connection timeout in seconds. This value defaults to \"5\".  # noqa: E501

        :return: The responder_timeout of this OcspSettings.  # noqa: E501
        :rtype: int
        """
        return self._responder_timeout

    @responder_timeout.setter
    def responder_timeout(self, responder_timeout):
        """Sets the responder_timeout of this OcspSettings.

        Responder connection timeout in seconds. This value defaults to \"5\".  # noqa: E501

        :param responder_timeout: The responder_timeout of this OcspSettings.  # noqa: E501
        :type: int
        """

        self._responder_timeout = responder_timeout

    @property
    def action_on_responder_unavailable(self):
        """Gets the action_on_responder_unavailable of this OcspSettings.  # noqa: E501

        Action on responder unavailable. This value defaults to  \"CONTINUE\".  # noqa: E501

        :return: The action_on_responder_unavailable of this OcspSettings.  # noqa: E501
        :rtype: str
        """
        return self._action_on_responder_unavailable

    @action_on_responder_unavailable.setter
    def action_on_responder_unavailable(self, action_on_responder_unavailable):
        """Sets the action_on_responder_unavailable of this OcspSettings.

        Action on responder unavailable. This value defaults to  \"CONTINUE\".  # noqa: E501

        :param action_on_responder_unavailable: The action_on_responder_unavailable of this OcspSettings.  # noqa: E501
        :type: str
        """

        self._action_on_responder_unavailable = action_on_responder_unavailable

    @property
    def action_on_status_unknown(self):
        """Gets the action_on_status_unknown of this OcspSettings.  # noqa: E501

        Action on status unknown. This value defaults to  \"FAIL\".  # noqa: E501

        :return: The action_on_status_unknown of this OcspSettings.  # noqa: E501
        :rtype: str
        """
        return self._action_on_status_unknown

    @action_on_status_unknown.setter
    def action_on_status_unknown(self, action_on_status_unknown):
        """Sets the action_on_status_unknown of this OcspSettings.

        Action on status unknown. This value defaults to  \"FAIL\".  # noqa: E501

        :param action_on_status_unknown: The action_on_status_unknown of this OcspSettings.  # noqa: E501
        :type: str
        """

        self._action_on_status_unknown = action_on_status_unknown

    @property
    def action_on_unsuccessful_response(self):
        """Gets the action_on_unsuccessful_response of this OcspSettings.  # noqa: E501

        Action on unsuccessful response. This value defaults to  \"FAIL\".  # noqa: E501

        :return: The action_on_unsuccessful_response of this OcspSettings.  # noqa: E501
        :rtype: str
        """
        return self._action_on_unsuccessful_response

    @action_on_unsuccessful_response.setter
    def action_on_unsuccessful_response(self, action_on_unsuccessful_response):
        """Sets the action_on_unsuccessful_response of this OcspSettings.

        Action on unsuccessful response. This value defaults to  \"FAIL\".  # noqa: E501

        :param action_on_unsuccessful_response: The action_on_unsuccessful_response of this OcspSettings.  # noqa: E501
        :type: str
        """

        self._action_on_unsuccessful_response = action_on_unsuccessful_response

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OcspSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OcspSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OcspSettings):
            return True

        return self.to_dict() != other.to_dict()
