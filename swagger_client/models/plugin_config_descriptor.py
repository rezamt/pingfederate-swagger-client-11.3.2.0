# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PluginConfigDescriptor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'fields': 'list[FieldDescriptor]',
        'tables': 'list[TableDescriptor]',
        'action_descriptors': 'list[ActionDescriptor]'
    }

    attribute_map = {
        'description': 'description',
        'fields': 'fields',
        'tables': 'tables',
        'action_descriptors': 'actionDescriptors'
    }

    def __init__(self, description=None, fields=None, tables=None, action_descriptors=None, _configuration=None):  # noqa: E501
        """PluginConfigDescriptor - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._fields = None
        self._tables = None
        self._action_descriptors = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if fields is not None:
            self.fields = fields
        if tables is not None:
            self.tables = tables
        if action_descriptors is not None:
            self.action_descriptors = action_descriptors

    @property
    def description(self):
        """Gets the description of this PluginConfigDescriptor.  # noqa: E501

        The description of this plugin.  # noqa: E501

        :return: The description of this PluginConfigDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PluginConfigDescriptor.

        The description of this plugin.  # noqa: E501

        :param description: The description of this PluginConfigDescriptor.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def fields(self):
        """Gets the fields of this PluginConfigDescriptor.  # noqa: E501

        The configuration fields available for this plugin.  # noqa: E501

        :return: The fields of this PluginConfigDescriptor.  # noqa: E501
        :rtype: list[FieldDescriptor]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this PluginConfigDescriptor.

        The configuration fields available for this plugin.  # noqa: E501

        :param fields: The fields of this PluginConfigDescriptor.  # noqa: E501
        :type: list[FieldDescriptor]
        """

        self._fields = fields

    @property
    def tables(self):
        """Gets the tables of this PluginConfigDescriptor.  # noqa: E501

        Configuration tables available for this plugin.  # noqa: E501

        :return: The tables of this PluginConfigDescriptor.  # noqa: E501
        :rtype: list[TableDescriptor]
        """
        return self._tables

    @tables.setter
    def tables(self, tables):
        """Sets the tables of this PluginConfigDescriptor.

        Configuration tables available for this plugin.  # noqa: E501

        :param tables: The tables of this PluginConfigDescriptor.  # noqa: E501
        :type: list[TableDescriptor]
        """

        self._tables = tables

    @property
    def action_descriptors(self):
        """Gets the action_descriptors of this PluginConfigDescriptor.  # noqa: E501

        The available actions for this plugin.  # noqa: E501

        :return: The action_descriptors of this PluginConfigDescriptor.  # noqa: E501
        :rtype: list[ActionDescriptor]
        """
        return self._action_descriptors

    @action_descriptors.setter
    def action_descriptors(self, action_descriptors):
        """Sets the action_descriptors of this PluginConfigDescriptor.

        The available actions for this plugin.  # noqa: E501

        :param action_descriptors: The action_descriptors of this PluginConfigDescriptor.  # noqa: E501
        :type: list[ActionDescriptor]
        """

        self._action_descriptors = action_descriptors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PluginConfigDescriptor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PluginConfigDescriptor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PluginConfigDescriptor):
            return True

        return self.to_dict() != other.to_dict()
