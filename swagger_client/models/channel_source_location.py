# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ChannelSourceLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_dn': 'str',
        'filter': 'str',
        'nested_search': 'bool'
    }

    attribute_map = {
        'group_dn': 'groupDN',
        'filter': 'filter',
        'nested_search': 'nestedSearch'
    }

    def __init__(self, group_dn=None, filter=None, nested_search=None, _configuration=None):  # noqa: E501
        """ChannelSourceLocation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._group_dn = None
        self._filter = None
        self._nested_search = None
        self.discriminator = None

        if group_dn is not None:
            self.group_dn = group_dn
        if filter is not None:
            self.filter = filter
        if nested_search is not None:
            self.nested_search = nested_search

    @property
    def group_dn(self):
        """Gets the group_dn of this ChannelSourceLocation.  # noqa: E501

        The group DN for users or groups.  # noqa: E501

        :return: The group_dn of this ChannelSourceLocation.  # noqa: E501
        :rtype: str
        """
        return self._group_dn

    @group_dn.setter
    def group_dn(self, group_dn):
        """Sets the group_dn of this ChannelSourceLocation.

        The group DN for users or groups.  # noqa: E501

        :param group_dn: The group_dn of this ChannelSourceLocation.  # noqa: E501
        :type: str
        """

        self._group_dn = group_dn

    @property
    def filter(self):
        """Gets the filter of this ChannelSourceLocation.  # noqa: E501

        An LDAP filter.  # noqa: E501

        :return: The filter of this ChannelSourceLocation.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ChannelSourceLocation.

        An LDAP filter.  # noqa: E501

        :param filter: The filter of this ChannelSourceLocation.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def nested_search(self):
        """Gets the nested_search of this ChannelSourceLocation.  # noqa: E501

        Indicates whether the search is nested.  # noqa: E501

        :return: The nested_search of this ChannelSourceLocation.  # noqa: E501
        :rtype: bool
        """
        return self._nested_search

    @nested_search.setter
    def nested_search(self, nested_search):
        """Sets the nested_search of this ChannelSourceLocation.

        Indicates whether the search is nested.  # noqa: E501

        :param nested_search: The nested_search of this ChannelSourceLocation.  # noqa: E501
        :type: bool
        """

        self._nested_search = nested_search

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChannelSourceLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChannelSourceLocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChannelSourceLocation):
            return True

        return self.to_dict() != other.to_dict()
