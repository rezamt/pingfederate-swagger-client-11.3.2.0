# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ActionDescriptor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'download': 'bool',
        'download_content_type': 'str',
        'download_file_name': 'str',
        'parameters': 'list[FieldDescriptor]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'download': 'download',
        'download_content_type': 'downloadContentType',
        'download_file_name': 'downloadFileName',
        'parameters': 'parameters'
    }

    def __init__(self, name=None, description=None, download=None, download_content_type=None, download_file_name=None, parameters=None, _configuration=None):  # noqa: E501
        """ActionDescriptor - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._download = None
        self._download_content_type = None
        self._download_file_name = None
        self._parameters = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if download is not None:
            self.download = download
        if download_content_type is not None:
            self.download_content_type = download_content_type
        if download_file_name is not None:
            self.download_file_name = download_file_name
        if parameters is not None:
            self.parameters = parameters

    @property
    def name(self):
        """Gets the name of this ActionDescriptor.  # noqa: E501

        The name of this action  # noqa: E501

        :return: The name of this ActionDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActionDescriptor.

        The name of this action  # noqa: E501

        :param name: The name of this ActionDescriptor.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ActionDescriptor.  # noqa: E501

        The description of this action  # noqa: E501

        :return: The description of this ActionDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActionDescriptor.

        The description of this action  # noqa: E501

        :param description: The description of this ActionDescriptor.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def download(self):
        """Gets the download of this ActionDescriptor.  # noqa: E501

        Whether this action will trigger a download or invoke an internal action that will return a string result.  # noqa: E501

        :return: The download of this ActionDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this ActionDescriptor.

        Whether this action will trigger a download or invoke an internal action that will return a string result.  # noqa: E501

        :param download: The download of this ActionDescriptor.  # noqa: E501
        :type: bool
        """

        self._download = download

    @property
    def download_content_type(self):
        """Gets the download_content_type of this ActionDescriptor.  # noqa: E501

        If this is a download, this is the Content-Type of the downloaded file. Otherwise, this is null.  # noqa: E501

        :return: The download_content_type of this ActionDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._download_content_type

    @download_content_type.setter
    def download_content_type(self, download_content_type):
        """Sets the download_content_type of this ActionDescriptor.

        If this is a download, this is the Content-Type of the downloaded file. Otherwise, this is null.  # noqa: E501

        :param download_content_type: The download_content_type of this ActionDescriptor.  # noqa: E501
        :type: str
        """

        self._download_content_type = download_content_type

    @property
    def download_file_name(self):
        """Gets the download_file_name of this ActionDescriptor.  # noqa: E501

        If this is a download, this is the suggested file name of the downloaded file. Otherwise, this is null.  # noqa: E501

        :return: The download_file_name of this ActionDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._download_file_name

    @download_file_name.setter
    def download_file_name(self, download_file_name):
        """Sets the download_file_name of this ActionDescriptor.

        If this is a download, this is the suggested file name of the downloaded file. Otherwise, this is null.  # noqa: E501

        :param download_file_name: The download_file_name of this ActionDescriptor.  # noqa: E501
        :type: str
        """

        self._download_file_name = download_file_name

    @property
    def parameters(self):
        """Gets the parameters of this ActionDescriptor.  # noqa: E501

        List of parameters for this action.  # noqa: E501

        :return: The parameters of this ActionDescriptor.  # noqa: E501
        :rtype: list[FieldDescriptor]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ActionDescriptor.

        List of parameters for this action.  # noqa: E501

        :param parameters: The parameters of this ActionDescriptor.  # noqa: E501
        :type: list[FieldDescriptor]
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActionDescriptor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionDescriptor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActionDescriptor):
            return True

        return self.to_dict() != other.to_dict()
