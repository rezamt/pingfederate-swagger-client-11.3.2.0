# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TextAreaFieldDescriptor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rows': 'int',
        'columns': 'int'
    }

    attribute_map = {
        'rows': 'rows',
        'columns': 'columns'
    }

    def __init__(self, rows=None, columns=None, _configuration=None):  # noqa: E501
        """TextAreaFieldDescriptor - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._rows = None
        self._columns = None
        self.discriminator = None

        if rows is not None:
            self.rows = rows
        if columns is not None:
            self.columns = columns

    @property
    def rows(self):
        """Gets the rows of this TextAreaFieldDescriptor.  # noqa: E501

        The number of rows for the text box.  # noqa: E501

        :return: The rows of this TextAreaFieldDescriptor.  # noqa: E501
        :rtype: int
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this TextAreaFieldDescriptor.

        The number of rows for the text box.  # noqa: E501

        :param rows: The rows of this TextAreaFieldDescriptor.  # noqa: E501
        :type: int
        """

        self._rows = rows

    @property
    def columns(self):
        """Gets the columns of this TextAreaFieldDescriptor.  # noqa: E501

        The number of columns for the text box.  # noqa: E501

        :return: The columns of this TextAreaFieldDescriptor.  # noqa: E501
        :rtype: int
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this TextAreaFieldDescriptor.

        The number of columns for the text box.  # noqa: E501

        :param columns: The columns of this TextAreaFieldDescriptor.  # noqa: E501
        :type: int
        """

        self._columns = columns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TextAreaFieldDescriptor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TextAreaFieldDescriptor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TextAreaFieldDescriptor):
            return True

        return self.to_dict() != other.to_dict()
