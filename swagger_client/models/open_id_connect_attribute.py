# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OpenIdConnectAttribute(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'include_in_id_token': 'bool',
        'include_in_user_info': 'bool',
        'multi_valued': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'include_in_id_token': 'includeInIdToken',
        'include_in_user_info': 'includeInUserInfo',
        'multi_valued': 'multiValued'
    }

    def __init__(self, name=None, include_in_id_token=None, include_in_user_info=None, multi_valued=None, _configuration=None):  # noqa: E501
        """OpenIdConnectAttribute - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._include_in_id_token = None
        self._include_in_user_info = None
        self._multi_valued = None
        self.discriminator = None

        self.name = name
        if include_in_id_token is not None:
            self.include_in_id_token = include_in_id_token
        if include_in_user_info is not None:
            self.include_in_user_info = include_in_user_info
        if multi_valued is not None:
            self.multi_valued = multi_valued

    @property
    def name(self):
        """Gets the name of this OpenIdConnectAttribute.  # noqa: E501

        The name of this attribute.  # noqa: E501

        :return: The name of this OpenIdConnectAttribute.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OpenIdConnectAttribute.

        The name of this attribute.  # noqa: E501

        :param name: The name of this OpenIdConnectAttribute.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def include_in_id_token(self):
        """Gets the include_in_id_token of this OpenIdConnectAttribute.  # noqa: E501

        Attribute is included in the ID Token.  # noqa: E501

        :return: The include_in_id_token of this OpenIdConnectAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._include_in_id_token

    @include_in_id_token.setter
    def include_in_id_token(self, include_in_id_token):
        """Sets the include_in_id_token of this OpenIdConnectAttribute.

        Attribute is included in the ID Token.  # noqa: E501

        :param include_in_id_token: The include_in_id_token of this OpenIdConnectAttribute.  # noqa: E501
        :type: bool
        """

        self._include_in_id_token = include_in_id_token

    @property
    def include_in_user_info(self):
        """Gets the include_in_user_info of this OpenIdConnectAttribute.  # noqa: E501

        Attribute is included in the User Info.  # noqa: E501

        :return: The include_in_user_info of this OpenIdConnectAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._include_in_user_info

    @include_in_user_info.setter
    def include_in_user_info(self, include_in_user_info):
        """Sets the include_in_user_info of this OpenIdConnectAttribute.

        Attribute is included in the User Info.  # noqa: E501

        :param include_in_user_info: The include_in_user_info of this OpenIdConnectAttribute.  # noqa: E501
        :type: bool
        """

        self._include_in_user_info = include_in_user_info

    @property
    def multi_valued(self):
        """Gets the multi_valued of this OpenIdConnectAttribute.  # noqa: E501

        Indicates whether attribute value is always returned as an array.  # noqa: E501

        :return: The multi_valued of this OpenIdConnectAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._multi_valued

    @multi_valued.setter
    def multi_valued(self, multi_valued):
        """Sets the multi_valued of this OpenIdConnectAttribute.

        Indicates whether attribute value is always returned as an array.  # noqa: E501

        :param multi_valued: The multi_valued of this OpenIdConnectAttribute.  # noqa: E501
        :type: bool
        """

        self._multi_valued = multi_valued

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenIdConnectAttribute, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenIdConnectAttribute):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OpenIdConnectAttribute):
            return True

        return self.to_dict() != other.to_dict()
