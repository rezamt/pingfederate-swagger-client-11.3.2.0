# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FederationInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_url': 'str',
        'saml2_entity_id': 'str',
        'auto_connect_entity_id': 'str',
        'saml1x_issuer_id': 'str',
        'saml1x_source_id': 'str',
        'wsfed_realm': 'str'
    }

    attribute_map = {
        'base_url': 'baseUrl',
        'saml2_entity_id': 'saml2EntityId',
        'auto_connect_entity_id': 'autoConnectEntityId',
        'saml1x_issuer_id': 'saml1xIssuerId',
        'saml1x_source_id': 'saml1xSourceId',
        'wsfed_realm': 'wsfedRealm'
    }

    def __init__(self, base_url=None, saml2_entity_id=None, auto_connect_entity_id=None, saml1x_issuer_id=None, saml1x_source_id=None, wsfed_realm=None, _configuration=None):  # noqa: E501
        """FederationInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._base_url = None
        self._saml2_entity_id = None
        self._auto_connect_entity_id = None
        self._saml1x_issuer_id = None
        self._saml1x_source_id = None
        self._wsfed_realm = None
        self.discriminator = None

        if base_url is not None:
            self.base_url = base_url
        if saml2_entity_id is not None:
            self.saml2_entity_id = saml2_entity_id
        if auto_connect_entity_id is not None:
            self.auto_connect_entity_id = auto_connect_entity_id
        if saml1x_issuer_id is not None:
            self.saml1x_issuer_id = saml1x_issuer_id
        if saml1x_source_id is not None:
            self.saml1x_source_id = saml1x_source_id
        if wsfed_realm is not None:
            self.wsfed_realm = wsfed_realm

    @property
    def base_url(self):
        """Gets the base_url of this FederationInfo.  # noqa: E501

        The fully qualified host name, port, and path (if applicable) on which the PingFederate server runs.  # noqa: E501

        :return: The base_url of this FederationInfo.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this FederationInfo.

        The fully qualified host name, port, and path (if applicable) on which the PingFederate server runs.  # noqa: E501

        :param base_url: The base_url of this FederationInfo.  # noqa: E501
        :type: str
        """

        self._base_url = base_url

    @property
    def saml2_entity_id(self):
        """Gets the saml2_entity_id of this FederationInfo.  # noqa: E501

        This ID defines your organization as the entity operating the server for SAML 2.0 transactions. It is usually defined as an organization's URL or a DNS address; for example: pingidentity.com. The SAML SourceID used for artifact resolution is derived from this ID using SHA1.  # noqa: E501

        :return: The saml2_entity_id of this FederationInfo.  # noqa: E501
        :rtype: str
        """
        return self._saml2_entity_id

    @saml2_entity_id.setter
    def saml2_entity_id(self, saml2_entity_id):
        """Sets the saml2_entity_id of this FederationInfo.

        This ID defines your organization as the entity operating the server for SAML 2.0 transactions. It is usually defined as an organization's URL or a DNS address; for example: pingidentity.com. The SAML SourceID used for artifact resolution is derived from this ID using SHA1.  # noqa: E501

        :param saml2_entity_id: The saml2_entity_id of this FederationInfo.  # noqa: E501
        :type: str
        """

        self._saml2_entity_id = saml2_entity_id

    @property
    def auto_connect_entity_id(self):
        """Gets the auto_connect_entity_id of this FederationInfo.  # noqa: E501

        This property has been deprecated and no longer used  # noqa: E501

        :return: The auto_connect_entity_id of this FederationInfo.  # noqa: E501
        :rtype: str
        """
        return self._auto_connect_entity_id

    @auto_connect_entity_id.setter
    def auto_connect_entity_id(self, auto_connect_entity_id):
        """Sets the auto_connect_entity_id of this FederationInfo.

        This property has been deprecated and no longer used  # noqa: E501

        :param auto_connect_entity_id: The auto_connect_entity_id of this FederationInfo.  # noqa: E501
        :type: str
        """

        self._auto_connect_entity_id = auto_connect_entity_id

    @property
    def saml1x_issuer_id(self):
        """Gets the saml1x_issuer_id of this FederationInfo.  # noqa: E501

        This ID identifies your federation server for SAML 1.x transactions. As with SAML 2.0, it is usually defined as an organization's URL or a DNS address. The SourceID used for artifact resolution is derived from this ID using SHA1.  # noqa: E501

        :return: The saml1x_issuer_id of this FederationInfo.  # noqa: E501
        :rtype: str
        """
        return self._saml1x_issuer_id

    @saml1x_issuer_id.setter
    def saml1x_issuer_id(self, saml1x_issuer_id):
        """Sets the saml1x_issuer_id of this FederationInfo.

        This ID identifies your federation server for SAML 1.x transactions. As with SAML 2.0, it is usually defined as an organization's URL or a DNS address. The SourceID used for artifact resolution is derived from this ID using SHA1.  # noqa: E501

        :param saml1x_issuer_id: The saml1x_issuer_id of this FederationInfo.  # noqa: E501
        :type: str
        """

        self._saml1x_issuer_id = saml1x_issuer_id

    @property
    def saml1x_source_id(self):
        """Gets the saml1x_source_id of this FederationInfo.  # noqa: E501

        If supplied, the Source ID value entered here is used for SAML 1.x, instead of being derived from the SAML 1.x Issuer/Audience.  # noqa: E501

        :return: The saml1x_source_id of this FederationInfo.  # noqa: E501
        :rtype: str
        """
        return self._saml1x_source_id

    @saml1x_source_id.setter
    def saml1x_source_id(self, saml1x_source_id):
        """Sets the saml1x_source_id of this FederationInfo.

        If supplied, the Source ID value entered here is used for SAML 1.x, instead of being derived from the SAML 1.x Issuer/Audience.  # noqa: E501

        :param saml1x_source_id: The saml1x_source_id of this FederationInfo.  # noqa: E501
        :type: str
        """

        self._saml1x_source_id = saml1x_source_id

    @property
    def wsfed_realm(self):
        """Gets the wsfed_realm of this FederationInfo.  # noqa: E501

        The URI of the realm associated with the PingFederate server. A realm represents a single unit of security administration or trust.  # noqa: E501

        :return: The wsfed_realm of this FederationInfo.  # noqa: E501
        :rtype: str
        """
        return self._wsfed_realm

    @wsfed_realm.setter
    def wsfed_realm(self, wsfed_realm):
        """Sets the wsfed_realm of this FederationInfo.

        The URI of the realm associated with the PingFederate server. A realm represents a single unit of security administration or trust.  # noqa: E501

        :param wsfed_realm: The wsfed_realm of this FederationInfo.  # noqa: E501
        :type: str
        """

        self._wsfed_realm = wsfed_realm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FederationInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FederationInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FederationInfo):
            return True

        return self.to_dict() != other.to_dict()
