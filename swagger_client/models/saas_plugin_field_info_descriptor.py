# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SaasPluginFieldInfoDescriptor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'label': 'str',
        'required': 'bool',
        'unique': 'bool',
        'multi_value': 'bool',
        'options': 'list[SaasPluginFieldOption]',
        'min_length': 'int',
        'max_length': 'int',
        'pattern': 'str',
        'notes': 'list[str]',
        'default_value': 'str',
        'ds_ldap_map': 'bool',
        'persist_for_membership': 'bool',
        'attribute_group': 'bool'
    }

    attribute_map = {
        'code': 'code',
        'label': 'label',
        'required': 'required',
        'unique': 'unique',
        'multi_value': 'multiValue',
        'options': 'options',
        'min_length': 'minLength',
        'max_length': 'maxLength',
        'pattern': 'pattern',
        'notes': 'notes',
        'default_value': 'defaultValue',
        'ds_ldap_map': 'dsLdapMap',
        'persist_for_membership': 'persistForMembership',
        'attribute_group': 'attributeGroup'
    }

    def __init__(self, code=None, label=None, required=None, unique=None, multi_value=None, options=None, min_length=None, max_length=None, pattern=None, notes=None, default_value=None, ds_ldap_map=None, persist_for_membership=None, attribute_group=None, _configuration=None):  # noqa: E501
        """SaasPluginFieldInfoDescriptor - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._code = None
        self._label = None
        self._required = None
        self._unique = None
        self._multi_value = None
        self._options = None
        self._min_length = None
        self._max_length = None
        self._pattern = None
        self._notes = None
        self._default_value = None
        self._ds_ldap_map = None
        self._persist_for_membership = None
        self._attribute_group = None
        self.discriminator = None

        self.code = code
        self.label = label
        if required is not None:
            self.required = required
        if unique is not None:
            self.unique = unique
        if multi_value is not None:
            self.multi_value = multi_value
        if options is not None:
            self.options = options
        if min_length is not None:
            self.min_length = min_length
        if max_length is not None:
            self.max_length = max_length
        if pattern is not None:
            self.pattern = pattern
        if notes is not None:
            self.notes = notes
        if default_value is not None:
            self.default_value = default_value
        if ds_ldap_map is not None:
            self.ds_ldap_map = ds_ldap_map
        if persist_for_membership is not None:
            self.persist_for_membership = persist_for_membership
        if attribute_group is not None:
            self.attribute_group = attribute_group

    @property
    def code(self):
        """Gets the code of this SaasPluginFieldInfoDescriptor.  # noqa: E501

        The name or code that represents a field.  # noqa: E501

        :return: The code of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this SaasPluginFieldInfoDescriptor.

        The name or code that represents a field.  # noqa: E501

        :param code: The code of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def label(self):
        """Gets the label of this SaasPluginFieldInfoDescriptor.  # noqa: E501

        The label for a field.  # noqa: E501

        :return: The label of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this SaasPluginFieldInfoDescriptor.

        The label for a field.  # noqa: E501

        :param label: The label of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def required(self):
        """Gets the required of this SaasPluginFieldInfoDescriptor.  # noqa: E501

        Indicates whether a value is required for this field.  # noqa: E501

        :return: The required of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this SaasPluginFieldInfoDescriptor.

        Indicates whether a value is required for this field.  # noqa: E501

        :param required: The required of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def unique(self):
        """Gets the unique of this SaasPluginFieldInfoDescriptor.  # noqa: E501

        indicates whether the value of this field is unique.  # noqa: E501

        :return: The unique of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._unique

    @unique.setter
    def unique(self, unique):
        """Sets the unique of this SaasPluginFieldInfoDescriptor.

        indicates whether the value of this field is unique.  # noqa: E501

        :param unique: The unique of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :type: bool
        """

        self._unique = unique

    @property
    def multi_value(self):
        """Gets the multi_value of this SaasPluginFieldInfoDescriptor.  # noqa: E501

        Whether the field can have multiple values.  # noqa: E501

        :return: The multi_value of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._multi_value

    @multi_value.setter
    def multi_value(self, multi_value):
        """Sets the multi_value of this SaasPluginFieldInfoDescriptor.

        Whether the field can have multiple values.  # noqa: E501

        :param multi_value: The multi_value of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :type: bool
        """

        self._multi_value = multi_value

    @property
    def options(self):
        """Gets the options of this SaasPluginFieldInfoDescriptor.  # noqa: E501

        List of Option values available for this field.  # noqa: E501

        :return: The options of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :rtype: list[SaasPluginFieldOption]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this SaasPluginFieldInfoDescriptor.

        List of Option values available for this field.  # noqa: E501

        :param options: The options of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :type: list[SaasPluginFieldOption]
        """

        self._options = options

    @property
    def min_length(self):
        """Gets the min_length of this SaasPluginFieldInfoDescriptor.  # noqa: E501

        Minimum character length for a value.  # noqa: E501

        :return: The min_length of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this SaasPluginFieldInfoDescriptor.

        Minimum character length for a value.  # noqa: E501

        :param min_length: The min_length of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :type: int
        """

        self._min_length = min_length

    @property
    def max_length(self):
        """Gets the max_length of this SaasPluginFieldInfoDescriptor.  # noqa: E501

        Maximum character length for a value.  # noqa: E501

        :return: The max_length of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this SaasPluginFieldInfoDescriptor.

        Maximum character length for a value.  # noqa: E501

        :param max_length: The max_length of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :type: int
        """

        self._max_length = max_length

    @property
    def pattern(self):
        """Gets the pattern of this SaasPluginFieldInfoDescriptor.  # noqa: E501

        Pattern used to validate values of this field.  # noqa: E501

        :return: The pattern of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this SaasPluginFieldInfoDescriptor.

        Pattern used to validate values of this field.  # noqa: E501

        :param pattern: The pattern of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :type: str
        """

        self._pattern = pattern

    @property
    def notes(self):
        """Gets the notes of this SaasPluginFieldInfoDescriptor.  # noqa: E501

        Description or notes for the field.  # noqa: E501

        :return: The notes of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :rtype: list[str]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this SaasPluginFieldInfoDescriptor.

        Description or notes for the field.  # noqa: E501

        :param notes: The notes of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :type: list[str]
        """

        self._notes = notes

    @property
    def default_value(self):
        """Gets the default_value of this SaasPluginFieldInfoDescriptor.  # noqa: E501

        Default value for the field.  # noqa: E501

        :return: The default_value of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this SaasPluginFieldInfoDescriptor.

        Default value for the field.  # noqa: E501

        :param default_value: The default_value of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def ds_ldap_map(self):
        """Gets the ds_ldap_map of this SaasPluginFieldInfoDescriptor.  # noqa: E501

        Indicates whether the field can be mapped raw to an LDAP attribute.  # noqa: E501

        :return: The ds_ldap_map of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._ds_ldap_map

    @ds_ldap_map.setter
    def ds_ldap_map(self, ds_ldap_map):
        """Sets the ds_ldap_map of this SaasPluginFieldInfoDescriptor.

        Indicates whether the field can be mapped raw to an LDAP attribute.  # noqa: E501

        :param ds_ldap_map: The ds_ldap_map of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :type: bool
        """

        self._ds_ldap_map = ds_ldap_map

    @property
    def persist_for_membership(self):
        """Gets the persist_for_membership of this SaasPluginFieldInfoDescriptor.  # noqa: E501

        The code that represents the field.  # noqa: E501

        :return: The persist_for_membership of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._persist_for_membership

    @persist_for_membership.setter
    def persist_for_membership(self, persist_for_membership):
        """Sets the persist_for_membership of this SaasPluginFieldInfoDescriptor.

        The code that represents the field.  # noqa: E501

        :param persist_for_membership: The persist_for_membership of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :type: bool
        """

        self._persist_for_membership = persist_for_membership

    @property
    def attribute_group(self):
        """Gets the attribute_group of this SaasPluginFieldInfoDescriptor.  # noqa: E501

        Indicates whether this field belongs to group of attribute such as multivalued or sub-type custom attributes.  # noqa: E501

        :return: The attribute_group of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._attribute_group

    @attribute_group.setter
    def attribute_group(self, attribute_group):
        """Sets the attribute_group of this SaasPluginFieldInfoDescriptor.

        Indicates whether this field belongs to group of attribute such as multivalued or sub-type custom attributes.  # noqa: E501

        :param attribute_group: The attribute_group of this SaasPluginFieldInfoDescriptor.  # noqa: E501
        :type: bool
        """

        self._attribute_group = attribute_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SaasPluginFieldInfoDescriptor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaasPluginFieldInfoDescriptor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SaasPluginFieldInfoDescriptor):
            return True

        return self.to_dict() != other.to_dict()
