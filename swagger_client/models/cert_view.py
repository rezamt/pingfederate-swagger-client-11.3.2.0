# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CertView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'serial_number': 'str',
        'subject_dn': 'str',
        'subject_alternative_names': 'list[str]',
        'issuer_dn': 'str',
        'valid_from': 'datetime',
        'expires': 'datetime',
        'key_algorithm': 'str',
        'key_size': 'int',
        'signature_algorithm': 'str',
        'version': 'int',
        'sha1_fingerprint': 'str',
        'sha256_fingerprint': 'str',
        'status': 'str',
        'crypto_provider': 'str'
    }

    attribute_map = {
        'id': 'id',
        'serial_number': 'serialNumber',
        'subject_dn': 'subjectDN',
        'subject_alternative_names': 'subjectAlternativeNames',
        'issuer_dn': 'issuerDN',
        'valid_from': 'validFrom',
        'expires': 'expires',
        'key_algorithm': 'keyAlgorithm',
        'key_size': 'keySize',
        'signature_algorithm': 'signatureAlgorithm',
        'version': 'version',
        'sha1_fingerprint': 'sha1Fingerprint',
        'sha256_fingerprint': 'sha256Fingerprint',
        'status': 'status',
        'crypto_provider': 'cryptoProvider'
    }

    def __init__(self, id=None, serial_number=None, subject_dn=None, subject_alternative_names=None, issuer_dn=None, valid_from=None, expires=None, key_algorithm=None, key_size=None, signature_algorithm=None, version=None, sha1_fingerprint=None, sha256_fingerprint=None, status=None, crypto_provider=None, _configuration=None):  # noqa: E501
        """CertView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._serial_number = None
        self._subject_dn = None
        self._subject_alternative_names = None
        self._issuer_dn = None
        self._valid_from = None
        self._expires = None
        self._key_algorithm = None
        self._key_size = None
        self._signature_algorithm = None
        self._version = None
        self._sha1_fingerprint = None
        self._sha256_fingerprint = None
        self._status = None
        self._crypto_provider = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if serial_number is not None:
            self.serial_number = serial_number
        if subject_dn is not None:
            self.subject_dn = subject_dn
        if subject_alternative_names is not None:
            self.subject_alternative_names = subject_alternative_names
        if issuer_dn is not None:
            self.issuer_dn = issuer_dn
        if valid_from is not None:
            self.valid_from = valid_from
        if expires is not None:
            self.expires = expires
        if key_algorithm is not None:
            self.key_algorithm = key_algorithm
        if key_size is not None:
            self.key_size = key_size
        if signature_algorithm is not None:
            self.signature_algorithm = signature_algorithm
        if version is not None:
            self.version = version
        if sha1_fingerprint is not None:
            self.sha1_fingerprint = sha1_fingerprint
        if sha256_fingerprint is not None:
            self.sha256_fingerprint = sha256_fingerprint
        if status is not None:
            self.status = status
        if crypto_provider is not None:
            self.crypto_provider = crypto_provider

    @property
    def id(self):
        """Gets the id of this CertView.  # noqa: E501

        The persistent, unique ID for the certificate.  # noqa: E501

        :return: The id of this CertView.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CertView.

        The persistent, unique ID for the certificate.  # noqa: E501

        :param id: The id of this CertView.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def serial_number(self):
        """Gets the serial_number of this CertView.  # noqa: E501

        The serial number assigned by the CA.  # noqa: E501

        :return: The serial_number of this CertView.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this CertView.

        The serial number assigned by the CA.  # noqa: E501

        :param serial_number: The serial_number of this CertView.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def subject_dn(self):
        """Gets the subject_dn of this CertView.  # noqa: E501

        The subject's distinguished name.  # noqa: E501

        :return: The subject_dn of this CertView.  # noqa: E501
        :rtype: str
        """
        return self._subject_dn

    @subject_dn.setter
    def subject_dn(self, subject_dn):
        """Sets the subject_dn of this CertView.

        The subject's distinguished name.  # noqa: E501

        :param subject_dn: The subject_dn of this CertView.  # noqa: E501
        :type: str
        """

        self._subject_dn = subject_dn

    @property
    def subject_alternative_names(self):
        """Gets the subject_alternative_names of this CertView.  # noqa: E501

        The subject alternative names (SAN).  # noqa: E501

        :return: The subject_alternative_names of this CertView.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_alternative_names

    @subject_alternative_names.setter
    def subject_alternative_names(self, subject_alternative_names):
        """Sets the subject_alternative_names of this CertView.

        The subject alternative names (SAN).  # noqa: E501

        :param subject_alternative_names: The subject_alternative_names of this CertView.  # noqa: E501
        :type: list[str]
        """

        self._subject_alternative_names = subject_alternative_names

    @property
    def issuer_dn(self):
        """Gets the issuer_dn of this CertView.  # noqa: E501

        The issuer's distinguished name.  # noqa: E501

        :return: The issuer_dn of this CertView.  # noqa: E501
        :rtype: str
        """
        return self._issuer_dn

    @issuer_dn.setter
    def issuer_dn(self, issuer_dn):
        """Sets the issuer_dn of this CertView.

        The issuer's distinguished name.  # noqa: E501

        :param issuer_dn: The issuer_dn of this CertView.  # noqa: E501
        :type: str
        """

        self._issuer_dn = issuer_dn

    @property
    def valid_from(self):
        """Gets the valid_from of this CertView.  # noqa: E501

        The start date from which the item is valid, in ISO 8601 format (UTC).  # noqa: E501

        :return: The valid_from of this CertView.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this CertView.

        The start date from which the item is valid, in ISO 8601 format (UTC).  # noqa: E501

        :param valid_from: The valid_from of this CertView.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def expires(self):
        """Gets the expires of this CertView.  # noqa: E501

        The end date up until which the item is valid, in ISO 8601 format (UTC).  # noqa: E501

        :return: The expires of this CertView.  # noqa: E501
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this CertView.

        The end date up until which the item is valid, in ISO 8601 format (UTC).  # noqa: E501

        :param expires: The expires of this CertView.  # noqa: E501
        :type: datetime
        """

        self._expires = expires

    @property
    def key_algorithm(self):
        """Gets the key_algorithm of this CertView.  # noqa: E501

        The public key algorithm.  # noqa: E501

        :return: The key_algorithm of this CertView.  # noqa: E501
        :rtype: str
        """
        return self._key_algorithm

    @key_algorithm.setter
    def key_algorithm(self, key_algorithm):
        """Sets the key_algorithm of this CertView.

        The public key algorithm.  # noqa: E501

        :param key_algorithm: The key_algorithm of this CertView.  # noqa: E501
        :type: str
        """

        self._key_algorithm = key_algorithm

    @property
    def key_size(self):
        """Gets the key_size of this CertView.  # noqa: E501

        The public key size.  # noqa: E501

        :return: The key_size of this CertView.  # noqa: E501
        :rtype: int
        """
        return self._key_size

    @key_size.setter
    def key_size(self, key_size):
        """Sets the key_size of this CertView.

        The public key size.  # noqa: E501

        :param key_size: The key_size of this CertView.  # noqa: E501
        :type: int
        """

        self._key_size = key_size

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this CertView.  # noqa: E501

        The signature algorithm.  # noqa: E501

        :return: The signature_algorithm of this CertView.  # noqa: E501
        :rtype: str
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this CertView.

        The signature algorithm.  # noqa: E501

        :param signature_algorithm: The signature_algorithm of this CertView.  # noqa: E501
        :type: str
        """

        self._signature_algorithm = signature_algorithm

    @property
    def version(self):
        """Gets the version of this CertView.  # noqa: E501

        The X.509 version to which the item conforms.  # noqa: E501

        :return: The version of this CertView.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CertView.

        The X.509 version to which the item conforms.  # noqa: E501

        :param version: The version of this CertView.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def sha1_fingerprint(self):
        """Gets the sha1_fingerprint of this CertView.  # noqa: E501

        SHA-1 fingerprint in Hex encoding.  # noqa: E501

        :return: The sha1_fingerprint of this CertView.  # noqa: E501
        :rtype: str
        """
        return self._sha1_fingerprint

    @sha1_fingerprint.setter
    def sha1_fingerprint(self, sha1_fingerprint):
        """Sets the sha1_fingerprint of this CertView.

        SHA-1 fingerprint in Hex encoding.  # noqa: E501

        :param sha1_fingerprint: The sha1_fingerprint of this CertView.  # noqa: E501
        :type: str
        """

        self._sha1_fingerprint = sha1_fingerprint

    @property
    def sha256_fingerprint(self):
        """Gets the sha256_fingerprint of this CertView.  # noqa: E501

        SHA-256 fingerprint in Hex encoding.  # noqa: E501

        :return: The sha256_fingerprint of this CertView.  # noqa: E501
        :rtype: str
        """
        return self._sha256_fingerprint

    @sha256_fingerprint.setter
    def sha256_fingerprint(self, sha256_fingerprint):
        """Sets the sha256_fingerprint of this CertView.

        SHA-256 fingerprint in Hex encoding.  # noqa: E501

        :param sha256_fingerprint: The sha256_fingerprint of this CertView.  # noqa: E501
        :type: str
        """

        self._sha256_fingerprint = sha256_fingerprint

    @property
    def status(self):
        """Gets the status of this CertView.  # noqa: E501

        Status of the item.  # noqa: E501

        :return: The status of this CertView.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CertView.

        Status of the item.  # noqa: E501

        :param status: The status of this CertView.  # noqa: E501
        :type: str
        """
        allowed_values = ["VALID", "EXPIRED", "NOT_YET_VALID", "REVOKED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def crypto_provider(self):
        """Gets the crypto_provider of this CertView.  # noqa: E501

        Cryptographic Provider. This is only applicable if Hybrid HSM mode is true.  # noqa: E501

        :return: The crypto_provider of this CertView.  # noqa: E501
        :rtype: str
        """
        return self._crypto_provider

    @crypto_provider.setter
    def crypto_provider(self, crypto_provider):
        """Sets the crypto_provider of this CertView.

        Cryptographic Provider. This is only applicable if Hybrid HSM mode is true.  # noqa: E501

        :param crypto_provider: The crypto_provider of this CertView.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOCAL", "HSM"]  # noqa: E501
        if (self._configuration.client_side_validation and
                crypto_provider not in allowed_values):
            raise ValueError(
                "Invalid value for `crypto_provider` ({0}), must be one of {1}"  # noqa: E501
                .format(crypto_provider, allowed_values)
            )

        self._crypto_provider = crypto_provider

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CertView):
            return True

        return self.to_dict() != other.to_dict()
