# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class KerberosRealmsSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'force_tcp': 'bool',
        'kdc_retries': 'str',
        'debug_log_output': 'bool',
        'kdc_timeout': 'str',
        'key_set_retention_period_mins': 'int'
    }

    attribute_map = {
        'force_tcp': 'forceTcp',
        'kdc_retries': 'kdcRetries',
        'debug_log_output': 'debugLogOutput',
        'kdc_timeout': 'kdcTimeout',
        'key_set_retention_period_mins': 'keySetRetentionPeriodMins'
    }

    def __init__(self, force_tcp=None, kdc_retries=None, debug_log_output=None, kdc_timeout=None, key_set_retention_period_mins=None, _configuration=None):  # noqa: E501
        """KerberosRealmsSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._force_tcp = None
        self._kdc_retries = None
        self._debug_log_output = None
        self._kdc_timeout = None
        self._key_set_retention_period_mins = None
        self.discriminator = None

        if force_tcp is not None:
            self.force_tcp = force_tcp
        self.kdc_retries = kdc_retries
        if debug_log_output is not None:
            self.debug_log_output = debug_log_output
        self.kdc_timeout = kdc_timeout
        if key_set_retention_period_mins is not None:
            self.key_set_retention_period_mins = key_set_retention_period_mins

    @property
    def force_tcp(self):
        """Gets the force_tcp of this KerberosRealmsSettings.  # noqa: E501

        Reference to the default security.  # noqa: E501

        :return: The force_tcp of this KerberosRealmsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._force_tcp

    @force_tcp.setter
    def force_tcp(self, force_tcp):
        """Sets the force_tcp of this KerberosRealmsSettings.

        Reference to the default security.  # noqa: E501

        :param force_tcp: The force_tcp of this KerberosRealmsSettings.  # noqa: E501
        :type: bool
        """

        self._force_tcp = force_tcp

    @property
    def kdc_retries(self):
        """Gets the kdc_retries of this KerberosRealmsSettings.  # noqa: E501

        Reference to the default Key Distribution Center Retries.  # noqa: E501

        :return: The kdc_retries of this KerberosRealmsSettings.  # noqa: E501
        :rtype: str
        """
        return self._kdc_retries

    @kdc_retries.setter
    def kdc_retries(self, kdc_retries):
        """Sets the kdc_retries of this KerberosRealmsSettings.

        Reference to the default Key Distribution Center Retries.  # noqa: E501

        :param kdc_retries: The kdc_retries of this KerberosRealmsSettings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and kdc_retries is None:
            raise ValueError("Invalid value for `kdc_retries`, must not be `None`")  # noqa: E501

        self._kdc_retries = kdc_retries

    @property
    def debug_log_output(self):
        """Gets the debug_log_output of this KerberosRealmsSettings.  # noqa: E501

        Reference to the default logging.  # noqa: E501

        :return: The debug_log_output of this KerberosRealmsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._debug_log_output

    @debug_log_output.setter
    def debug_log_output(self, debug_log_output):
        """Sets the debug_log_output of this KerberosRealmsSettings.

        Reference to the default logging.  # noqa: E501

        :param debug_log_output: The debug_log_output of this KerberosRealmsSettings.  # noqa: E501
        :type: bool
        """

        self._debug_log_output = debug_log_output

    @property
    def kdc_timeout(self):
        """Gets the kdc_timeout of this KerberosRealmsSettings.  # noqa: E501

        Reference to the default Key Distribution Center Timeout (in seconds).  # noqa: E501

        :return: The kdc_timeout of this KerberosRealmsSettings.  # noqa: E501
        :rtype: str
        """
        return self._kdc_timeout

    @kdc_timeout.setter
    def kdc_timeout(self, kdc_timeout):
        """Sets the kdc_timeout of this KerberosRealmsSettings.

        Reference to the default Key Distribution Center Timeout (in seconds).  # noqa: E501

        :param kdc_timeout: The kdc_timeout of this KerberosRealmsSettings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and kdc_timeout is None:
            raise ValueError("Invalid value for `kdc_timeout`, must not be `None`")  # noqa: E501

        self._kdc_timeout = kdc_timeout

    @property
    def key_set_retention_period_mins(self):
        """Gets the key_set_retention_period_mins of this KerberosRealmsSettings.  # noqa: E501

        The key set retention period in minutes. When 'retainPreviousKeysOnPasswordChange' is set to true for a realm, this setting determines how long keys will be retained after a password change occurs. If this field is omitted in a PUT request, the default of 610 minutes is applied.  # noqa: E501

        :return: The key_set_retention_period_mins of this KerberosRealmsSettings.  # noqa: E501
        :rtype: int
        """
        return self._key_set_retention_period_mins

    @key_set_retention_period_mins.setter
    def key_set_retention_period_mins(self, key_set_retention_period_mins):
        """Sets the key_set_retention_period_mins of this KerberosRealmsSettings.

        The key set retention period in minutes. When 'retainPreviousKeysOnPasswordChange' is set to true for a realm, this setting determines how long keys will be retained after a password change occurs. If this field is omitted in a PUT request, the default of 610 minutes is applied.  # noqa: E501

        :param key_set_retention_period_mins: The key_set_retention_period_mins of this KerberosRealmsSettings.  # noqa: E501
        :type: int
        """

        self._key_set_retention_period_mins = key_set_retention_period_mins

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KerberosRealmsSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KerberosRealmsSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KerberosRealmsSettings):
            return True

        return self.to_dict() != other.to_dict()
