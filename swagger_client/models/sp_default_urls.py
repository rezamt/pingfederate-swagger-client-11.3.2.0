# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SpDefaultUrls(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sso_success_url': 'str',
        'confirm_slo': 'bool',
        'slo_success_url': 'str'
    }

    attribute_map = {
        'sso_success_url': 'ssoSuccessUrl',
        'confirm_slo': 'confirmSlo',
        'slo_success_url': 'sloSuccessUrl'
    }

    def __init__(self, sso_success_url=None, confirm_slo=None, slo_success_url=None, _configuration=None):  # noqa: E501
        """SpDefaultUrls - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sso_success_url = None
        self._confirm_slo = None
        self._slo_success_url = None
        self.discriminator = None

        if sso_success_url is not None:
            self.sso_success_url = sso_success_url
        if confirm_slo is not None:
            self.confirm_slo = confirm_slo
        if slo_success_url is not None:
            self.slo_success_url = slo_success_url

    @property
    def sso_success_url(self):
        """Gets the sso_success_url of this SpDefaultUrls.  # noqa: E501

        Provide the default URL you would like to send the user to when Single Sign On (SSO) has succeeded.  # noqa: E501

        :return: The sso_success_url of this SpDefaultUrls.  # noqa: E501
        :rtype: str
        """
        return self._sso_success_url

    @sso_success_url.setter
    def sso_success_url(self, sso_success_url):
        """Sets the sso_success_url of this SpDefaultUrls.

        Provide the default URL you would like to send the user to when Single Sign On (SSO) has succeeded.  # noqa: E501

        :param sso_success_url: The sso_success_url of this SpDefaultUrls.  # noqa: E501
        :type: str
        """

        self._sso_success_url = sso_success_url

    @property
    def confirm_slo(self):
        """Gets the confirm_slo of this SpDefaultUrls.  # noqa: E501

        Determines whether the user is prompted to confirm Single Logout (SLO). The default is false.  # noqa: E501

        :return: The confirm_slo of this SpDefaultUrls.  # noqa: E501
        :rtype: bool
        """
        return self._confirm_slo

    @confirm_slo.setter
    def confirm_slo(self, confirm_slo):
        """Sets the confirm_slo of this SpDefaultUrls.

        Determines whether the user is prompted to confirm Single Logout (SLO). The default is false.  # noqa: E501

        :param confirm_slo: The confirm_slo of this SpDefaultUrls.  # noqa: E501
        :type: bool
        """

        self._confirm_slo = confirm_slo

    @property
    def slo_success_url(self):
        """Gets the slo_success_url of this SpDefaultUrls.  # noqa: E501

        Provide the default URL you would like to send the user to when Single Logout (SLO) has succeeded.  # noqa: E501

        :return: The slo_success_url of this SpDefaultUrls.  # noqa: E501
        :rtype: str
        """
        return self._slo_success_url

    @slo_success_url.setter
    def slo_success_url(self, slo_success_url):
        """Sets the slo_success_url of this SpDefaultUrls.

        Provide the default URL you would like to send the user to when Single Logout (SLO) has succeeded.  # noqa: E501

        :param slo_success_url: The slo_success_url of this SpDefaultUrls.  # noqa: E501
        :type: str
        """

        self._slo_success_url = slo_success_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpDefaultUrls, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpDefaultUrls):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpDefaultUrls):
            return True

        return self.to_dict() != other.to_dict()
