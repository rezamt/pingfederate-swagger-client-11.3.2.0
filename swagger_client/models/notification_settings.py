# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class NotificationSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'license_events': 'LicenseEventNotificationSettings',
        'certificate_expirations': 'CertificateExpirationNotificationSettings',
        'notify_admin_user_password_changes': 'bool',
        'account_changes_notification_publisher_ref': 'ResourceLink',
        'metadata_notification_settings': 'MetadataEventNotificationSettings'
    }

    attribute_map = {
        'license_events': 'licenseEvents',
        'certificate_expirations': 'certificateExpirations',
        'notify_admin_user_password_changes': 'notifyAdminUserPasswordChanges',
        'account_changes_notification_publisher_ref': 'accountChangesNotificationPublisherRef',
        'metadata_notification_settings': 'metadataNotificationSettings'
    }

    def __init__(self, license_events=None, certificate_expirations=None, notify_admin_user_password_changes=None, account_changes_notification_publisher_ref=None, metadata_notification_settings=None, _configuration=None):  # noqa: E501
        """NotificationSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._license_events = None
        self._certificate_expirations = None
        self._notify_admin_user_password_changes = None
        self._account_changes_notification_publisher_ref = None
        self._metadata_notification_settings = None
        self.discriminator = None

        if license_events is not None:
            self.license_events = license_events
        if certificate_expirations is not None:
            self.certificate_expirations = certificate_expirations
        if notify_admin_user_password_changes is not None:
            self.notify_admin_user_password_changes = notify_admin_user_password_changes
        if account_changes_notification_publisher_ref is not None:
            self.account_changes_notification_publisher_ref = account_changes_notification_publisher_ref
        if metadata_notification_settings is not None:
            self.metadata_notification_settings = metadata_notification_settings

    @property
    def license_events(self):
        """Gets the license_events of this NotificationSettings.  # noqa: E501

        Settings for license event notifications.  # noqa: E501

        :return: The license_events of this NotificationSettings.  # noqa: E501
        :rtype: LicenseEventNotificationSettings
        """
        return self._license_events

    @license_events.setter
    def license_events(self, license_events):
        """Sets the license_events of this NotificationSettings.

        Settings for license event notifications.  # noqa: E501

        :param license_events: The license_events of this NotificationSettings.  # noqa: E501
        :type: LicenseEventNotificationSettings
        """

        self._license_events = license_events

    @property
    def certificate_expirations(self):
        """Gets the certificate_expirations of this NotificationSettings.  # noqa: E501

        Settings for certificate expiration notifications.  # noqa: E501

        :return: The certificate_expirations of this NotificationSettings.  # noqa: E501
        :rtype: CertificateExpirationNotificationSettings
        """
        return self._certificate_expirations

    @certificate_expirations.setter
    def certificate_expirations(self, certificate_expirations):
        """Sets the certificate_expirations of this NotificationSettings.

        Settings for certificate expiration notifications.  # noqa: E501

        :param certificate_expirations: The certificate_expirations of this NotificationSettings.  # noqa: E501
        :type: CertificateExpirationNotificationSettings
        """

        self._certificate_expirations = certificate_expirations

    @property
    def notify_admin_user_password_changes(self):
        """Gets the notify_admin_user_password_changes of this NotificationSettings.  # noqa: E501

        Determines whether admin users are notified through email when their account is changed.  # noqa: E501

        :return: The notify_admin_user_password_changes of this NotificationSettings.  # noqa: E501
        :rtype: bool
        """
        return self._notify_admin_user_password_changes

    @notify_admin_user_password_changes.setter
    def notify_admin_user_password_changes(self, notify_admin_user_password_changes):
        """Sets the notify_admin_user_password_changes of this NotificationSettings.

        Determines whether admin users are notified through email when their account is changed.  # noqa: E501

        :param notify_admin_user_password_changes: The notify_admin_user_password_changes of this NotificationSettings.  # noqa: E501
        :type: bool
        """

        self._notify_admin_user_password_changes = notify_admin_user_password_changes

    @property
    def account_changes_notification_publisher_ref(self):
        """Gets the account_changes_notification_publisher_ref of this NotificationSettings.  # noqa: E501

        Reference to the associated notification publisher for admin user account changes.  # noqa: E501

        :return: The account_changes_notification_publisher_ref of this NotificationSettings.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._account_changes_notification_publisher_ref

    @account_changes_notification_publisher_ref.setter
    def account_changes_notification_publisher_ref(self, account_changes_notification_publisher_ref):
        """Sets the account_changes_notification_publisher_ref of this NotificationSettings.

        Reference to the associated notification publisher for admin user account changes.  # noqa: E501

        :param account_changes_notification_publisher_ref: The account_changes_notification_publisher_ref of this NotificationSettings.  # noqa: E501
        :type: ResourceLink
        """

        self._account_changes_notification_publisher_ref = account_changes_notification_publisher_ref

    @property
    def metadata_notification_settings(self):
        """Gets the metadata_notification_settings of this NotificationSettings.  # noqa: E501

        Settings for metadata update event notifications.  # noqa: E501

        :return: The metadata_notification_settings of this NotificationSettings.  # noqa: E501
        :rtype: MetadataEventNotificationSettings
        """
        return self._metadata_notification_settings

    @metadata_notification_settings.setter
    def metadata_notification_settings(self, metadata_notification_settings):
        """Sets the metadata_notification_settings of this NotificationSettings.

        Settings for metadata update event notifications.  # noqa: E501

        :param metadata_notification_settings: The metadata_notification_settings of this NotificationSettings.  # noqa: E501
        :type: MetadataEventNotificationSettings
        """

        self._metadata_notification_settings = metadata_notification_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NotificationSettings):
            return True

        return self.to_dict() != other.to_dict()
