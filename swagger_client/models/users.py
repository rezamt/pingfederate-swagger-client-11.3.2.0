# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Users(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'write_users': 'WriteUsers',
        'read_users': 'ReadUsers'
    }

    attribute_map = {
        'write_users': 'writeUsers',
        'read_users': 'readUsers'
    }

    def __init__(self, write_users=None, read_users=None, _configuration=None):  # noqa: E501
        """Users - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._write_users = None
        self._read_users = None
        self.discriminator = None

        self.write_users = write_users
        self.read_users = read_users

    @property
    def write_users(self):
        """Gets the write_users of this Users.  # noqa: E501

        Configuration to create a user within the user repository.  # noqa: E501

        :return: The write_users of this Users.  # noqa: E501
        :rtype: WriteUsers
        """
        return self._write_users

    @write_users.setter
    def write_users(self, write_users):
        """Sets the write_users of this Users.

        Configuration to create a user within the user repository.  # noqa: E501

        :param write_users: The write_users of this Users.  # noqa: E501
        :type: WriteUsers
        """
        if self._configuration.client_side_validation and write_users is None:
            raise ValueError("Invalid value for `write_users`, must not be `None`")  # noqa: E501

        self._write_users = write_users

    @property
    def read_users(self):
        """Gets the read_users of this Users.  # noqa: E501

        Configuration to lookup user info within the user repository and respond to incoming SCIM requests.  # noqa: E501

        :return: The read_users of this Users.  # noqa: E501
        :rtype: ReadUsers
        """
        return self._read_users

    @read_users.setter
    def read_users(self, read_users):
        """Sets the read_users of this Users.

        Configuration to lookup user info within the user repository and respond to incoming SCIM requests.  # noqa: E501

        :param read_users: The read_users of this Users.  # noqa: E501
        :type: ReadUsers
        """
        if self._configuration.client_side_validation and read_users is None:
            raise ValueError("Invalid value for `read_users`, must not be `None`")  # noqa: E501

        self._read_users = read_users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Users, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Users):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Users):
            return True

        return self.to_dict() != other.to_dict()
