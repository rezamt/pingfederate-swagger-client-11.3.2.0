# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RequestPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'authenticator_ref': 'ResourceLink',
        'user_code_pcv_ref': 'ResourceLink',
        'transaction_lifetime': 'int',
        'allow_unsigned_login_hint_token': 'bool',
        'require_token_for_identity_hint': 'bool',
        'alternative_login_hint_token_issuers': 'list[AlternativeLoginHintTokenIssuer]',
        'identity_hint_contract': 'IdentityHintContract',
        'identity_hint_contract_fulfillment': 'AttributeMapping',
        'identity_hint_mapping': 'AttributeMapping'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'authenticator_ref': 'authenticatorRef',
        'user_code_pcv_ref': 'userCodePcvRef',
        'transaction_lifetime': 'transactionLifetime',
        'allow_unsigned_login_hint_token': 'allowUnsignedLoginHintToken',
        'require_token_for_identity_hint': 'requireTokenForIdentityHint',
        'alternative_login_hint_token_issuers': 'alternativeLoginHintTokenIssuers',
        'identity_hint_contract': 'identityHintContract',
        'identity_hint_contract_fulfillment': 'identityHintContractFulfillment',
        'identity_hint_mapping': 'identityHintMapping'
    }

    def __init__(self, id=None, name=None, authenticator_ref=None, user_code_pcv_ref=None, transaction_lifetime=None, allow_unsigned_login_hint_token=None, require_token_for_identity_hint=None, alternative_login_hint_token_issuers=None, identity_hint_contract=None, identity_hint_contract_fulfillment=None, identity_hint_mapping=None, _configuration=None):  # noqa: E501
        """RequestPolicy - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._authenticator_ref = None
        self._user_code_pcv_ref = None
        self._transaction_lifetime = None
        self._allow_unsigned_login_hint_token = None
        self._require_token_for_identity_hint = None
        self._alternative_login_hint_token_issuers = None
        self._identity_hint_contract = None
        self._identity_hint_contract_fulfillment = None
        self._identity_hint_mapping = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.authenticator_ref = authenticator_ref
        if user_code_pcv_ref is not None:
            self.user_code_pcv_ref = user_code_pcv_ref
        if transaction_lifetime is not None:
            self.transaction_lifetime = transaction_lifetime
        if allow_unsigned_login_hint_token is not None:
            self.allow_unsigned_login_hint_token = allow_unsigned_login_hint_token
        if require_token_for_identity_hint is not None:
            self.require_token_for_identity_hint = require_token_for_identity_hint
        if alternative_login_hint_token_issuers is not None:
            self.alternative_login_hint_token_issuers = alternative_login_hint_token_issuers
        self.identity_hint_contract = identity_hint_contract
        if identity_hint_contract_fulfillment is not None:
            self.identity_hint_contract_fulfillment = identity_hint_contract_fulfillment
        if identity_hint_mapping is not None:
            self.identity_hint_mapping = identity_hint_mapping

    @property
    def id(self):
        """Gets the id of this RequestPolicy.  # noqa: E501

        The request policy ID. ID is unique.  # noqa: E501

        :return: The id of this RequestPolicy.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RequestPolicy.

        The request policy ID. ID is unique.  # noqa: E501

        :param id: The id of this RequestPolicy.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this RequestPolicy.  # noqa: E501

        The request policy name. Name is unique.  # noqa: E501

        :return: The name of this RequestPolicy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RequestPolicy.

        The request policy name. Name is unique.  # noqa: E501

        :param name: The name of this RequestPolicy.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def authenticator_ref(self):
        """Gets the authenticator_ref of this RequestPolicy.  # noqa: E501

        Reference to the associated authenticator.  # noqa: E501

        :return: The authenticator_ref of this RequestPolicy.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._authenticator_ref

    @authenticator_ref.setter
    def authenticator_ref(self, authenticator_ref):
        """Sets the authenticator_ref of this RequestPolicy.

        Reference to the associated authenticator.  # noqa: E501

        :param authenticator_ref: The authenticator_ref of this RequestPolicy.  # noqa: E501
        :type: ResourceLink
        """
        if self._configuration.client_side_validation and authenticator_ref is None:
            raise ValueError("Invalid value for `authenticator_ref`, must not be `None`")  # noqa: E501

        self._authenticator_ref = authenticator_ref

    @property
    def user_code_pcv_ref(self):
        """Gets the user_code_pcv_ref of this RequestPolicy.  # noqa: E501

        Reference to the associated password credential validator.  # noqa: E501

        :return: The user_code_pcv_ref of this RequestPolicy.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._user_code_pcv_ref

    @user_code_pcv_ref.setter
    def user_code_pcv_ref(self, user_code_pcv_ref):
        """Sets the user_code_pcv_ref of this RequestPolicy.

        Reference to the associated password credential validator.  # noqa: E501

        :param user_code_pcv_ref: The user_code_pcv_ref of this RequestPolicy.  # noqa: E501
        :type: ResourceLink
        """

        self._user_code_pcv_ref = user_code_pcv_ref

    @property
    def transaction_lifetime(self):
        """Gets the transaction_lifetime of this RequestPolicy.  # noqa: E501

        The transaction lifetime in seconds.  # noqa: E501

        :return: The transaction_lifetime of this RequestPolicy.  # noqa: E501
        :rtype: int
        """
        return self._transaction_lifetime

    @transaction_lifetime.setter
    def transaction_lifetime(self, transaction_lifetime):
        """Sets the transaction_lifetime of this RequestPolicy.

        The transaction lifetime in seconds.  # noqa: E501

        :param transaction_lifetime: The transaction_lifetime of this RequestPolicy.  # noqa: E501
        :type: int
        """

        self._transaction_lifetime = transaction_lifetime

    @property
    def allow_unsigned_login_hint_token(self):
        """Gets the allow_unsigned_login_hint_token of this RequestPolicy.  # noqa: E501

        Allow unsigned login hint token.  # noqa: E501

        :return: The allow_unsigned_login_hint_token of this RequestPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._allow_unsigned_login_hint_token

    @allow_unsigned_login_hint_token.setter
    def allow_unsigned_login_hint_token(self, allow_unsigned_login_hint_token):
        """Sets the allow_unsigned_login_hint_token of this RequestPolicy.

        Allow unsigned login hint token.  # noqa: E501

        :param allow_unsigned_login_hint_token: The allow_unsigned_login_hint_token of this RequestPolicy.  # noqa: E501
        :type: bool
        """

        self._allow_unsigned_login_hint_token = allow_unsigned_login_hint_token

    @property
    def require_token_for_identity_hint(self):
        """Gets the require_token_for_identity_hint of this RequestPolicy.  # noqa: E501

        Require token for identity hint.  # noqa: E501

        :return: The require_token_for_identity_hint of this RequestPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._require_token_for_identity_hint

    @require_token_for_identity_hint.setter
    def require_token_for_identity_hint(self, require_token_for_identity_hint):
        """Sets the require_token_for_identity_hint of this RequestPolicy.

        Require token for identity hint.  # noqa: E501

        :param require_token_for_identity_hint: The require_token_for_identity_hint of this RequestPolicy.  # noqa: E501
        :type: bool
        """

        self._require_token_for_identity_hint = require_token_for_identity_hint

    @property
    def alternative_login_hint_token_issuers(self):
        """Gets the alternative_login_hint_token_issuers of this RequestPolicy.  # noqa: E501

        Alternative login hint token issuers.  # noqa: E501

        :return: The alternative_login_hint_token_issuers of this RequestPolicy.  # noqa: E501
        :rtype: list[AlternativeLoginHintTokenIssuer]
        """
        return self._alternative_login_hint_token_issuers

    @alternative_login_hint_token_issuers.setter
    def alternative_login_hint_token_issuers(self, alternative_login_hint_token_issuers):
        """Sets the alternative_login_hint_token_issuers of this RequestPolicy.

        Alternative login hint token issuers.  # noqa: E501

        :param alternative_login_hint_token_issuers: The alternative_login_hint_token_issuers of this RequestPolicy.  # noqa: E501
        :type: list[AlternativeLoginHintTokenIssuer]
        """

        self._alternative_login_hint_token_issuers = alternative_login_hint_token_issuers

    @property
    def identity_hint_contract(self):
        """Gets the identity_hint_contract of this RequestPolicy.  # noqa: E501

        Identity hint attribute contract.  # noqa: E501

        :return: The identity_hint_contract of this RequestPolicy.  # noqa: E501
        :rtype: IdentityHintContract
        """
        return self._identity_hint_contract

    @identity_hint_contract.setter
    def identity_hint_contract(self, identity_hint_contract):
        """Sets the identity_hint_contract of this RequestPolicy.

        Identity hint attribute contract.  # noqa: E501

        :param identity_hint_contract: The identity_hint_contract of this RequestPolicy.  # noqa: E501
        :type: IdentityHintContract
        """
        if self._configuration.client_side_validation and identity_hint_contract is None:
            raise ValueError("Invalid value for `identity_hint_contract`, must not be `None`")  # noqa: E501

        self._identity_hint_contract = identity_hint_contract

    @property
    def identity_hint_contract_fulfillment(self):
        """Gets the identity_hint_contract_fulfillment of this RequestPolicy.  # noqa: E501

        Identity hint attribute contract fulfillment.  # noqa: E501

        :return: The identity_hint_contract_fulfillment of this RequestPolicy.  # noqa: E501
        :rtype: AttributeMapping
        """
        return self._identity_hint_contract_fulfillment

    @identity_hint_contract_fulfillment.setter
    def identity_hint_contract_fulfillment(self, identity_hint_contract_fulfillment):
        """Sets the identity_hint_contract_fulfillment of this RequestPolicy.

        Identity hint attribute contract fulfillment.  # noqa: E501

        :param identity_hint_contract_fulfillment: The identity_hint_contract_fulfillment of this RequestPolicy.  # noqa: E501
        :type: AttributeMapping
        """

        self._identity_hint_contract_fulfillment = identity_hint_contract_fulfillment

    @property
    def identity_hint_mapping(self):
        """Gets the identity_hint_mapping of this RequestPolicy.  # noqa: E501

        Identity hint contract to request policy mapping.  # noqa: E501

        :return: The identity_hint_mapping of this RequestPolicy.  # noqa: E501
        :rtype: AttributeMapping
        """
        return self._identity_hint_mapping

    @identity_hint_mapping.setter
    def identity_hint_mapping(self, identity_hint_mapping):
        """Sets the identity_hint_mapping of this RequestPolicy.

        Identity hint contract to request policy mapping.  # noqa: E501

        :param identity_hint_mapping: The identity_hint_mapping of this RequestPolicy.  # noqa: E501
        :type: AttributeMapping
        """

        self._identity_hint_mapping = identity_hint_mapping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RequestPolicy):
            return True

        return self.to_dict() != other.to_dict()
