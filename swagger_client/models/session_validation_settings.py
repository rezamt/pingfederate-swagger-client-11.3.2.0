# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SessionValidationSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inherited': 'bool',
        'include_session_id': 'bool',
        'check_valid_authn_session': 'bool',
        'check_session_revocation_status': 'bool',
        'update_authn_session_activity': 'bool'
    }

    attribute_map = {
        'inherited': 'inherited',
        'include_session_id': 'includeSessionId',
        'check_valid_authn_session': 'checkValidAuthnSession',
        'check_session_revocation_status': 'checkSessionRevocationStatus',
        'update_authn_session_activity': 'updateAuthnSessionActivity'
    }

    def __init__(self, inherited=None, include_session_id=None, check_valid_authn_session=None, check_session_revocation_status=None, update_authn_session_activity=None, _configuration=None):  # noqa: E501
        """SessionValidationSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._inherited = None
        self._include_session_id = None
        self._check_valid_authn_session = None
        self._check_session_revocation_status = None
        self._update_authn_session_activity = None
        self.discriminator = None

        if inherited is not None:
            self.inherited = inherited
        if include_session_id is not None:
            self.include_session_id = include_session_id
        if check_valid_authn_session is not None:
            self.check_valid_authn_session = check_valid_authn_session
        if check_session_revocation_status is not None:
            self.check_session_revocation_status = check_session_revocation_status
        if update_authn_session_activity is not None:
            self.update_authn_session_activity = update_authn_session_activity

    @property
    def inherited(self):
        """Gets the inherited of this SessionValidationSettings.  # noqa: E501

        If this token manager has a parent, this flag determines whether session validation settings, such as checkValidAuthnSession, are inherited from the parent. When set to true, the other fields in this model become read-only. The default value is false.  # noqa: E501

        :return: The inherited of this SessionValidationSettings.  # noqa: E501
        :rtype: bool
        """
        return self._inherited

    @inherited.setter
    def inherited(self, inherited):
        """Sets the inherited of this SessionValidationSettings.

        If this token manager has a parent, this flag determines whether session validation settings, such as checkValidAuthnSession, are inherited from the parent. When set to true, the other fields in this model become read-only. The default value is false.  # noqa: E501

        :param inherited: The inherited of this SessionValidationSettings.  # noqa: E501
        :type: bool
        """

        self._inherited = inherited

    @property
    def include_session_id(self):
        """Gets the include_session_id of this SessionValidationSettings.  # noqa: E501

        Include the session identifier in the access token. Note that if any of the session validation features is enabled, the session identifier will already be included in the access tokens.  # noqa: E501

        :return: The include_session_id of this SessionValidationSettings.  # noqa: E501
        :rtype: bool
        """
        return self._include_session_id

    @include_session_id.setter
    def include_session_id(self, include_session_id):
        """Sets the include_session_id of this SessionValidationSettings.

        Include the session identifier in the access token. Note that if any of the session validation features is enabled, the session identifier will already be included in the access tokens.  # noqa: E501

        :param include_session_id: The include_session_id of this SessionValidationSettings.  # noqa: E501
        :type: bool
        """

        self._include_session_id = include_session_id

    @property
    def check_valid_authn_session(self):
        """Gets the check_valid_authn_session of this SessionValidationSettings.  # noqa: E501

        Check for a valid authentication session when validating the access token.  # noqa: E501

        :return: The check_valid_authn_session of this SessionValidationSettings.  # noqa: E501
        :rtype: bool
        """
        return self._check_valid_authn_session

    @check_valid_authn_session.setter
    def check_valid_authn_session(self, check_valid_authn_session):
        """Sets the check_valid_authn_session of this SessionValidationSettings.

        Check for a valid authentication session when validating the access token.  # noqa: E501

        :param check_valid_authn_session: The check_valid_authn_session of this SessionValidationSettings.  # noqa: E501
        :type: bool
        """

        self._check_valid_authn_session = check_valid_authn_session

    @property
    def check_session_revocation_status(self):
        """Gets the check_session_revocation_status of this SessionValidationSettings.  # noqa: E501

        Check the session revocation status when validating the access token.  # noqa: E501

        :return: The check_session_revocation_status of this SessionValidationSettings.  # noqa: E501
        :rtype: bool
        """
        return self._check_session_revocation_status

    @check_session_revocation_status.setter
    def check_session_revocation_status(self, check_session_revocation_status):
        """Sets the check_session_revocation_status of this SessionValidationSettings.

        Check the session revocation status when validating the access token.  # noqa: E501

        :param check_session_revocation_status: The check_session_revocation_status of this SessionValidationSettings.  # noqa: E501
        :type: bool
        """

        self._check_session_revocation_status = check_session_revocation_status

    @property
    def update_authn_session_activity(self):
        """Gets the update_authn_session_activity of this SessionValidationSettings.  # noqa: E501

        Update authentication session activity when validating the access token.  # noqa: E501

        :return: The update_authn_session_activity of this SessionValidationSettings.  # noqa: E501
        :rtype: bool
        """
        return self._update_authn_session_activity

    @update_authn_session_activity.setter
    def update_authn_session_activity(self, update_authn_session_activity):
        """Sets the update_authn_session_activity of this SessionValidationSettings.

        Update authentication session activity when validating the access token.  # noqa: E501

        :param update_authn_session_activity: The update_authn_session_activity of this SessionValidationSettings.  # noqa: E501
        :type: bool
        """

        self._update_authn_session_activity = update_authn_session_activity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SessionValidationSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SessionValidationSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SessionValidationSettings):
            return True

        return self.to_dict() != other.to_dict()
