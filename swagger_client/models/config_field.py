# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ConfigField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'value': 'str',
        'encrypted_value': 'str',
        'inherited': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'value': 'value',
        'encrypted_value': 'encryptedValue',
        'inherited': 'inherited'
    }

    def __init__(self, name=None, value=None, encrypted_value=None, inherited=None, _configuration=None):  # noqa: E501
        """ConfigField - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._value = None
        self._encrypted_value = None
        self._inherited = None
        self.discriminator = None

        self.name = name
        if value is not None:
            self.value = value
        if encrypted_value is not None:
            self.encrypted_value = encrypted_value
        if inherited is not None:
            self.inherited = inherited

    @property
    def name(self):
        """Gets the name of this ConfigField.  # noqa: E501

        The name of the configuration field.  # noqa: E501

        :return: The name of this ConfigField.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigField.

        The name of the configuration field.  # noqa: E501

        :param name: The name of this ConfigField.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def value(self):
        """Gets the value of this ConfigField.  # noqa: E501

        The value for the configuration field. For encrypted or hashed fields, GETs will not return this attribute. To update an encrypted or hashed field, specify the new value in this attribute.  # noqa: E501

        :return: The value of this ConfigField.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ConfigField.

        The value for the configuration field. For encrypted or hashed fields, GETs will not return this attribute. To update an encrypted or hashed field, specify the new value in this attribute.  # noqa: E501

        :param value: The value of this ConfigField.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def encrypted_value(self):
        """Gets the encrypted_value of this ConfigField.  # noqa: E501

        For encrypted or hashed fields, this attribute contains the encrypted representation of the field's value, if a value is defined. If you do not want to update the stored value, this attribute should be passed back unchanged.  # noqa: E501

        :return: The encrypted_value of this ConfigField.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_value

    @encrypted_value.setter
    def encrypted_value(self, encrypted_value):
        """Sets the encrypted_value of this ConfigField.

        For encrypted or hashed fields, this attribute contains the encrypted representation of the field's value, if a value is defined. If you do not want to update the stored value, this attribute should be passed back unchanged.  # noqa: E501

        :param encrypted_value: The encrypted_value of this ConfigField.  # noqa: E501
        :type: str
        """

        self._encrypted_value = encrypted_value

    @property
    def inherited(self):
        """Gets the inherited of this ConfigField.  # noqa: E501

        Whether this field is inherited from its parent instance. If true, the value/encrypted value properties become read-only. The default value is false.  # noqa: E501

        :return: The inherited of this ConfigField.  # noqa: E501
        :rtype: bool
        """
        return self._inherited

    @inherited.setter
    def inherited(self, inherited):
        """Sets the inherited of this ConfigField.

        Whether this field is inherited from its parent instance. If true, the value/encrypted value properties become read-only. The default value is false.  # noqa: E501

        :param inherited: The inherited of this ConfigField.  # noqa: E501
        :type: bool
        """

        self._inherited = inherited

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigField):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigField):
            return True

        return self.to_dict() != other.to_dict()
