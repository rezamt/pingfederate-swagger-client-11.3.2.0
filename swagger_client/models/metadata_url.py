# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class MetadataUrl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'url': 'str',
        'cert_view': 'CertView',
        'x509_file': 'X509File',
        'validate_signature': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'url': 'url',
        'cert_view': 'certView',
        'x509_file': 'x509File',
        'validate_signature': 'validateSignature'
    }

    def __init__(self, id=None, name=None, url=None, cert_view=None, x509_file=None, validate_signature=None, _configuration=None):  # noqa: E501
        """MetadataUrl - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._url = None
        self._cert_view = None
        self._x509_file = None
        self._validate_signature = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.url = url
        if cert_view is not None:
            self.cert_view = cert_view
        if x509_file is not None:
            self.x509_file = x509_file
        if validate_signature is not None:
            self.validate_signature = validate_signature

    @property
    def id(self):
        """Gets the id of this MetadataUrl.  # noqa: E501

        The persistent, unique ID for the Metadata Url. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified.  # noqa: E501

        :return: The id of this MetadataUrl.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetadataUrl.

        The persistent, unique ID for the Metadata Url. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified.  # noqa: E501

        :param id: The id of this MetadataUrl.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MetadataUrl.  # noqa: E501

        The name for the Metadata URL.  # noqa: E501

        :return: The name of this MetadataUrl.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetadataUrl.

        The name for the Metadata URL.  # noqa: E501

        :param name: The name of this MetadataUrl.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def url(self):
        """Gets the url of this MetadataUrl.  # noqa: E501

        The Metadata URL.  # noqa: E501

        :return: The url of this MetadataUrl.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MetadataUrl.

        The Metadata URL.  # noqa: E501

        :param url: The url of this MetadataUrl.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def cert_view(self):
        """Gets the cert_view of this MetadataUrl.  # noqa: E501

        The Signature Verification Certificate details. This property is read-only and is always ignored on a POST or PUT.  # noqa: E501

        :return: The cert_view of this MetadataUrl.  # noqa: E501
        :rtype: CertView
        """
        return self._cert_view

    @cert_view.setter
    def cert_view(self, cert_view):
        """Sets the cert_view of this MetadataUrl.

        The Signature Verification Certificate details. This property is read-only and is always ignored on a POST or PUT.  # noqa: E501

        :param cert_view: The cert_view of this MetadataUrl.  # noqa: E501
        :type: CertView
        """

        self._cert_view = cert_view

    @property
    def x509_file(self):
        """Gets the x509_file of this MetadataUrl.  # noqa: E501

        Data of the Signature Verification Certificate for the Metadata URL.  # noqa: E501

        :return: The x509_file of this MetadataUrl.  # noqa: E501
        :rtype: X509File
        """
        return self._x509_file

    @x509_file.setter
    def x509_file(self, x509_file):
        """Sets the x509_file of this MetadataUrl.

        Data of the Signature Verification Certificate for the Metadata URL.  # noqa: E501

        :param x509_file: The x509_file of this MetadataUrl.  # noqa: E501
        :type: X509File
        """

        self._x509_file = x509_file

    @property
    def validate_signature(self):
        """Gets the validate_signature of this MetadataUrl.  # noqa: E501

        Perform Metadata Signature Validation. The default value is TRUE.  # noqa: E501

        :return: The validate_signature of this MetadataUrl.  # noqa: E501
        :rtype: bool
        """
        return self._validate_signature

    @validate_signature.setter
    def validate_signature(self, validate_signature):
        """Sets the validate_signature of this MetadataUrl.

        Perform Metadata Signature Validation. The default value is TRUE.  # noqa: E501

        :param validate_signature: The validate_signature of this MetadataUrl.  # noqa: E501
        :type: bool
        """

        self._validate_signature = validate_signature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataUrl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataUrl):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MetadataUrl):
            return True

        return self.to_dict() != other.to_dict()
