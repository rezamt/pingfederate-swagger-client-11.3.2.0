# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SpConnection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sp_browser_sso': 'SpBrowserSso',
        'attribute_query': 'SpAttributeQuery',
        'ws_trust': 'SpWsTrust',
        'application_name': 'str',
        'application_icon_url': 'str',
        'outbound_provision': 'OutboundProvision',
        'connection_target_type': 'str'
    }

    attribute_map = {
        'sp_browser_sso': 'spBrowserSso',
        'attribute_query': 'attributeQuery',
        'ws_trust': 'wsTrust',
        'application_name': 'applicationName',
        'application_icon_url': 'applicationIconUrl',
        'outbound_provision': 'outboundProvision',
        'connection_target_type': 'connectionTargetType'
    }

    def __init__(self, sp_browser_sso=None, attribute_query=None, ws_trust=None, application_name=None, application_icon_url=None, outbound_provision=None, connection_target_type=None, _configuration=None):  # noqa: E501
        """SpConnection - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sp_browser_sso = None
        self._attribute_query = None
        self._ws_trust = None
        self._application_name = None
        self._application_icon_url = None
        self._outbound_provision = None
        self._connection_target_type = None
        self.discriminator = None

        if sp_browser_sso is not None:
            self.sp_browser_sso = sp_browser_sso
        if attribute_query is not None:
            self.attribute_query = attribute_query
        if ws_trust is not None:
            self.ws_trust = ws_trust
        if application_name is not None:
            self.application_name = application_name
        if application_icon_url is not None:
            self.application_icon_url = application_icon_url
        if outbound_provision is not None:
            self.outbound_provision = outbound_provision
        if connection_target_type is not None:
            self.connection_target_type = connection_target_type

    @property
    def sp_browser_sso(self):
        """Gets the sp_browser_sso of this SpConnection.  # noqa: E501

        The browser-based SSO settings used to communicate with your SP.  # noqa: E501

        :return: The sp_browser_sso of this SpConnection.  # noqa: E501
        :rtype: SpBrowserSso
        """
        return self._sp_browser_sso

    @sp_browser_sso.setter
    def sp_browser_sso(self, sp_browser_sso):
        """Sets the sp_browser_sso of this SpConnection.

        The browser-based SSO settings used to communicate with your SP.  # noqa: E501

        :param sp_browser_sso: The sp_browser_sso of this SpConnection.  # noqa: E501
        :type: SpBrowserSso
        """

        self._sp_browser_sso = sp_browser_sso

    @property
    def attribute_query(self):
        """Gets the attribute_query of this SpConnection.  # noqa: E501

        The attribute query settings for supporting SPs in requesting user attributes.  # noqa: E501

        :return: The attribute_query of this SpConnection.  # noqa: E501
        :rtype: SpAttributeQuery
        """
        return self._attribute_query

    @attribute_query.setter
    def attribute_query(self, attribute_query):
        """Sets the attribute_query of this SpConnection.

        The attribute query settings for supporting SPs in requesting user attributes.  # noqa: E501

        :param attribute_query: The attribute_query of this SpConnection.  # noqa: E501
        :type: SpAttributeQuery
        """

        self._attribute_query = attribute_query

    @property
    def ws_trust(self):
        """Gets the ws_trust of this SpConnection.  # noqa: E501

        The Ws-Trust settings.  # noqa: E501

        :return: The ws_trust of this SpConnection.  # noqa: E501
        :rtype: SpWsTrust
        """
        return self._ws_trust

    @ws_trust.setter
    def ws_trust(self, ws_trust):
        """Sets the ws_trust of this SpConnection.

        The Ws-Trust settings.  # noqa: E501

        :param ws_trust: The ws_trust of this SpConnection.  # noqa: E501
        :type: SpWsTrust
        """

        self._ws_trust = ws_trust

    @property
    def application_name(self):
        """Gets the application_name of this SpConnection.  # noqa: E501

        The application name.  # noqa: E501

        :return: The application_name of this SpConnection.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this SpConnection.

        The application name.  # noqa: E501

        :param application_name: The application_name of this SpConnection.  # noqa: E501
        :type: str
        """

        self._application_name = application_name

    @property
    def application_icon_url(self):
        """Gets the application_icon_url of this SpConnection.  # noqa: E501

        The application icon url.  # noqa: E501

        :return: The application_icon_url of this SpConnection.  # noqa: E501
        :rtype: str
        """
        return self._application_icon_url

    @application_icon_url.setter
    def application_icon_url(self, application_icon_url):
        """Sets the application_icon_url of this SpConnection.

        The application icon url.  # noqa: E501

        :param application_icon_url: The application_icon_url of this SpConnection.  # noqa: E501
        :type: str
        """

        self._application_icon_url = application_icon_url

    @property
    def outbound_provision(self):
        """Gets the outbound_provision of this SpConnection.  # noqa: E501

        The Outbound Provision settings.  # noqa: E501

        :return: The outbound_provision of this SpConnection.  # noqa: E501
        :rtype: OutboundProvision
        """
        return self._outbound_provision

    @outbound_provision.setter
    def outbound_provision(self, outbound_provision):
        """Sets the outbound_provision of this SpConnection.

        The Outbound Provision settings.  # noqa: E501

        :param outbound_provision: The outbound_provision of this SpConnection.  # noqa: E501
        :type: OutboundProvision
        """

        self._outbound_provision = outbound_provision

    @property
    def connection_target_type(self):
        """Gets the connection_target_type of this SpConnection.  # noqa: E501

        The connection target type. This field is intended for bulk import/export usage. Changing its value may result in unexpected behavior.  # noqa: E501

        :return: The connection_target_type of this SpConnection.  # noqa: E501
        :rtype: str
        """
        return self._connection_target_type

    @connection_target_type.setter
    def connection_target_type(self, connection_target_type):
        """Sets the connection_target_type of this SpConnection.

        The connection target type. This field is intended for bulk import/export usage. Changing its value may result in unexpected behavior.  # noqa: E501

        :param connection_target_type: The connection_target_type of this SpConnection.  # noqa: E501
        :type: str
        """
        allowed_values = ["STANDARD", "SALESFORCE", "SALESFORCE_CP", "SALESFORCE_PP", "PINGONE_SCIM11"]  # noqa: E501
        if (self._configuration.client_side_validation and
                connection_target_type not in allowed_values):
            raise ValueError(
                "Invalid value for `connection_target_type` ({0}), must be one of {1}"  # noqa: E501
                .format(connection_target_type, allowed_values)
            )

        self._connection_target_type = connection_target_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpConnection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpConnection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpConnection):
            return True

        return self.to_dict() != other.to_dict()
