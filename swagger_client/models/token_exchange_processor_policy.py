# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TokenExchangeProcessorPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'actor_token_required': 'bool',
        'attribute_contract': 'TokenExchangeProcessorAttributeContract',
        'processor_mappings': 'list[TokenExchangeProcessorMapping]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'actor_token_required': 'actorTokenRequired',
        'attribute_contract': 'attributeContract',
        'processor_mappings': 'processorMappings'
    }

    def __init__(self, id=None, name=None, actor_token_required=None, attribute_contract=None, processor_mappings=None, _configuration=None):  # noqa: E501
        """TokenExchangeProcessorPolicy - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._actor_token_required = None
        self._attribute_contract = None
        self._processor_mappings = None
        self.discriminator = None

        self.id = id
        self.name = name
        if actor_token_required is not None:
            self.actor_token_required = actor_token_required
        self.attribute_contract = attribute_contract
        self.processor_mappings = processor_mappings

    @property
    def id(self):
        """Gets the id of this TokenExchangeProcessorPolicy.  # noqa: E501

        The Token Exchange processor policy ID. ID is unique.  # noqa: E501

        :return: The id of this TokenExchangeProcessorPolicy.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TokenExchangeProcessorPolicy.

        The Token Exchange processor policy ID. ID is unique.  # noqa: E501

        :param id: The id of this TokenExchangeProcessorPolicy.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this TokenExchangeProcessorPolicy.  # noqa: E501

        The Token Exchange processor policy name. Name is unique.  # noqa: E501

        :return: The name of this TokenExchangeProcessorPolicy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TokenExchangeProcessorPolicy.

        The Token Exchange processor policy name. Name is unique.  # noqa: E501

        :param name: The name of this TokenExchangeProcessorPolicy.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def actor_token_required(self):
        """Gets the actor_token_required of this TokenExchangeProcessorPolicy.  # noqa: E501

        Require an Actor token on a OAuth 2.0 Token Exchange request.  # noqa: E501

        :return: The actor_token_required of this TokenExchangeProcessorPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._actor_token_required

    @actor_token_required.setter
    def actor_token_required(self, actor_token_required):
        """Sets the actor_token_required of this TokenExchangeProcessorPolicy.

        Require an Actor token on a OAuth 2.0 Token Exchange request.  # noqa: E501

        :param actor_token_required: The actor_token_required of this TokenExchangeProcessorPolicy.  # noqa: E501
        :type: bool
        """

        self._actor_token_required = actor_token_required

    @property
    def attribute_contract(self):
        """Gets the attribute_contract of this TokenExchangeProcessorPolicy.  # noqa: E501

        A set of attributes exposed by an OAuth 2.0 Token Exchange Processor policy.  # noqa: E501

        :return: The attribute_contract of this TokenExchangeProcessorPolicy.  # noqa: E501
        :rtype: TokenExchangeProcessorAttributeContract
        """
        return self._attribute_contract

    @attribute_contract.setter
    def attribute_contract(self, attribute_contract):
        """Sets the attribute_contract of this TokenExchangeProcessorPolicy.

        A set of attributes exposed by an OAuth 2.0 Token Exchange Processor policy.  # noqa: E501

        :param attribute_contract: The attribute_contract of this TokenExchangeProcessorPolicy.  # noqa: E501
        :type: TokenExchangeProcessorAttributeContract
        """
        if self._configuration.client_side_validation and attribute_contract is None:
            raise ValueError("Invalid value for `attribute_contract`, must not be `None`")  # noqa: E501

        self._attribute_contract = attribute_contract

    @property
    def processor_mappings(self):
        """Gets the processor_mappings of this TokenExchangeProcessorPolicy.  # noqa: E501

        A list of Token Processor(s) mappings into an OAuth 2.0 Token Exchange Processor policy.  # noqa: E501

        :return: The processor_mappings of this TokenExchangeProcessorPolicy.  # noqa: E501
        :rtype: list[TokenExchangeProcessorMapping]
        """
        return self._processor_mappings

    @processor_mappings.setter
    def processor_mappings(self, processor_mappings):
        """Sets the processor_mappings of this TokenExchangeProcessorPolicy.

        A list of Token Processor(s) mappings into an OAuth 2.0 Token Exchange Processor policy.  # noqa: E501

        :param processor_mappings: The processor_mappings of this TokenExchangeProcessorPolicy.  # noqa: E501
        :type: list[TokenExchangeProcessorMapping]
        """
        if self._configuration.client_side_validation and processor_mappings is None:
            raise ValueError("Invalid value for `processor_mappings`, must not be `None`")  # noqa: E501

        self._processor_mappings = processor_mappings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenExchangeProcessorPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenExchangeProcessorPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TokenExchangeProcessorPolicy):
            return True

        return self.to_dict() != other.to_dict()
