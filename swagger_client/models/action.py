# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Action(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'download': 'bool',
        'invocation_ref': 'ResourceLink',
        'parameters': 'list[FieldDescriptor]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'download': 'download',
        'invocation_ref': 'invocationRef',
        'parameters': 'parameters'
    }

    def __init__(self, id=None, name=None, description=None, download=None, invocation_ref=None, parameters=None, _configuration=None):  # noqa: E501
        """Action - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._download = None
        self._invocation_ref = None
        self._parameters = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if download is not None:
            self.download = download
        if invocation_ref is not None:
            self.invocation_ref = invocation_ref
        if parameters is not None:
            self.parameters = parameters

    @property
    def id(self):
        """Gets the id of this Action.  # noqa: E501

        The ID of this action.  # noqa: E501

        :return: The id of this Action.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Action.

        The ID of this action.  # noqa: E501

        :param id: The id of this Action.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Action.  # noqa: E501

        The name of this action.  # noqa: E501

        :return: The name of this Action.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Action.

        The name of this action.  # noqa: E501

        :param name: The name of this Action.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Action.  # noqa: E501

        The description of this action.  # noqa: E501

        :return: The description of this Action.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Action.

        The description of this action.  # noqa: E501

        :param description: The description of this Action.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def download(self):
        """Gets the download of this Action.  # noqa: E501

        Whether this action will trigger a download or invoke an internal action that will return a string result.  # noqa: E501

        :return: The download of this Action.  # noqa: E501
        :rtype: bool
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this Action.

        Whether this action will trigger a download or invoke an internal action that will return a string result.  # noqa: E501

        :param download: The download of this Action.  # noqa: E501
        :type: bool
        """

        self._download = download

    @property
    def invocation_ref(self):
        """Gets the invocation_ref of this Action.  # noqa: E501

        Whether this action will trigger a download or invoke an internal action that will return a string result.  # noqa: E501

        :return: The invocation_ref of this Action.  # noqa: E501
        :rtype: ResourceLink
        """
        return self._invocation_ref

    @invocation_ref.setter
    def invocation_ref(self, invocation_ref):
        """Sets the invocation_ref of this Action.

        Whether this action will trigger a download or invoke an internal action that will return a string result.  # noqa: E501

        :param invocation_ref: The invocation_ref of this Action.  # noqa: E501
        :type: ResourceLink
        """

        self._invocation_ref = invocation_ref

    @property
    def parameters(self):
        """Gets the parameters of this Action.  # noqa: E501

        List of parameters for this action.  # noqa: E501

        :return: The parameters of this Action.  # noqa: E501
        :rtype: list[FieldDescriptor]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Action.

        List of parameters for this action.  # noqa: E501

        :param parameters: The parameters of this Action.  # noqa: E501
        :type: list[FieldDescriptor]
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Action, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Action):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Action):
            return True

        return self.to_dict() != other.to_dict()
