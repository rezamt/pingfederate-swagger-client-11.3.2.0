# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ConfigStoreApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_setting(self, bundle, id, **kwargs):  # noqa: E501
        """Delete a setting.  # noqa: E501

        Delete a setting. This is an advanced operation with minimal validation. Incorrect use of this operation can harm the integrity of your PingFederate configuration. Please ensure you have specified the correct bundle name and setting ID before invoking this operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_setting(bundle, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundle: This field represents a configuration file that contains a bundle of settings. (required)
        :param str id: ID of setting to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_setting_with_http_info(bundle, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_setting_with_http_info(bundle, id, **kwargs)  # noqa: E501
            return data

    def delete_setting_with_http_info(self, bundle, id, **kwargs):  # noqa: E501
        """Delete a setting.  # noqa: E501

        Delete a setting. This is an advanced operation with minimal validation. Incorrect use of this operation can harm the integrity of your PingFederate configuration. Please ensure you have specified the correct bundle name and setting ID before invoking this operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_setting_with_http_info(bundle, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundle: This field represents a configuration file that contains a bundle of settings. (required)
        :param str id: ID of setting to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundle', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle' is set
        if self.api_client.client_side_validation and ('bundle' not in params or
                                                       params['bundle'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bundle` when calling `delete_setting`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bundle' in params:
            path_params['bundle'] = params['bundle']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/configStore/{bundle}/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_setting(self, bundle, id, **kwargs):  # noqa: E501
        """Get a single setting from a bundle.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_setting(bundle, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundle: This field represents a configuration file that contains a bundle of settings. (required)
        :param str id: ID of setting to retrieve. (required)
        :return: ConfigStoreSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_setting_with_http_info(bundle, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_setting_with_http_info(bundle, id, **kwargs)  # noqa: E501
            return data

    def get_setting_with_http_info(self, bundle, id, **kwargs):  # noqa: E501
        """Get a single setting from a bundle.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_setting_with_http_info(bundle, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundle: This field represents a configuration file that contains a bundle of settings. (required)
        :param str id: ID of setting to retrieve. (required)
        :return: ConfigStoreSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundle', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle' is set
        if self.api_client.client_side_validation and ('bundle' not in params or
                                                       params['bundle'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bundle` when calling `get_setting`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bundle' in params:
            path_params['bundle'] = params['bundle']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/configStore/{bundle}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigStoreSetting',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_settings(self, bundle, **kwargs):  # noqa: E501
        """Get all settings from a bundle.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_settings(bundle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundle: This field represents a configuration file that contains a bundle of settings. (required)
        :return: ConfigStoreBundle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_settings_with_http_info(bundle, **kwargs)  # noqa: E501
        else:
            (data) = self.get_settings_with_http_info(bundle, **kwargs)  # noqa: E501
            return data

    def get_settings_with_http_info(self, bundle, **kwargs):  # noqa: E501
        """Get all settings from a bundle.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_settings_with_http_info(bundle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundle: This field represents a configuration file that contains a bundle of settings. (required)
        :return: ConfigStoreBundle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundle']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle' is set
        if self.api_client.client_side_validation and ('bundle' not in params or
                                                       params['bundle'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bundle` when calling `get_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bundle' in params:
            path_params['bundle'] = params['bundle']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/configStore/{bundle}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigStoreBundle',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_setting(self, bundle, id, body, **kwargs):  # noqa: E501
        """Create or update a setting/bundle.  # noqa: E501

        Create or update a setting/bundle. This is an advanced operation with minimal validation. Incorrect use of this operation can harm the integrity of your PingFederate configuration. Please ensure you have specified the correct bundle name, setting ID, and setting value before invoking this operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_setting(bundle, id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundle: This field represents a configuration file that contains a bundle of settings. (required)
        :param str id: ID of setting to create/update. (required)
        :param ConfigStoreSetting body: Configuration setting. (required)
        :return: ConfigStoreSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_setting_with_http_info(bundle, id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_setting_with_http_info(bundle, id, body, **kwargs)  # noqa: E501
            return data

    def update_setting_with_http_info(self, bundle, id, body, **kwargs):  # noqa: E501
        """Create or update a setting/bundle.  # noqa: E501

        Create or update a setting/bundle. This is an advanced operation with minimal validation. Incorrect use of this operation can harm the integrity of your PingFederate configuration. Please ensure you have specified the correct bundle name, setting ID, and setting value before invoking this operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_setting_with_http_info(bundle, id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundle: This field represents a configuration file that contains a bundle of settings. (required)
        :param str id: ID of setting to create/update. (required)
        :param ConfigStoreSetting body: Configuration setting. (required)
        :return: ConfigStoreSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundle', 'id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle' is set
        if self.api_client.client_side_validation and ('bundle' not in params or
                                                       params['bundle'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bundle` when calling `update_setting`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_setting`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bundle' in params:
            path_params['bundle'] = params['bundle']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/configStore/{bundle}/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigStoreSetting',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
