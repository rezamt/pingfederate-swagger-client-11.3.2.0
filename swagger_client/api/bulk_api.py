# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BulkApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def export_configuration(self, **kwargs):  # noqa: E501
        """Export all API resources to a JSON file.  # noqa: E501

        For the /configStore resource type, only the settings that are different from the defaults for this version of PingFederate are included in the export.<br><br>Only resource types currently supported by the Administrative API are included in the exported data. Resources not yet supported include:<br><br>- SMS Provider Settings<br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_configuration(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_external_resources: Include external resources like OAuth clients stored outside of PingFederate.
        :return: BulkConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_configuration_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.export_configuration_with_http_info(**kwargs)  # noqa: E501
            return data

    def export_configuration_with_http_info(self, **kwargs):  # noqa: E501
        """Export all API resources to a JSON file.  # noqa: E501

        For the /configStore resource type, only the settings that are different from the defaults for this version of PingFederate are included in the export.<br><br>Only resource types currently supported by the Administrative API are included in the exported data. Resources not yet supported include:<br><br>- SMS Provider Settings<br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_configuration_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_external_resources: Include external resources like OAuth clients stored outside of PingFederate.
        :return: BulkConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['include_external_resources']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_configuration" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_external_resources' in params:
            query_params.append(('includeExternalResources', params['include_external_resources']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bulk/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_configuration(self, body, **kwargs):  # noqa: E501
        """Import configuration for a PingFederate deployment from a JSON file.  # noqa: E501

        All existing configuration will be wiped before the import begins. If any validation errors are found, PingFederate will roll back to the previous configuration. The master key set in pf.jwk must include the key in use when the JSON configuration was originally exported.  JSON configurations exported from earlier versions of PingFederate can be imported. However, this is not a supported way of upgrading from an earlier version. Instead, you should run the upgrade utility and then reexport to get an updated configuration JSON.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_configuration(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkConfig body: Configuration to import. (required)
        :param bool fail_fast: When set to true, stops the import as soon as any validation errors are encountered. When false, import will continue to validate configuration after the first failure to identify all validation errors. If any validation errors are present PingFederate will roll back to the state prior to the import attempt.
        :param bool x_bypass_external_validation: External validation will be bypassed when set to true. Default to false.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_configuration_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.import_configuration_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def import_configuration_with_http_info(self, body, **kwargs):  # noqa: E501
        """Import configuration for a PingFederate deployment from a JSON file.  # noqa: E501

        All existing configuration will be wiped before the import begins. If any validation errors are found, PingFederate will roll back to the previous configuration. The master key set in pf.jwk must include the key in use when the JSON configuration was originally exported.  JSON configurations exported from earlier versions of PingFederate can be imported. However, this is not a supported way of upgrading from an earlier version. Instead, you should run the upgrade utility and then reexport to get an updated configuration JSON.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_configuration_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkConfig body: Configuration to import. (required)
        :param bool fail_fast: When set to true, stops the import as soon as any validation errors are encountered. When false, import will continue to validate configuration after the first failure to identify all validation errors. If any validation errors are present PingFederate will roll back to the state prior to the import attempt.
        :param bool x_bypass_external_validation: External validation will be bypassed when set to true. Default to false.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fail_fast', 'x_bypass_external_validation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `import_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fail_fast' in params:
            query_params.append(('failFast', params['fail_fast']))  # noqa: E501

        header_params = {}
        if 'x_bypass_external_validation' in params:
            header_params['X-BypassExternalValidation'] = params['x_bypass_external_validation']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bulk/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
