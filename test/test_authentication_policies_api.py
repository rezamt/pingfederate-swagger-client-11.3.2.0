# coding: utf-8

"""
    Administrative API Documentation

    The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import swagger_client
from swagger_client.api.authentication_policies_api import AuthenticationPoliciesApi  # noqa: E501
from swagger_client.rest import ApiException


class TestAuthenticationPoliciesApi(unittest.TestCase):
    """AuthenticationPoliciesApi unit test stubs"""

    def setUp(self):
        self.api = swagger_client.api.authentication_policies_api.AuthenticationPoliciesApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_create_fragment(self):
        """Test case for create_fragment

        Create an authentication policy fragment.  # noqa: E501
        """
        pass

    def test_create_policy(self):
        """Test case for create_policy

        Create a new authentication policy.  # noqa: E501
        """
        pass

    def test_delete_fragment(self):
        """Test case for delete_fragment

        Delete an authentication policy fragment.  # noqa: E501
        """
        pass

    def test_delete_policy(self):
        """Test case for delete_policy

        Delete an authentication policy.  # noqa: E501
        """
        pass

    def test_get_default_authentication_policy(self):
        """Test case for get_default_authentication_policy

        Get the default configured authentication policy.  # noqa: E501
        """
        pass

    def test_get_fragment(self):
        """Test case for get_fragment

        Get an authentication policy fragment by ID.  # noqa: E501
        """
        pass

    def test_get_fragments(self):
        """Test case for get_fragments

        Get all of the authentication policies fragments.  # noqa: E501
        """
        pass

    def test_get_policy(self):
        """Test case for get_policy

        Get an authentication policy by ID.  # noqa: E501
        """
        pass

    def test_get_settings(self):
        """Test case for get_settings

        Get the authentication policies settings.  # noqa: E501
        """
        pass

    def test_move_policy(self):
        """Test case for move_policy

        Move an authentication policy to a location within the policy tree.  # noqa: E501
        """
        pass

    def test_update_default_authentication_policy(self):
        """Test case for update_default_authentication_policy

        Set the default authentication policy.  # noqa: E501
        """
        pass

    def test_update_fragment(self):
        """Test case for update_fragment

        Update an authentication policy fragment.  # noqa: E501
        """
        pass

    def test_update_policy(self):
        """Test case for update_policy

        Update an authentication policy.  # noqa: E501
        """
        pass

    def test_update_settings(self):
        """Test case for update_settings

        Set the authentication policies settings.  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
